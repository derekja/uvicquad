
SENG466.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000296  00800200  00005d26  00005dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005d26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce3  00800496  00800496  00006050  2**0
                  ALLOC
  3 .stab         00005bb0  00000000  00000000  00006050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003c12  00000000  00000000  0000bc00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 03 01 	jmp	0x206	; 0x206 <__ctors_end>
       4:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <__vector_1>
       8:	0c 94 8f 22 	jmp	0x451e	; 0x451e <__vector_2>
       c:	0c 94 c0 22 	jmp	0x4580	; 0x4580 <__vector_3>
      10:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <__vector_4>
      14:	0c 94 22 23 	jmp	0x4644	; 0x4644 <__vector_5>
      18:	0c 94 53 23 	jmp	0x46a6	; 0x46a6 <__vector_6>
      1c:	0c 94 84 23 	jmp	0x4708	; 0x4708 <__vector_7>
      20:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__vector_8>
      24:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      30:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      3c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      40:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      44:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__vector_17>
      48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      4c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      54:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      58:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      5c:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__vector_23>
      60:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      64:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <__vector_25>
      68:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      6c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      70:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      74:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      78:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      7c:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__vector_31>
      80:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      84:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      88:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      8c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      90:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__vector_36>
      94:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      98:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      9c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      a0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      a4:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_41>
      a8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      ac:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      b0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      b4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      b8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      bc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      c0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      c4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      c8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      cc:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__vector_51>
      d0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      d4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      d8:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__vector_54>
      dc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      e0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>

000000e4 <port_to_mode_PGM>:
      e4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
      f4:	01 01 00 00 04 01 07 01 0a 01                       ..........

000000fe <port_to_output_PGM>:
      fe:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     10e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000118 <port_to_input_PGM>:
     118:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     128:	00 01 00 00 03 01 06 01 09 01                       ..........

00000132 <digital_pin_to_port_PGM>:
     132:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     142:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     152:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     162:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     172:	0b 0b 0b 0b 0b 0b                                   ......

00000178 <digital_pin_to_bit_mask_PGM>:
     178:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     188:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     198:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b8:	04 08 10 20 40 80                                   ... @.

000001be <digital_pin_to_timer_PGM>:
     1be:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...

00000204 <__ctors_start>:
     204:	48 1e       	adc	r4, r24

00000206 <__ctors_end>:
     206:	11 24       	eor	r1, r1
     208:	1f be       	out	0x3f, r1	; 63
     20a:	cf ef       	ldi	r28, 0xFF	; 255
     20c:	d1 e2       	ldi	r29, 0x21	; 33
     20e:	de bf       	out	0x3e, r29	; 62
     210:	cd bf       	out	0x3d, r28	; 61

00000212 <__do_copy_data>:
     212:	14 e0       	ldi	r17, 0x04	; 4
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b2 e0       	ldi	r27, 0x02	; 2
     218:	e6 e2       	ldi	r30, 0x26	; 38
     21a:	fd e5       	ldi	r31, 0x5D	; 93
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	0b bf       	out	0x3b, r16	; 59
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x14>
     222:	07 90       	elpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a6 39       	cpi	r26, 0x96	; 150
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0x10>

0000022c <__do_clear_bss>:
     22c:	11 e1       	ldi	r17, 0x11	; 17
     22e:	a6 e9       	ldi	r26, 0x96	; 150
     230:	b4 e0       	ldi	r27, 0x04	; 4
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a9 37       	cpi	r26, 0x79	; 121
     238:	b1 07       	cpc	r27, r17
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>

0000023c <__do_global_ctors>:
     23c:	12 e0       	ldi	r17, 0x02	; 2
     23e:	c6 e0       	ldi	r28, 0x06	; 6
     240:	d2 e0       	ldi	r29, 0x02	; 2
     242:	04 c0       	rjmp	.+8      	; 0x24c <.do_global_ctors_start>

00000244 <.do_global_ctors_loop>:
     244:	22 97       	sbiw	r28, 0x02	; 2
     246:	fe 01       	movw	r30, r28
     248:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__tablejump__>

0000024c <.do_global_ctors_start>:
     24c:	c4 30       	cpi	r28, 0x04	; 4
     24e:	d1 07       	cpc	r29, r17
     250:	c9 f7       	brne	.-14     	; 0x244 <.do_global_ctors_loop>
     252:	0e 94 90 1b 	call	0x3720	; 0x3720 <main>
     256:	0c 94 91 2e 	jmp	0x5d22	; 0x5d22 <_exit>

0000025a <__bad_interrupt>:
     25a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025e <_Z7actuatev>:
int right_propulsion_scaled;

extern int speed_right;
extern int speed_left;

void actuate()
     25e:	1f 93       	push	r17
     260:	df 93       	push	r29
     262:	cf 93       	push	r28
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
{

	right_propulsion = speed_right;
     268:	80 91 a2 04 	lds	r24, 0x04A2
     26c:	90 91 a3 04 	lds	r25, 0x04A3
     270:	90 93 9d 04 	sts	0x049D, r25
     274:	80 93 9c 04 	sts	0x049C, r24
	right_propulsion_scaled = speed_right;
     278:	80 91 a2 04 	lds	r24, 0x04A2
     27c:	90 91 a3 04 	lds	r25, 0x04A3
     280:	90 93 a1 04 	sts	0x04A1, r25
     284:	80 93 a0 04 	sts	0x04A0, r24
	//right_propulsion_scaled = ( right_propulsion * 255 ) / 200;//scale value

	left_propulsion = speed_left;
     288:	80 91 a4 04 	lds	r24, 0x04A4
     28c:	90 91 a5 04 	lds	r25, 0x04A5
     290:	90 93 9b 04 	sts	0x049B, r25
     294:	80 93 9a 04 	sts	0x049A, r24
	left_propulsion_scaled = speed_left;
     298:	80 91 a4 04 	lds	r24, 0x04A4
     29c:	90 91 a5 04 	lds	r25, 0x04A5
     2a0:	90 93 9f 04 	sts	0x049F, r25
     2a4:	80 93 9e 04 	sts	0x049E, r24
	//left_propulsion_scaled = ( left_propulsion * 255 ) / 200;//scale value

	if( left_propulsion_scaled == 0 && right_propulsion_scaled == 0)
     2a8:	80 91 9e 04 	lds	r24, 0x049E
     2ac:	90 91 9f 04 	lds	r25, 0x049F
     2b0:	00 97       	sbiw	r24, 0x00	; 0
     2b2:	a9 f4       	brne	.+42     	; 0x2de <_Z7actuatev+0x80>
     2b4:	80 91 a0 04 	lds	r24, 0x04A0
     2b8:	90 91 a1 04 	lds	r25, 0x04A1
     2bc:	00 97       	sbiw	r24, 0x00	; 0
     2be:	79 f4       	brne	.+30     	; 0x2de <_Z7actuatev+0x80>
	{
		digitalWrite( LEFT_MOTOR_PIN_E, 0 );
     2c0:	80 91 1d 02 	lds	r24, 0x021D
     2c4:	90 91 1e 02 	lds	r25, 0x021E
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
		digitalWrite( RIGHT_MOTOR_PIN_E, 0 );
     2ce:	80 91 1f 02 	lds	r24, 0x021F
     2d2:	90 91 20 02 	lds	r25, 0x0220
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
     2dc:	2a c1       	rjmp	.+596    	; 0x532 <_Z7actuatev+0x2d4>
		return;
	}
	else
	{
		if( left_propulsion_scaled > 0 )
     2de:	80 91 9e 04 	lds	r24, 0x049E
     2e2:	90 91 9f 04 	lds	r25, 0x049F
     2e6:	18 16       	cp	r1, r24
     2e8:	19 06       	cpc	r1, r25
     2ea:	7c f4       	brge	.+30     	; 0x30a <_Z7actuatev+0xac>
		{
//			Serial.println("Forwards");
			digitalWrite( LEFT_MOTOR_PIN_1, 0 );
     2ec:	80 91 21 02 	lds	r24, 0x0221
     2f0:	90 91 22 02 	lds	r25, 0x0222
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
			digitalWrite( LEFT_MOTOR_PIN_2, 1 );
     2fa:	80 91 23 02 	lds	r24, 0x0223
     2fe:	90 91 24 02 	lds	r25, 0x0224
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
     308:	19 c0       	rjmp	.+50     	; 0x33c <_Z7actuatev+0xde>
		}
		else
		{
//			Serial.println("Backwards");
			left_propulsion_scaled = -left_propulsion_scaled;
     30a:	80 91 9e 04 	lds	r24, 0x049E
     30e:	90 91 9f 04 	lds	r25, 0x049F
     312:	90 95       	com	r25
     314:	81 95       	neg	r24
     316:	9f 4f       	sbci	r25, 0xFF	; 255
     318:	90 93 9f 04 	sts	0x049F, r25
     31c:	80 93 9e 04 	sts	0x049E, r24
			digitalWrite( LEFT_MOTOR_PIN_1, 1 );
     320:	80 91 21 02 	lds	r24, 0x0221
     324:	90 91 22 02 	lds	r25, 0x0222
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
			digitalWrite( LEFT_MOTOR_PIN_2, 0 );
     32e:	80 91 23 02 	lds	r24, 0x0223
     332:	90 91 24 02 	lds	r25, 0x0224
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
		}

		if( left_propulsion_scaled > 0 )
     33c:	80 91 9e 04 	lds	r24, 0x049E
     340:	90 91 9f 04 	lds	r25, 0x049F
     344:	18 16       	cp	r1, r24
     346:	19 06       	cpc	r1, r25
     348:	8c f4       	brge	.+34     	; 0x36c <_Z7actuatev+0x10e>
		{
			analogWrite( LEFT_MOTOR_PIN_E, left_propulsion_scaled + 45 );
     34a:	80 91 1d 02 	lds	r24, 0x021D
     34e:	90 91 1e 02 	lds	r25, 0x021E
     352:	48 2f       	mov	r20, r24
     354:	80 91 9e 04 	lds	r24, 0x049E
     358:	90 91 9f 04 	lds	r25, 0x049F
     35c:	9c 01       	movw	r18, r24
     35e:	23 5d       	subi	r18, 0xD3	; 211
     360:	3f 4f       	sbci	r19, 0xFF	; 255
     362:	84 2f       	mov	r24, r20
     364:	b9 01       	movw	r22, r18
     366:	0e 94 23 25 	call	0x4a46	; 0x4a46 <analogWrite>
     36a:	07 c0       	rjmp	.+14     	; 0x37a <_Z7actuatev+0x11c>
		}
		else
		{
			digitalWrite( LEFT_MOTOR_PIN_E, 0 );
     36c:	80 91 1d 02 	lds	r24, 0x021D
     370:	90 91 1e 02 	lds	r25, 0x021E
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
		}

		Serial.print("Left Scaled: ");
     37a:	84 e1       	ldi	r24, 0x14	; 20
     37c:	91 e1       	ldi	r25, 0x11	; 17
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	32 e0       	ldi	r19, 0x02	; 2
     382:	b9 01       	movw	r22, r18
     384:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN5Print5printEPKc>
		Serial.println(left_propulsion_scaled);
     388:	20 91 9e 04 	lds	r18, 0x049E
     38c:	30 91 9f 04 	lds	r19, 0x049F
     390:	84 e1       	ldi	r24, 0x14	; 20
     392:	91 e1       	ldi	r25, 0x11	; 17
     394:	b9 01       	movw	r22, r18
     396:	4a e0       	ldi	r20, 0x0A	; 10
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEii>

		if( right_propulsion_scaled > 0 )
     39e:	80 91 a0 04 	lds	r24, 0x04A0
     3a2:	90 91 a1 04 	lds	r25, 0x04A1
     3a6:	18 16       	cp	r1, r24
     3a8:	19 06       	cpc	r1, r25
     3aa:	7c f4       	brge	.+30     	; 0x3ca <_Z7actuatev+0x16c>
		{
			//Serial.println("Backwards");
			digitalWrite( RIGHT_MOTOR_PIN_1, 0 );
     3ac:	80 91 25 02 	lds	r24, 0x0225
     3b0:	90 91 26 02 	lds	r25, 0x0226
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
			digitalWrite( RIGHT_MOTOR_PIN_2, 1 );
     3ba:	80 91 27 02 	lds	r24, 0x0227
     3be:	90 91 28 02 	lds	r25, 0x0228
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
     3c8:	19 c0       	rjmp	.+50     	; 0x3fc <_Z7actuatev+0x19e>
		}
		else
		{
			//Serial.println("Forwards");
			right_propulsion_scaled = -right_propulsion_scaled;
     3ca:	80 91 a0 04 	lds	r24, 0x04A0
     3ce:	90 91 a1 04 	lds	r25, 0x04A1
     3d2:	90 95       	com	r25
     3d4:	81 95       	neg	r24
     3d6:	9f 4f       	sbci	r25, 0xFF	; 255
     3d8:	90 93 a1 04 	sts	0x04A1, r25
     3dc:	80 93 a0 04 	sts	0x04A0, r24
			digitalWrite( RIGHT_MOTOR_PIN_1, 1 );
     3e0:	80 91 25 02 	lds	r24, 0x0225
     3e4:	90 91 26 02 	lds	r25, 0x0226
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
			digitalWrite( RIGHT_MOTOR_PIN_2, 0 );
     3ee:	80 91 27 02 	lds	r24, 0x0227
     3f2:	90 91 28 02 	lds	r25, 0x0228
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
		}
		if( right_propulsion_scaled > 0 )
     3fc:	80 91 a0 04 	lds	r24, 0x04A0
     400:	90 91 a1 04 	lds	r25, 0x04A1
     404:	18 16       	cp	r1, r24
     406:	19 06       	cpc	r1, r25
     408:	0c f0       	brlt	.+2      	; 0x40c <_Z7actuatev+0x1ae>
     40a:	7a c0       	rjmp	.+244    	; 0x500 <_Z7actuatev+0x2a2>
		{
			if( right_propulsion_scaled > 127 && right_propulsion_scaled < 200){
     40c:	80 91 a0 04 	lds	r24, 0x04A0
     410:	90 91 a1 04 	lds	r25, 0x04A1
     414:	80 38       	cpi	r24, 0x80	; 128
     416:	91 05       	cpc	r25, r1
     418:	8c f1       	brlt	.+98     	; 0x47c <_Z7actuatev+0x21e>
     41a:	80 91 a0 04 	lds	r24, 0x04A0
     41e:	90 91 a1 04 	lds	r25, 0x04A1
     422:	88 3c       	cpi	r24, 0xC8	; 200
     424:	91 05       	cpc	r25, r1
     426:	54 f5       	brge	.+84     	; 0x47c <_Z7actuatev+0x21e>
				analogWrite( RIGHT_MOTOR_PIN_E, (int) ((right_propulsion_scaled + 40) * 0.71) );
     428:	80 91 1f 02 	lds	r24, 0x021F
     42c:	90 91 20 02 	lds	r25, 0x0220
     430:	18 2f       	mov	r17, r24
     432:	80 91 a0 04 	lds	r24, 0x04A0
     436:	90 91 a1 04 	lds	r25, 0x04A1
     43a:	88 96       	adiw	r24, 0x28	; 40
     43c:	aa 27       	eor	r26, r26
     43e:	97 fd       	sbrc	r25, 7
     440:	a0 95       	com	r26
     442:	ba 2f       	mov	r27, r26
     444:	bc 01       	movw	r22, r24
     446:	cd 01       	movw	r24, r26
     448:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__floatsisf>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	2f e8       	ldi	r18, 0x8F	; 143
     456:	32 ec       	ldi	r19, 0xC2	; 194
     458:	45 e3       	ldi	r20, 0x35	; 53
     45a:	5f e3       	ldi	r21, 0x3F	; 63
     45c:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	bc 01       	movw	r22, r24
     466:	cd 01       	movw	r24, r26
     468:	0e 94 2a 2b 	call	0x5654	; 0x5654 <__fixsfsi>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	9c 01       	movw	r18, r24
     472:	81 2f       	mov	r24, r17
     474:	b9 01       	movw	r22, r18
     476:	0e 94 23 25 	call	0x4a46	; 0x4a46 <analogWrite>
     47a:	49 c0       	rjmp	.+146    	; 0x50e <_Z7actuatev+0x2b0>
			}
			else if (right_propulsion_scaled >= 200) {
     47c:	80 91 a0 04 	lds	r24, 0x04A0
     480:	90 91 a1 04 	lds	r25, 0x04A1
     484:	88 3c       	cpi	r24, 0xC8	; 200
     486:	91 05       	cpc	r25, r1
     488:	54 f1       	brlt	.+84     	; 0x4de <_Z7actuatev+0x280>
				analogWrite( RIGHT_MOTOR_PIN_E, (int) ((right_propulsion_scaled + 40) * 0.64) );
     48a:	80 91 1f 02 	lds	r24, 0x021F
     48e:	90 91 20 02 	lds	r25, 0x0220
     492:	18 2f       	mov	r17, r24
     494:	80 91 a0 04 	lds	r24, 0x04A0
     498:	90 91 a1 04 	lds	r25, 0x04A1
     49c:	88 96       	adiw	r24, 0x28	; 40
     49e:	aa 27       	eor	r26, r26
     4a0:	97 fd       	sbrc	r25, 7
     4a2:	a0 95       	com	r26
     4a4:	ba 2f       	mov	r27, r26
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__floatsisf>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	bc 01       	movw	r22, r24
     4b4:	cd 01       	movw	r24, r26
     4b6:	2a e0       	ldi	r18, 0x0A	; 10
     4b8:	37 ed       	ldi	r19, 0xD7	; 215
     4ba:	43 e2       	ldi	r20, 0x23	; 35
     4bc:	5f e3       	ldi	r21, 0x3F	; 63
     4be:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	bc 01       	movw	r22, r24
     4c8:	cd 01       	movw	r24, r26
     4ca:	0e 94 2a 2b 	call	0x5654	; 0x5654 <__fixsfsi>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	9c 01       	movw	r18, r24
     4d4:	81 2f       	mov	r24, r17
     4d6:	b9 01       	movw	r22, r18
     4d8:	0e 94 23 25 	call	0x4a46	; 0x4a46 <analogWrite>
     4dc:	18 c0       	rjmp	.+48     	; 0x50e <_Z7actuatev+0x2b0>
			}
			else {
				analogWrite( RIGHT_MOTOR_PIN_E, right_propulsion_scaled + 40);
     4de:	80 91 1f 02 	lds	r24, 0x021F
     4e2:	90 91 20 02 	lds	r25, 0x0220
     4e6:	48 2f       	mov	r20, r24
     4e8:	80 91 a0 04 	lds	r24, 0x04A0
     4ec:	90 91 a1 04 	lds	r25, 0x04A1
     4f0:	9c 01       	movw	r18, r24
     4f2:	28 5d       	subi	r18, 0xD8	; 216
     4f4:	3f 4f       	sbci	r19, 0xFF	; 255
     4f6:	84 2f       	mov	r24, r20
     4f8:	b9 01       	movw	r22, r18
     4fa:	0e 94 23 25 	call	0x4a46	; 0x4a46 <analogWrite>
     4fe:	07 c0       	rjmp	.+14     	; 0x50e <_Z7actuatev+0x2b0>
			}
		}
		else
		{
			digitalWrite( RIGHT_MOTOR_PIN_E, 0 );
     500:	80 91 1f 02 	lds	r24, 0x021F
     504:	90 91 20 02 	lds	r25, 0x0220
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
		}

Serial.print("Right Scaled: ");
     50e:	84 e1       	ldi	r24, 0x14	; 20
     510:	91 e1       	ldi	r25, 0x11	; 17
     512:	2e e0       	ldi	r18, 0x0E	; 14
     514:	32 e0       	ldi	r19, 0x02	; 2
     516:	b9 01       	movw	r22, r18
     518:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN5Print5printEPKc>
Serial.println(right_propulsion_scaled);
     51c:	20 91 a0 04 	lds	r18, 0x04A0
     520:	30 91 a1 04 	lds	r19, 0x04A1
     524:	84 e1       	ldi	r24, 0x14	; 20
     526:	91 e1       	ldi	r25, 0x11	; 17
     528:	b9 01       	movw	r22, r18
     52a:	4a e0       	ldi	r20, 0x0A	; 10
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEii>
	}
}
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	1f 91       	pop	r17
     538:	08 95       	ret

0000053a <_Z7controlv>:
int follow_wall_p_left;
int FOLLOW_WALL_KP_LEFT = 2;
int follow_wall_d_left;
int FOLLOW_WALL_KD_LEFT = 3;

void control()
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	28 97       	sbiw	r28, 0x08	; 8
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
{
	int temp1;
	int temp2;
	int temp3;

	digitalWrite(THRUST_MOTOR_PIN_1, LOW);
     54e:	80 91 7f 02 	lds	r24, 0x027F
     552:	90 91 80 02 	lds	r25, 0x0280
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
	digitalWrite(THRUST_MOTOR_PIN_2, HIGH);
     55c:	80 91 81 02 	lds	r24, 0x0281
     560:	90 91 82 02 	lds	r25, 0x0282
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
Serial.println(state);
     56a:	20 91 75 02 	lds	r18, 0x0275
     56e:	30 91 76 02 	lds	r19, 0x0276
     572:	84 e1       	ldi	r24, 0x14	; 20
     574:	91 e1       	ldi	r25, 0x11	; 17
     576:	b9 01       	movw	r22, r18
     578:	4a e0       	ldi	r20, 0x0A	; 10
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEii>
	switch( state )
     580:	40 91 75 02 	lds	r20, 0x0275
     584:	50 91 76 02 	lds	r21, 0x0276
     588:	58 87       	std	Y+8, r21	; 0x08
     58a:	4f 83       	std	Y+7, r20	; 0x07
     58c:	6f 81       	ldd	r22, Y+7	; 0x07
     58e:	78 85       	ldd	r23, Y+8	; 0x08
     590:	65 30       	cpi	r22, 0x05	; 5
     592:	71 05       	cpc	r23, r1
     594:	31 f0       	breq	.+12     	; 0x5a2 <_Z7controlv+0x68>
     596:	8f 81       	ldd	r24, Y+7	; 0x07
     598:	98 85       	ldd	r25, Y+8	; 0x08
     59a:	88 30       	cpi	r24, 0x08	; 8
     59c:	91 05       	cpc	r25, r1
     59e:	09 f1       	breq	.+66     	; 0x5e2 <_Z7controlv+0xa8>
     5a0:	5d c1       	rjmp	.+698    	; 0x85c <_Z7controlv+0x322>
		{
			case STOP:
				state = command;
     5a2:	80 91 91 02 	lds	r24, 0x0291
     5a6:	90 91 92 02 	lds	r25, 0x0292
     5aa:	90 93 76 02 	sts	0x0276, r25
     5ae:	80 93 75 02 	sts	0x0275, r24
				Serial.println("stop");
     5b2:	84 e1       	ldi	r24, 0x14	; 20
     5b4:	91 e1       	ldi	r25, 0x11	; 17
     5b6:	29 e2       	ldi	r18, 0x29	; 41
     5b8:	32 e0       	ldi	r19, 0x02	; 2
     5ba:	b9 01       	movw	r22, r18
     5bc:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>

				speed_left = 0;
     5c0:	10 92 a5 04 	sts	0x04A5, r1
     5c4:	10 92 a4 04 	sts	0x04A4, r1
				speed_right = 0;
     5c8:	10 92 a3 04 	sts	0x04A3, r1
     5cc:	10 92 a2 04 	sts	0x04A2, r1
				// Turn off the thrust motor
				analogWrite(THRUST_MOTOR_PIN_E, 0);
     5d0:	80 91 83 02 	lds	r24, 0x0283
     5d4:	90 91 84 02 	lds	r25, 0x0284
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	0e 94 23 25 	call	0x4a46	; 0x4a46 <analogWrite>
     5e0:	3d c1       	rjmp	.+634    	; 0x85c <_Z7controlv+0x322>
				//digitalWrite(44, LOW);
				break;

			case FOLLOW_WALL:
				Serial.println("follow");
     5e2:	84 e1       	ldi	r24, 0x14	; 20
     5e4:	91 e1       	ldi	r25, 0x11	; 17
     5e6:	2e e2       	ldi	r18, 0x2E	; 46
     5e8:	32 e0       	ldi	r19, 0x02	; 2
     5ea:	b9 01       	movw	r22, r18
     5ec:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>

				temp1 = sonarGetDistance( LEFTFRONT_SONAR );
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z16sonarGetDistancei>
     5f8:	9e 83       	std	Y+6, r25	; 0x06
     5fa:	8d 83       	std	Y+5, r24	; 0x05
				temp2 = sonarGetDistance( LEFTBACK_SONAR );
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z16sonarGetDistancei>
     604:	9c 83       	std	Y+4, r25	; 0x04
     606:	8b 83       	std	Y+3, r24	; 0x03
				temp3 = sonarGetDistance( FRONT_SONAR );
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z16sonarGetDistancei>
     610:	9a 83       	std	Y+2, r25	; 0x02
     612:	89 83       	std	Y+1, r24	; 0x01
				follow_wall_error_right = temp2 - FOLLOW_WALL_SET_POINT_BACK;
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	45 97       	sbiw	r24, 0x15	; 21
     61a:	90 93 a9 04 	sts	0x04A9, r25
     61e:	80 93 a8 04 	sts	0x04A8, r24



				//				follow_wall_error_right = sonarGetDistance( LEFTBACK_SONAR ) - FOLLOW_WALL_SET_POINT_RIGHT;
				follow_wall_p_right = follow_wall_error_right;
     622:	80 91 a8 04 	lds	r24, 0x04A8
     626:	90 91 a9 04 	lds	r25, 0x04A9
     62a:	90 93 ab 04 	sts	0x04AB, r25
     62e:	80 93 aa 04 	sts	0x04AA, r24
				follow_wall_d_right = follow_wall_error_right - follow_wall_prev_error_right;
     632:	20 91 a8 04 	lds	r18, 0x04A8
     636:	30 91 a9 04 	lds	r19, 0x04A9
     63a:	80 91 a6 04 	lds	r24, 0x04A6
     63e:	90 91 a7 04 	lds	r25, 0x04A7
     642:	a9 01       	movw	r20, r18
     644:	48 1b       	sub	r20, r24
     646:	59 0b       	sbc	r21, r25
     648:	ca 01       	movw	r24, r20
     64a:	90 93 ad 04 	sts	0x04AD, r25
     64e:	80 93 ac 04 	sts	0x04AC, r24
				follow_wall_prev_error_right = follow_wall_error_right;
     652:	80 91 a8 04 	lds	r24, 0x04A8
     656:	90 91 a9 04 	lds	r25, 0x04A9
     65a:	90 93 a7 04 	sts	0x04A7, r25
     65e:	80 93 a6 04 	sts	0x04A6, r24

				//this scaling factor of 1/3 should keep the value between 100 and -100;
//				speed_right = ( FOLLOW_WALL_KP_RIGHT*follow_wall_p_right
//						+ FOLLOW_WALL_KD_RIGHT*follow_wall_d_right
//						+ FOLLOW_WALL_KI_RIGHT*follow_wall_i_right )/3;
				speed_right = ( FOLLOW_WALL_KP_RIGHT * follow_wall_p_right + FOLLOW_WALL_KD_RIGHT * follow_wall_d_right );
     662:	20 91 77 02 	lds	r18, 0x0277
     666:	30 91 78 02 	lds	r19, 0x0278
     66a:	80 91 aa 04 	lds	r24, 0x04AA
     66e:	90 91 ab 04 	lds	r25, 0x04AB
     672:	28 9f       	mul	r18, r24
     674:	a0 01       	movw	r20, r0
     676:	29 9f       	mul	r18, r25
     678:	50 0d       	add	r21, r0
     67a:	38 9f       	mul	r19, r24
     67c:	50 0d       	add	r21, r0
     67e:	11 24       	eor	r1, r1
     680:	20 91 79 02 	lds	r18, 0x0279
     684:	30 91 7a 02 	lds	r19, 0x027A
     688:	80 91 ac 04 	lds	r24, 0x04AC
     68c:	90 91 ad 04 	lds	r25, 0x04AD
     690:	bc 01       	movw	r22, r24
     692:	26 9f       	mul	r18, r22
     694:	c0 01       	movw	r24, r0
     696:	27 9f       	mul	r18, r23
     698:	90 0d       	add	r25, r0
     69a:	36 9f       	mul	r19, r22
     69c:	90 0d       	add	r25, r0
     69e:	11 24       	eor	r1, r1
     6a0:	84 0f       	add	r24, r20
     6a2:	95 1f       	adc	r25, r21
     6a4:	90 93 a3 04 	sts	0x04A3, r25
     6a8:	80 93 a2 04 	sts	0x04A2, r24
				if (speed_right>255) speed_right=255;
     6ac:	80 91 a2 04 	lds	r24, 0x04A2
     6b0:	90 91 a3 04 	lds	r25, 0x04A3
     6b4:	8f 3f       	cpi	r24, 0xFF	; 255
     6b6:	91 05       	cpc	r25, r1
     6b8:	39 f0       	breq	.+14     	; 0x6c8 <_Z7controlv+0x18e>
     6ba:	34 f0       	brlt	.+12     	; 0x6c8 <_Z7controlv+0x18e>
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	90 93 a3 04 	sts	0x04A3, r25
     6c4:	80 93 a2 04 	sts	0x04A2, r24
				if (speed_right<-255) speed_right=-255;
     6c8:	80 91 a2 04 	lds	r24, 0x04A2
     6cc:	90 91 a3 04 	lds	r25, 0x04A3
     6d0:	7f ef       	ldi	r23, 0xFF	; 255
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	97 07       	cpc	r25, r23
     6d6:	34 f4       	brge	.+12     	; 0x6e4 <_Z7controlv+0x1aa>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	9f ef       	ldi	r25, 0xFF	; 255
     6dc:	90 93 a3 04 	sts	0x04A3, r25
     6e0:	80 93 a2 04 	sts	0x04A2, r24
//				Serial.print( "Speed Back: " );
//				Serial.println( speed_right );
//				Serial.print("Left Back Sonar Value: ");
//				Serial.println(temp2);

				follow_wall_error_left = temp1 - FOLLOW_WALL_SET_POINT_FRONT;
     6e4:	8d 81       	ldd	r24, Y+5	; 0x05
     6e6:	9e 81       	ldd	r25, Y+6	; 0x06
     6e8:	44 97       	sbiw	r24, 0x14	; 20
     6ea:	90 93 b1 04 	sts	0x04B1, r25
     6ee:	80 93 b0 04 	sts	0x04B0, r24

//				follow_wall_error_left = sonarGetDistance( LEFTFRONT_SONAR ) - FOLLOW_WALL_SET_POINT_LEFT;
				follow_wall_p_left = follow_wall_error_left;
     6f2:	80 91 b0 04 	lds	r24, 0x04B0
     6f6:	90 91 b1 04 	lds	r25, 0x04B1
     6fa:	90 93 b3 04 	sts	0x04B3, r25
     6fe:	80 93 b2 04 	sts	0x04B2, r24
				follow_wall_d_left = follow_wall_error_left - follow_wall_prev_error_left;
     702:	20 91 b0 04 	lds	r18, 0x04B0
     706:	30 91 b1 04 	lds	r19, 0x04B1
     70a:	80 91 ae 04 	lds	r24, 0x04AE
     70e:	90 91 af 04 	lds	r25, 0x04AF
     712:	a9 01       	movw	r20, r18
     714:	48 1b       	sub	r20, r24
     716:	59 0b       	sbc	r21, r25
     718:	ca 01       	movw	r24, r20
     71a:	90 93 b5 04 	sts	0x04B5, r25
     71e:	80 93 b4 04 	sts	0x04B4, r24
				follow_wall_prev_error_left = follow_wall_error_left;
     722:	80 91 b0 04 	lds	r24, 0x04B0
     726:	90 91 b1 04 	lds	r25, 0x04B1
     72a:	90 93 af 04 	sts	0x04AF, r25
     72e:	80 93 ae 04 	sts	0x04AE, r24

				//this scaling factor of 1/3 should keep the value between 100 and -100;
//				speed_left = ( FOLLOW_WALL_KP_LEFT*follow_wall_p_left
//						+ FOLLOW_WALL_KD_LEFT*follow_wall_d_left
//						+ FOLLOW_WALL_KI_LEFT*follow_wall_i_left )/3 - 25;
				speed_left = ( FOLLOW_WALL_KP_LEFT * follow_wall_p_left + FOLLOW_WALL_KD_LEFT * follow_wall_d_left );
     732:	20 91 7b 02 	lds	r18, 0x027B
     736:	30 91 7c 02 	lds	r19, 0x027C
     73a:	80 91 b2 04 	lds	r24, 0x04B2
     73e:	90 91 b3 04 	lds	r25, 0x04B3
     742:	28 9f       	mul	r18, r24
     744:	a0 01       	movw	r20, r0
     746:	29 9f       	mul	r18, r25
     748:	50 0d       	add	r21, r0
     74a:	38 9f       	mul	r19, r24
     74c:	50 0d       	add	r21, r0
     74e:	11 24       	eor	r1, r1
     750:	20 91 7d 02 	lds	r18, 0x027D
     754:	30 91 7e 02 	lds	r19, 0x027E
     758:	80 91 b4 04 	lds	r24, 0x04B4
     75c:	90 91 b5 04 	lds	r25, 0x04B5
     760:	bc 01       	movw	r22, r24
     762:	26 9f       	mul	r18, r22
     764:	c0 01       	movw	r24, r0
     766:	27 9f       	mul	r18, r23
     768:	90 0d       	add	r25, r0
     76a:	36 9f       	mul	r19, r22
     76c:	90 0d       	add	r25, r0
     76e:	11 24       	eor	r1, r1
     770:	84 0f       	add	r24, r20
     772:	95 1f       	adc	r25, r21
     774:	90 93 a5 04 	sts	0x04A5, r25
     778:	80 93 a4 04 	sts	0x04A4, r24
				if (speed_left>255) speed_left=255;
     77c:	80 91 a4 04 	lds	r24, 0x04A4
     780:	90 91 a5 04 	lds	r25, 0x04A5
     784:	8f 3f       	cpi	r24, 0xFF	; 255
     786:	91 05       	cpc	r25, r1
     788:	39 f0       	breq	.+14     	; 0x798 <_Z7controlv+0x25e>
     78a:	34 f0       	brlt	.+12     	; 0x798 <_Z7controlv+0x25e>
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	90 93 a5 04 	sts	0x04A5, r25
     794:	80 93 a4 04 	sts	0x04A4, r24
				if (speed_left<-255) speed_left=-255;
     798:	80 91 a4 04 	lds	r24, 0x04A4
     79c:	90 91 a5 04 	lds	r25, 0x04A5
     7a0:	7f ef       	ldi	r23, 0xFF	; 255
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	97 07       	cpc	r25, r23
     7a6:	34 f4       	brge	.+12     	; 0x7b4 <_Z7controlv+0x27a>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	9f ef       	ldi	r25, 0xFF	; 255
     7ac:	90 93 a5 04 	sts	0x04A5, r25
     7b0:	80 93 a4 04 	sts	0x04A4, r24
//				Serial.println( speed_left );
//				Serial.print("Left Front Sonar Value: ");
//				Serial.println(temp1);

				// Turn on the thrust motor
				analogWrite(THRUST_MOTOR_PIN_E, 55);
     7b4:	80 91 83 02 	lds	r24, 0x0283
     7b8:	90 91 84 02 	lds	r25, 0x0284
     7bc:	67 e3       	ldi	r22, 0x37	; 55
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	0e 94 23 25 	call	0x4a46	; 0x4a46 <analogWrite>
				//digitalWrite(44, HIGH);

				Serial.print("Sonar Left Front: ");
     7c4:	84 e1       	ldi	r24, 0x14	; 20
     7c6:	91 e1       	ldi	r25, 0x11	; 17
     7c8:	25 e3       	ldi	r18, 0x35	; 53
     7ca:	32 e0       	ldi	r19, 0x02	; 2
     7cc:	b9 01       	movw	r22, r18
     7ce:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN5Print5printEPKc>
				Serial.println(temp1);
     7d2:	84 e1       	ldi	r24, 0x14	; 20
     7d4:	91 e1       	ldi	r25, 0x11	; 17
     7d6:	2d 81       	ldd	r18, Y+5	; 0x05
     7d8:	3e 81       	ldd	r19, Y+6	; 0x06
     7da:	b9 01       	movw	r22, r18
     7dc:	4a e0       	ldi	r20, 0x0A	; 10
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEii>
				Serial.print("Sonar Left Back: ");
     7e4:	84 e1       	ldi	r24, 0x14	; 20
     7e6:	91 e1       	ldi	r25, 0x11	; 17
     7e8:	28 e4       	ldi	r18, 0x48	; 72
     7ea:	32 e0       	ldi	r19, 0x02	; 2
     7ec:	b9 01       	movw	r22, r18
     7ee:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN5Print5printEPKc>
				Serial.println(temp2);
     7f2:	84 e1       	ldi	r24, 0x14	; 20
     7f4:	91 e1       	ldi	r25, 0x11	; 17
     7f6:	2b 81       	ldd	r18, Y+3	; 0x03
     7f8:	3c 81       	ldd	r19, Y+4	; 0x04
     7fa:	b9 01       	movw	r22, r18
     7fc:	4a e0       	ldi	r20, 0x0A	; 10
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEii>
				Serial.print("Speed left: ");
     804:	84 e1       	ldi	r24, 0x14	; 20
     806:	91 e1       	ldi	r25, 0x11	; 17
     808:	2a e5       	ldi	r18, 0x5A	; 90
     80a:	32 e0       	ldi	r19, 0x02	; 2
     80c:	b9 01       	movw	r22, r18
     80e:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN5Print5printEPKc>
				Serial.println(speed_left);
     812:	20 91 a4 04 	lds	r18, 0x04A4
     816:	30 91 a5 04 	lds	r19, 0x04A5
     81a:	84 e1       	ldi	r24, 0x14	; 20
     81c:	91 e1       	ldi	r25, 0x11	; 17
     81e:	b9 01       	movw	r22, r18
     820:	4a e0       	ldi	r20, 0x0A	; 10
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEii>
				Serial.print("Speed right: ");
     828:	84 e1       	ldi	r24, 0x14	; 20
     82a:	91 e1       	ldi	r25, 0x11	; 17
     82c:	27 e6       	ldi	r18, 0x67	; 103
     82e:	32 e0       	ldi	r19, 0x02	; 2
     830:	b9 01       	movw	r22, r18
     832:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN5Print5printEPKc>
				Serial.println(speed_right);
     836:	20 91 a2 04 	lds	r18, 0x04A2
     83a:	30 91 a3 04 	lds	r19, 0x04A3
     83e:	84 e1       	ldi	r24, 0x14	; 20
     840:	91 e1       	ldi	r25, 0x11	; 17
     842:	b9 01       	movw	r22, r18
     844:	4a e0       	ldi	r20, 0x0A	; 10
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	0e 94 e7 20 	call	0x41ce	; 0x41ce <_ZN5Print7printlnEii>

				state = command;
     84c:	80 91 91 02 	lds	r24, 0x0291
     850:	90 91 92 02 	lds	r25, 0x0292
     854:	90 93 76 02 	sts	0x0276, r25
     858:	80 93 75 02 	sts	0x0275, r24
//				}
//				break;
			default:
				break;
		}
  }
     85c:	28 96       	adiw	r28, 0x08	; 8
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	cf 91       	pop	r28
     86a:	df 91       	pop	r29
     86c:	08 95       	ret

0000086e <_Z6r_mainv>:

		Task_Next();
	}
}

int r_main(void) {
     86e:	df 93       	push	r29
     870:	cf 93       	push	r28
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
	init();
     876:	0e 94 96 24 	call	0x492c	; 0x492c <init>

	pinMode(ONBOARD_LED, OUTPUT);
     87a:	8d e0       	ldi	r24, 0x0D	; 13
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	pinMode(4, OUTPUT);
     882:	84 e0       	ldi	r24, 0x04	; 4
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	pinMode(12, OUTPUT);
     88a:	8c e0       	ldi	r24, 0x0C	; 12
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	pinMode(13, OUTPUT);
     892:	8d e0       	ldi	r24, 0x0D	; 13
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	Serial.begin(57600);
     89a:	84 e1       	ldi	r24, 0x14	; 20
     89c:	91 e1       	ldi	r25, 0x11	; 17
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	51 ee       	ldi	r21, 0xE1	; 225
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <_ZN14HardwareSerial5beginEl>
	sonarInit();
     8aa:	0e 94 94 07 	call	0xf28	; 0xf28 <_Z9sonarInitv>
	//digitalWrite(9, HIGH);
	//_delay_ms(50);
//analogWrite(9, 0);
//digitalWrite(9, LOW);
//}
	radioInitSetup();
     8ae:	0e 94 b9 05 	call	0xb72	; 0xb72 <_Z14radioInitSetupv>

	Task_Create(task1, ONBOARD_LED_HIGH, PERIODIC, ONBOARD_LED_HIGH);
     8b2:	8a ee       	ldi	r24, 0xEA	; 234
     8b4:	94 e0       	ldi	r25, 0x04	; 4
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	42 e0       	ldi	r20, 0x02	; 2
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	21 e0       	ldi	r18, 0x01	; 1
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	0e 94 ac 13 	call	0x2758	; 0x2758 <Task_Create>
	Task_Create(task2, ONBOARD_LED_LOW, PERIODIC, ONBOARD_LED_LOW);
     8c6:	8f ed       	ldi	r24, 0xDF	; 223
     8c8:	94 e0       	ldi	r25, 0x04	; 4
     8ca:	62 e0       	ldi	r22, 0x02	; 2
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	42 e0       	ldi	r20, 0x02	; 2
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	22 e0       	ldi	r18, 0x02	; 2
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	0e 94 ac 13 	call	0x2758	; 0x2758 <Task_Create>
	Task_Create(sonarTask, SONAR_TASK, PERIODIC, SONAR_TASK);
     8da:	86 ed       	ldi	r24, 0xD6	; 214
     8dc:	94 e0       	ldi	r25, 0x04	; 4
     8de:	65 e0       	ldi	r22, 0x05	; 5
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	42 e0       	ldi	r20, 0x02	; 2
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	25 e0       	ldi	r18, 0x05	; 5
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	0e 94 ac 13 	call	0x2758	; 0x2758 <Task_Create>
	Task_Create(actuateTask, ACTUATE_TASK, PERIODIC, ACTUATE_TASK);
     8ee:	83 eb       	ldi	r24, 0xB3	; 179
     8f0:	94 e0       	ldi	r25, 0x04	; 4
     8f2:	63 e0       	ldi	r22, 0x03	; 3
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	42 e0       	ldi	r20, 0x02	; 2
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	23 e0       	ldi	r18, 0x03	; 3
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	0e 94 ac 13 	call	0x2758	; 0x2758 <Task_Create>
	Task_Create(controlTask, CONTROL_TASK, PERIODIC, CONTROL_TASK);
     902:	80 e9       	ldi	r24, 0x90	; 144
     904:	94 e0       	ldi	r25, 0x04	; 4
     906:	64 e0       	ldi	r22, 0x04	; 4
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	42 e0       	ldi	r20, 0x02	; 2
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	24 e0       	ldi	r18, 0x04	; 4
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	0e 94 ac 13 	call	0x2758	; 0x2758 <Task_Create>

	return 0;
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
}
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	08 95       	ret

00000920 <_Z11controlTaskv>:

		Task_Next();
	}
}

void controlTask(void) {
     920:	df 93       	push	r29
     922:	cf 93       	push	r28
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
	while (true) {
		if (ctrlDivider == 0)
     928:	80 91 b6 04 	lds	r24, 0x04B6
     92c:	90 91 b7 04 	lds	r25, 0x04B7
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	11 f4       	brne	.+4      	; 0x938 <_Z11controlTaskv+0x18>
		{
			control();
     934:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z7controlv>
		}

		ctrlDivider++;
     938:	80 91 b6 04 	lds	r24, 0x04B6
     93c:	90 91 b7 04 	lds	r25, 0x04B7
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	90 93 b7 04 	sts	0x04B7, r25
     946:	80 93 b6 04 	sts	0x04B6, r24

		if (ctrlDivider >= 4)
     94a:	80 91 b6 04 	lds	r24, 0x04B6
     94e:	90 91 b7 04 	lds	r25, 0x04B7
     952:	84 30       	cpi	r24, 0x04	; 4
     954:	91 05       	cpc	r25, r1
     956:	24 f0       	brlt	.+8      	; 0x960 <_Z11controlTaskv+0x40>
		{
			ctrlDivider = 0;
     958:	10 92 b7 04 	sts	0x04B7, r1
     95c:	10 92 b6 04 	sts	0x04B6, r1
		}

		Task_Next();
     960:	0e 94 ef 13 	call	0x27de	; 0x27de <Task_Next>
     964:	e1 cf       	rjmp	.-62     	; 0x928 <_Z11controlTaskv+0x8>

00000966 <_Z11actuateTaskv>:

		Task_Next();
	}
}

void actuateTask(void) {
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
	while (true) {
		if (actuateDivider == 0)
     96e:	80 91 b8 04 	lds	r24, 0x04B8
     972:	90 91 b9 04 	lds	r25, 0x04B9
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	11 f4       	brne	.+4      	; 0x97e <_Z11actuateTaskv+0x18>
		{
			actuate();
     97a:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z7actuatev>
		}

		actuateDivider++;
     97e:	80 91 b8 04 	lds	r24, 0x04B8
     982:	90 91 b9 04 	lds	r25, 0x04B9
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	90 93 b9 04 	sts	0x04B9, r25
     98c:	80 93 b8 04 	sts	0x04B8, r24

		if (actuateDivider >= 4)
     990:	80 91 b8 04 	lds	r24, 0x04B8
     994:	90 91 b9 04 	lds	r25, 0x04B9
     998:	84 30       	cpi	r24, 0x04	; 4
     99a:	91 05       	cpc	r25, r1
     99c:	24 f0       	brlt	.+8      	; 0x9a6 <_Z11actuateTaskv+0x40>
		{
			actuateDivider = 0;
     99e:	10 92 b9 04 	sts	0x04B9, r1
     9a2:	10 92 b8 04 	sts	0x04B8, r1
		}

		Task_Next();
     9a6:	0e 94 ef 13 	call	0x27de	; 0x27de <Task_Next>
     9aa:	e1 cf       	rjmp	.-62     	; 0x96e <_Z11actuateTaskv+0x8>

000009ac <_Z9sonarTaskv>:

		Task_Next();
	}
}

void sonarTask(void) {
     9ac:	df 93       	push	r29
     9ae:	cf 93       	push	r28
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
	while (true) {
		sonarMeasureDistance();
     9b4:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_Z20sonarMeasureDistancev>

		Task_Next();
     9b8:	0e 94 ef 13 	call	0x27de	; 0x27de <Task_Next>
     9bc:	fb cf       	rjmp	.-10     	; 0x9b4 <_Z9sonarTaskv+0x8>

000009be <_Z5task2v>:

		Task_Next();
	}
}

void task2(void) {
     9be:	df 93       	push	r29
     9c0:	cf 93       	push	r28
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
	for (;;) {
		digitalWrite(ONBOARD_LED, LOW);
     9c6:	8d e0       	ldi	r24, 0x0D	; 13
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

		Task_Next();
     9ce:	0e 94 ef 13 	call	0x27de	; 0x27de <Task_Next>
     9d2:	f9 cf       	rjmp	.-14     	; 0x9c6 <_Z5task2v+0x8>

000009d4 <_Z5task1v>:
int command = STOP;

static int ctrlDivider = 0;
static int actuateDivider = 0;

void task1(void) {
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
	for (;;) {
		digitalWrite(ONBOARD_LED, HIGH);
     9dc:	8d e0       	ldi	r24, 0x0D	; 13
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

		Task_Next();
     9e4:	0e 94 ef 13 	call	0x27de	; 0x27de <Task_Next>
     9e8:	f9 cf       	rjmp	.-14     	; 0x9dc <_Z5task1v+0x8>

000009ea <_Z15radio_rxhandlerh>:
/*
 * To be completed.
 * This is the side where we decompose the content of the packet
 * and find out what command was sent from the Base Station
 */
void radio_rxhandler(uint8_t pipenumber)
     9ea:	df 93       	push	r29
     9ec:	cf 93       	push	r28
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <_Z15radio_rxhandlerh+0x6>
     9f0:	0f 92       	push	r0
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	89 83       	std	Y+1, r24	; 0x01
{
//	Serial.println("radio_rxhandler");

	Radio_Receive(&packet);
     9f8:	8a eb       	ldi	r24, 0xBA	; 186
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	0e 94 80 0b 	call	0x1700	; 0x1700 <_Z13Radio_ReceiveP3_rp>

	if (packet.type == COMMAND){
     a00:	80 91 ba 04 	lds	r24, 0x04BA
     a04:	88 23       	and	r24, r24
     a06:	09 f0       	breq	.+2      	; 0xa0a <_Z15radio_rxhandlerh+0x20>
     a08:	9d c0       	rjmp	.+314    	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
		Serial.println("Received Command");
     a0a:	84 e1       	ldi	r24, 0x14	; 20
     a0c:	91 e1       	ldi	r25, 0x11	; 17
     a0e:	23 e9       	ldi	r18, 0x93	; 147
     a10:	32 e0       	ldi	r19, 0x02	; 2
     a12:	b9 01       	movw	r22, r18
     a14:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>

		switch (packet.payload.hovercraftData.command){
     a18:	80 91 bd 04 	lds	r24, 0x04BD
     a1c:	28 2f       	mov	r18, r24
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	3b 83       	std	Y+3, r19	; 0x03
     a22:	2a 83       	std	Y+2, r18	; 0x02
     a24:	8a 81       	ldd	r24, Y+2	; 0x02
     a26:	9b 81       	ldd	r25, Y+3	; 0x03
     a28:	84 30       	cpi	r24, 0x04	; 4
     a2a:	91 05       	cpc	r25, r1
     a2c:	09 f4       	brne	.+2      	; 0xa30 <_Z15radio_rxhandlerh+0x46>
     a2e:	57 c0       	rjmp	.+174    	; 0xade <_Z15radio_rxhandlerh+0xf4>
     a30:	2a 81       	ldd	r18, Y+2	; 0x02
     a32:	3b 81       	ldd	r19, Y+3	; 0x03
     a34:	25 30       	cpi	r18, 0x05	; 5
     a36:	31 05       	cpc	r19, r1
     a38:	d4 f4       	brge	.+52     	; 0xa6e <_Z15radio_rxhandlerh+0x84>
     a3a:	8a 81       	ldd	r24, Y+2	; 0x02
     a3c:	9b 81       	ldd	r25, Y+3	; 0x03
     a3e:	81 30       	cpi	r24, 0x01	; 1
     a40:	91 05       	cpc	r25, r1
     a42:	a9 f1       	breq	.+106    	; 0xaae <_Z15radio_rxhandlerh+0xc4>
     a44:	2a 81       	ldd	r18, Y+2	; 0x02
     a46:	3b 81       	ldd	r19, Y+3	; 0x03
     a48:	22 30       	cpi	r18, 0x02	; 2
     a4a:	31 05       	cpc	r19, r1
     a4c:	2c f4       	brge	.+10     	; 0xa58 <_Z15radio_rxhandlerh+0x6e>
     a4e:	8a 81       	ldd	r24, Y+2	; 0x02
     a50:	9b 81       	ldd	r25, Y+3	; 0x03
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	21 f1       	breq	.+72     	; 0xa9e <_Z15radio_rxhandlerh+0xb4>
     a56:	76 c0       	rjmp	.+236    	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
     a58:	2a 81       	ldd	r18, Y+2	; 0x02
     a5a:	3b 81       	ldd	r19, Y+3	; 0x03
     a5c:	22 30       	cpi	r18, 0x02	; 2
     a5e:	31 05       	cpc	r19, r1
     a60:	71 f1       	breq	.+92     	; 0xabe <_Z15radio_rxhandlerh+0xd4>
     a62:	8a 81       	ldd	r24, Y+2	; 0x02
     a64:	9b 81       	ldd	r25, Y+3	; 0x03
     a66:	83 30       	cpi	r24, 0x03	; 3
     a68:	91 05       	cpc	r25, r1
     a6a:	89 f1       	breq	.+98     	; 0xace <_Z15radio_rxhandlerh+0xe4>
     a6c:	6b c0       	rjmp	.+214    	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
     a6e:	2a 81       	ldd	r18, Y+2	; 0x02
     a70:	3b 81       	ldd	r19, Y+3	; 0x03
     a72:	26 30       	cpi	r18, 0x06	; 6
     a74:	31 05       	cpc	r19, r1
     a76:	09 f4       	brne	.+2      	; 0xa7a <_Z15radio_rxhandlerh+0x90>
     a78:	48 c0       	rjmp	.+144    	; 0xb0a <_Z15radio_rxhandlerh+0x120>
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	9b 81       	ldd	r25, Y+3	; 0x03
     a7e:	86 30       	cpi	r24, 0x06	; 6
     a80:	91 05       	cpc	r25, r1
     a82:	ac f1       	brlt	.+106    	; 0xaee <_Z15radio_rxhandlerh+0x104>
     a84:	2a 81       	ldd	r18, Y+2	; 0x02
     a86:	3b 81       	ldd	r19, Y+3	; 0x03
     a88:	27 30       	cpi	r18, 0x07	; 7
     a8a:	31 05       	cpc	r19, r1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <_Z15radio_rxhandlerh+0xa6>
     a8e:	4b c0       	rjmp	.+150    	; 0xb26 <_Z15radio_rxhandlerh+0x13c>
     a90:	8a 81       	ldd	r24, Y+2	; 0x02
     a92:	9b 81       	ldd	r25, Y+3	; 0x03
     a94:	88 30       	cpi	r24, 0x08	; 8
     a96:	91 05       	cpc	r25, r1
     a98:	09 f4       	brne	.+2      	; 0xa9c <_Z15radio_rxhandlerh+0xb2>
     a9a:	4d c0       	rjmp	.+154    	; 0xb36 <_Z15radio_rxhandlerh+0x14c>
     a9c:	53 c0       	rjmp	.+166    	; 0xb44 <_Z15radio_rxhandlerh+0x15a>

		case NONE:
			Serial.println("Command is NONE");
     a9e:	84 e1       	ldi	r24, 0x14	; 20
     aa0:	91 e1       	ldi	r25, 0x11	; 17
     aa2:	24 ea       	ldi	r18, 0xA4	; 164
     aa4:	32 e0       	ldi	r19, 0x02	; 2
     aa6:	b9 01       	movw	r22, r18
     aa8:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>
     aac:	4b c0       	rjmp	.+150    	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
			break;

		case TURN_LEFT:
			Serial.println("Command is TURN_LEFT");
     aae:	84 e1       	ldi	r24, 0x14	; 20
     ab0:	91 e1       	ldi	r25, 0x11	; 17
     ab2:	24 eb       	ldi	r18, 0xB4	; 180
     ab4:	32 e0       	ldi	r19, 0x02	; 2
     ab6:	b9 01       	movw	r22, r18
     ab8:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>
     abc:	43 c0       	rjmp	.+134    	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
			break;

		case TURN_RIGHT:
			Serial.println("Command is TURN_RIGHT");
     abe:	84 e1       	ldi	r24, 0x14	; 20
     ac0:	91 e1       	ldi	r25, 0x11	; 17
     ac2:	29 ec       	ldi	r18, 0xC9	; 201
     ac4:	32 e0       	ldi	r19, 0x02	; 2
     ac6:	b9 01       	movw	r22, r18
     ac8:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>
     acc:	3b c0       	rjmp	.+118    	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
			break;

		case NEXT_LEFT:
			Serial.println("Command is NEXT_LEFT");
     ace:	84 e1       	ldi	r24, 0x14	; 20
     ad0:	91 e1       	ldi	r25, 0x11	; 17
     ad2:	2f ed       	ldi	r18, 0xDF	; 223
     ad4:	32 e0       	ldi	r19, 0x02	; 2
     ad6:	b9 01       	movw	r22, r18
     ad8:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>
     adc:	33 c0       	rjmp	.+102    	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
			break;

		case NEXT_RIGHT:
			Serial.println("Command is NEXT_RIGHT");
     ade:	84 e1       	ldi	r24, 0x14	; 20
     ae0:	91 e1       	ldi	r25, 0x11	; 17
     ae2:	24 ef       	ldi	r18, 0xF4	; 244
     ae4:	32 e0       	ldi	r19, 0x02	; 2
     ae6:	b9 01       	movw	r22, r18
     ae8:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>
     aec:	2b c0       	rjmp	.+86     	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
			break;

		case STOP:
			Serial.println("Command is STOP");
     aee:	84 e1       	ldi	r24, 0x14	; 20
     af0:	91 e1       	ldi	r25, 0x11	; 17
     af2:	2a e0       	ldi	r18, 0x0A	; 10
     af4:	33 e0       	ldi	r19, 0x03	; 3
     af6:	b9 01       	movw	r22, r18
     af8:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>
			command = STOP;
     afc:	85 e0       	ldi	r24, 0x05	; 5
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	90 93 92 02 	sts	0x0292, r25
     b04:	80 93 91 02 	sts	0x0291, r24
     b08:	1d c0       	rjmp	.+58     	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
			break;

		case FORWARD:
			Serial.println("Command is FORWARD");
     b0a:	84 e1       	ldi	r24, 0x14	; 20
     b0c:	91 e1       	ldi	r25, 0x11	; 17
     b0e:	2a e1       	ldi	r18, 0x1A	; 26
     b10:	33 e0       	ldi	r19, 0x03	; 3
     b12:	b9 01       	movw	r22, r18
     b14:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>
			command = FOLLOW_WALL;
     b18:	88 e0       	ldi	r24, 0x08	; 8
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	90 93 92 02 	sts	0x0292, r25
     b20:	80 93 91 02 	sts	0x0291, r24
     b24:	0f c0       	rjmp	.+30     	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
			break;

		case REVERSE:
			Serial.println("Command is REVERSE");
     b26:	84 e1       	ldi	r24, 0x14	; 20
     b28:	91 e1       	ldi	r25, 0x11	; 17
     b2a:	2d e2       	ldi	r18, 0x2D	; 45
     b2c:	33 e0       	ldi	r19, 0x03	; 3
     b2e:	b9 01       	movw	r22, r18
     b30:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <_Z15radio_rxhandlerh+0x15a>
			break;

		case FOLLOW_WALL:
			Serial.println("Command is FOLLOW_WALL");
     b36:	84 e1       	ldi	r24, 0x14	; 20
     b38:	91 e1       	ldi	r25, 0x11	; 17
     b3a:	20 e4       	ldi	r18, 0x40	; 64
     b3c:	33 e0       	ldi	r19, 0x03	; 3
     b3e:	b9 01       	movw	r22, r18
     b40:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print7printlnEPKc>

		default:
			break;
		}
	}
}
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	cf 91       	pop	r28
     b4c:	df 91       	pop	r29
     b4e:	08 95       	ret

00000b50 <_Z9radioSendv>:
	 */
	Radio_Set_Tx_Addr(BaseStationAddr);

}

void radioSend() {
     b50:	df 93       	push	r29
     b52:	cf 93       	push	r28
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Remote Station should only send message of type SENSORDATA to the
	 * Base Station.
	 */
	packet.type = SENSORDATA;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 ba 04 	sts	0x04BA, r24

	packet.payload.hovercraftData.command = NONE;
     b5e:	10 92 bd 04 	sts	0x04BD, r1

//	memcpy(packet.payload.message.address, RemoteStationAddr, RADIO_ADDRESS_LENGTH);
//	snprintf((char*)packet.payload.message.messagecontent, 20, msg);

	// Send the packet to the address specified with Radio_Set_Tx_Addr above.
	Radio_Transmit(&packet, RADIO_WAIT_FOR_TX);
     b62:	8a eb       	ldi	r24, 0xBA	; 186
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_Z14Radio_TransmitP3_rp14_radio_tx_wait>
}
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <_Z14radioInitSetupv>:

static radiopacket_t packet;

extern int command;

void radioInitSetup() {
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Initialize the SPI connection, configure the I/O pins,
	 * and set the register defaults
	 */
	Radio_Init();
     b7a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_Z10Radio_Initv>
	 * Configure pipe 0 as a receiver.  Pipe 0 has to be enabled
	 * for the radio's link layer protocol to work.  This line
	 * shouldn't be necessary since pipe 0 is enabled by default,
	 * but it's nice to be explicit.
	 */
	Radio_Configure_Rx(RADIO_PIPE_0, RemoteStationAddr, ENABLE);
     b7e:	27 e5       	ldi	r18, 0x57	; 87
     b80:	33 e0       	ldi	r19, 0x03	; 3
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	b9 01       	movw	r22, r18
     b86:	41 e0       	ldi	r20, 0x01	; 1
     b88:	0e 94 b7 0c 	call	0x196e	; 0x196e <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>

	/*
	 * Configure the radio's data rate (must match the other radio)
	 * and the broadcast power
	 */
	Radio_Configure(RADIO_2MBPS, RADIO_HIGHEST_POWER);
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	63 e0       	ldi	r22, 0x03	; 3
     b90:	0e 94 83 0c 	call	0x1906	; 0x1906 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>

	/*
	 * set the address to send to, dangling prepositions be damned.
	 */
	Radio_Set_Tx_Addr(BaseStationAddr);
     b94:	8c e5       	ldi	r24, 0x5C	; 92
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_Z17Radio_Set_Tx_AddrPh>

}
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <_ZL12averageValuehhPj>:
	}

	return result;
}

static uint16_t averageValue(uint8_t offset, uint8_t range, uint16_t* sonarBuffer) {
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	27 97       	sbiw	r28, 0x07	; 7
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	8c 83       	std	Y+4, r24	; 0x04
     bb8:	6d 83       	std	Y+5, r22	; 0x05
     bba:	5f 83       	std	Y+7, r21	; 0x07
     bbc:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t counter = 0;
     bbe:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t sum = 0;
     bc0:	1a 82       	std	Y+2, r1	; 0x02
     bc2:	19 82       	std	Y+1, r1	; 0x01

	for (counter = 0; counter < range; ++counter) {
     bc4:	1b 82       	std	Y+3, r1	; 0x03
     bc6:	1f c0       	rjmp	.+62     	; 0xc06 <_ZL12averageValuehhPj+0x64>
		sum += *(sonarBuffer + offset);
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9c 01       	movw	r18, r24
     bd0:	22 0f       	add	r18, r18
     bd2:	33 1f       	adc	r19, r19
     bd4:	8e 81       	ldd	r24, Y+6	; 0x06
     bd6:	9f 81       	ldd	r25, Y+7	; 0x07
     bd8:	fc 01       	movw	r30, r24
     bda:	e2 0f       	add	r30, r18
     bdc:	f3 1f       	adc	r31, r19
     bde:	20 81       	ld	r18, Z
     be0:	31 81       	ldd	r19, Z+1	; 0x01
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
		if (offset == 0) {
     bee:	8c 81       	ldd	r24, Y+4	; 0x04
     bf0:	88 23       	and	r24, r24
     bf2:	19 f4       	brne	.+6      	; 0xbfa <_ZL12averageValuehhPj+0x58>
			offset = SONAR_BUFFER_SIZE - 1;
     bf4:	83 e1       	ldi	r24, 0x13	; 19
     bf6:	8c 83       	std	Y+4, r24	; 0x04
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <_ZL12averageValuehhPj+0x5e>
		}
		else {
			--offset;
     bfa:	8c 81       	ldd	r24, Y+4	; 0x04
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	8c 83       	std	Y+4, r24	; 0x04

static uint16_t averageValue(uint8_t offset, uint8_t range, uint16_t* sonarBuffer) {
	uint8_t counter = 0;
	uint16_t sum = 0;

	for (counter = 0; counter < range; ++counter) {
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	8b 83       	std	Y+3, r24	; 0x03
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	98 17       	cp	r25, r24
     c0c:	e8 f2       	brcs	.-70     	; 0xbc8 <_ZL12averageValuehhPj+0x26>
		}
		else {
			--offset;
		}
	}
	return sum / range;
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	b9 01       	movw	r22, r18
     c1a:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <__udivmodhi4>
     c1e:	cb 01       	movw	r24, r22
}
     c20:	27 96       	adiw	r28, 0x07	; 7
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <_Z16sonarGetDistancei>:
/*
 * This function processes the sonarBuffer and returns
 * the distance. It also rejects incorrect values by
 * analyzing the trend in which the distance is changing.
 */
uint16_t sonarGetDistance(int sonarID) {
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	27 97       	sbiw	r28, 0x07	; 7
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	9d 83       	std	Y+5, r25	; 0x05
     c48:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t currentIndex = sonarBufferIndex;
     c4a:	80 91 de 04 	lds	r24, 0x04DE
     c4e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t result = 0;
     c50:	1a 82       	std	Y+2, r1	; 0x02
     c52:	19 82       	std	Y+1, r1	; 0x01

	switch (sonarID) {
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	9d 81       	ldd	r25, Y+5	; 0x05
     c58:	9f 83       	std	Y+7, r25	; 0x07
     c5a:	8e 83       	std	Y+6, r24	; 0x06
     c5c:	8e 81       	ldd	r24, Y+6	; 0x06
     c5e:	9f 81       	ldd	r25, Y+7	; 0x07
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	b1 f0       	breq	.+44     	; 0xc92 <_Z16sonarGetDistancei+0x60>
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	9f 81       	ldd	r25, Y+7	; 0x07
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	91 05       	cpc	r25, r1
     c6e:	f1 f0       	breq	.+60     	; 0xcac <_Z16sonarGetDistancei+0x7a>
     c70:	8e 81       	ldd	r24, Y+6	; 0x06
     c72:	9f 81       	ldd	r25, Y+7	; 0x07
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	19 f5       	brne	.+70     	; 0xcbe <_Z16sonarGetDistancei+0x8c>
	case LEFTFRONT_SONAR:
		result = leftFrontSonarBuffer[currentIndex];
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	fc 01       	movw	r30, r24
     c84:	e1 52       	subi	r30, 0x21	; 33
     c86:	fb 4f       	sbci	r31, 0xFB	; 251
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	16 c0       	rjmp	.+44     	; 0xcbe <_Z16sonarGetDistancei+0x8c>

		break;

	case LEFTBACK_SONAR:
		result = leftBackSonarBuffer[currentIndex];
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	88 2f       	mov	r24, r24
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	fc 01       	movw	r30, r24
     c9e:	e9 5f       	subi	r30, 0xF9	; 249
     ca0:	fa 4f       	sbci	r31, 0xFA	; 250
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <_Z16sonarGetDistancei+0x8c>

		break;

	case FRONT_SONAR:
		result = averageValue(currentIndex, 4, frontSonarBuffer);
     cac:	2f e2       	ldi	r18, 0x2F	; 47
     cae:	35 e0       	ldi	r19, 0x05	; 5
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	64 e0       	ldi	r22, 0x04	; 4
     cb4:	a9 01       	movw	r20, r18
     cb6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZL12averageValuehhPj>
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01

	default:
		break;
	}

	return result;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     cc2:	27 96       	adiw	r28, 0x07	; 7
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <__vector_41>:
	}

	Enable_Interrupt();
}

ISR(TIMER4_CAPT_vect)
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	00 90 5b 00 	lds	r0, 0x005B
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	0f 92       	push	r0
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
{
	Disable_Interrupt();
     d06:	f8 94       	cli
	/*
	 * Once the rising edge of PW is detected, it means
	 * RX has been staying HIGH long enough. Set it to
	 * LOW now to disable sonar.
	 */
	digitalWrite(LEFTBACK_SONAR_RX, LOW);
     d08:	83 e2       	ldi	r24, 0x23	; 35
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
	/*
	 * Reset Timer 4 when the rising edge of PW is
	 * detected, then change the Input Capture configuration
	 * to detect the falling edge and clear the interrupt flag.
	 */
	if (IS_RISING_EDGE4()) {
     d10:	e1 ea       	ldi	r30, 0xA1	; 161
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	80 74       	andi	r24, 0x40	; 64
     d1c:	90 70       	andi	r25, 0x00	; 0
     d1e:	19 82       	std	Y+1, r1	; 0x01
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	11 f0       	breq	.+4      	; 0xd28 <__vector_41+0x54>
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	88 23       	and	r24, r24
     d2c:	99 f0       	breq	.+38     	; 0xd54 <__vector_41+0x80>
		TCNT4 = 0;
     d2e:	e4 ea       	ldi	r30, 0xA4	; 164
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	11 82       	std	Z+1, r1	; 0x01
     d34:	10 82       	st	Z, r1
		SET_FALLING_EDGE4();
     d36:	a1 ea       	ldi	r26, 0xA1	; 161
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e1 ea       	ldi	r30, 0xA1	; 161
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 7b       	andi	r24, 0xBF	; 191
     d42:	8c 93       	st	X, r24
		CLEAR_IC_FLAG4();
     d44:	a9 e3       	ldi	r26, 0x39	; 57
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e9 e3       	ldi	r30, 0x39	; 57
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 62       	ori	r24, 0x20	; 32
     d50:	8c 93       	st	X, r24
     d52:	1d c0       	rjmp	.+58     	; 0xd8e <__vector_41+0xba>
	} else {
		/*
		 * Store the ICR4 value and disable Input Capture
		 * so it does not interfere with other components.
		 */
		rightSonarTickCount = ICR4;
     d54:	e6 ea       	ldi	r30, 0xA6	; 166
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	90 93 db 04 	sts	0x04DB, r25
     d60:	80 93 da 04 	sts	0x04DA, r24
		SET_RISING_EDGE4();
     d64:	a1 ea       	ldi	r26, 0xA1	; 161
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e1 ea       	ldi	r30, 0xA1	; 161
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 64       	ori	r24, 0x40	; 64
     d70:	8c 93       	st	X, r24
		CLEAR_IC_FLAG4();
     d72:	a9 e3       	ldi	r26, 0x39	; 57
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e9 e3       	ldi	r30, 0x39	; 57
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 62       	ori	r24, 0x20	; 32
     d7e:	8c 93       	st	X, r24
		SET_IC_DISABLE4();
     d80:	a2 e7       	ldi	r26, 0x72	; 114
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e2 e7       	ldi	r30, 0x72	; 114
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8f 7d       	andi	r24, 0xDF	; 223
     d8c:	8c 93       	st	X, r24
	}

	Enable_Interrupt();
     d8e:	78 94       	sei
}
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	0f 90       	pop	r0
     db0:	00 92 5b 00 	sts	0x005B, r0
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <__vector_31>:
//	digitalWrite(FRONT_SONAR_RX, HIGH);
//
//	return;
//}

ISR(TIMER3_CAPT_vect)
     dbe:	1f 92       	push	r1
     dc0:	0f 92       	push	r0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	0f 92       	push	r0
     dc6:	00 90 5b 00 	lds	r0, 0x005B
     dca:	0f 92       	push	r0
     dcc:	11 24       	eor	r1, r1
     dce:	2f 93       	push	r18
     dd0:	3f 93       	push	r19
     dd2:	4f 93       	push	r20
     dd4:	5f 93       	push	r21
     dd6:	6f 93       	push	r22
     dd8:	7f 93       	push	r23
     dda:	8f 93       	push	r24
     ddc:	9f 93       	push	r25
     dde:	af 93       	push	r26
     de0:	bf 93       	push	r27
     de2:	ef 93       	push	r30
     de4:	ff 93       	push	r31
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	0f 92       	push	r0
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
{
	Disable_Interrupt();
     df0:	f8 94       	cli
	/*
	 * Once the rising edge of PW is detected, it means
	 * RX has been staying HIGH long enough. Set it to
	 * LOW now to disable sonar.
	 */
	digitalWrite(LEFTFRONT_SONAR_RX, LOW);
     df2:	84 e2       	ldi	r24, 0x24	; 36
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
	/*
	 * Reset Timer 3 when the rising edge of PW is
	 * detected, then change the Input Capture configuration
	 * to detect the falling edge and clear the interrupt flag.
	 */
	if (IS_RISING_EDGE3()) {
     dfa:	e1 e9       	ldi	r30, 0x91	; 145
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	80 74       	andi	r24, 0x40	; 64
     e06:	90 70       	andi	r25, 0x00	; 0
     e08:	19 82       	std	Y+1, r1	; 0x01
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	11 f0       	breq	.+4      	; 0xe12 <__vector_31+0x54>
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	88 23       	and	r24, r24
     e16:	99 f0       	breq	.+38     	; 0xe3e <__vector_31+0x80>
		TCNT3 = 0;
     e18:	e4 e9       	ldi	r30, 0x94	; 148
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	11 82       	std	Z+1, r1	; 0x01
     e1e:	10 82       	st	Z, r1
		SET_FALLING_EDGE3();
     e20:	a1 e9       	ldi	r26, 0x91	; 145
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e9       	ldi	r30, 0x91	; 145
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8f 7b       	andi	r24, 0xBF	; 191
     e2c:	8c 93       	st	X, r24
		CLEAR_IC_FLAG3();
     e2e:	a8 e3       	ldi	r26, 0x38	; 56
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e8 e3       	ldi	r30, 0x38	; 56
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 62       	ori	r24, 0x20	; 32
     e3a:	8c 93       	st	X, r24
     e3c:	1d c0       	rjmp	.+58     	; 0xe78 <__vector_31+0xba>
	} else {
		/*
		 * Store the ICR3 value and disable Input Capture
		 * so it does not interfere with other components.
		 */
		leftSonarTickCount = ICR3;
     e3e:	e6 e9       	ldi	r30, 0x96	; 150
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	90 93 dd 04 	sts	0x04DD, r25
     e4a:	80 93 dc 04 	sts	0x04DC, r24
		SET_RISING_EDGE3();
     e4e:	a1 e9       	ldi	r26, 0x91	; 145
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e1 e9       	ldi	r30, 0x91	; 145
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	8c 93       	st	X, r24
		CLEAR_IC_FLAG3();
     e5c:	a8 e3       	ldi	r26, 0x38	; 56
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e8 e3       	ldi	r30, 0x38	; 56
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 62       	ori	r24, 0x20	; 32
     e68:	8c 93       	st	X, r24
		SET_IC_DISABLE3();
     e6a:	a1 e7       	ldi	r26, 0x71	; 113
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e1 e7       	ldi	r30, 0x71	; 113
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 7d       	andi	r24, 0xDF	; 223
     e76:	8c 93       	st	X, r24
	}

	Enable_Interrupt();
     e78:	78 94       	sei
}
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	00 92 5b 00 	sts	0x005B, r0
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <_ZL10sonarEcho2v>:
/**
 * Set Input Capture to look for a rising edge, clear
 * the interrupt flag and then enable Input Capture.
 * After that, set RX to HIGH to enable the sonar.
 */
static void sonarEcho2() {
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	SET_RISING_EDGE4();
     eb0:	a1 ea       	ldi	r26, 0xA1	; 161
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e1 ea       	ldi	r30, 0xA1	; 161
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 64       	ori	r24, 0x40	; 64
     ebc:	8c 93       	st	X, r24
	CLEAR_IC_FLAG4();
     ebe:	a9 e3       	ldi	r26, 0x39	; 57
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e9 e3       	ldi	r30, 0x39	; 57
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	80 62       	ori	r24, 0x20	; 32
     eca:	8c 93       	st	X, r24
	SET_IC_ENABLE4();
     ecc:	a2 e7       	ldi	r26, 0x72	; 114
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e2 e7       	ldi	r30, 0x72	; 114
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 62       	ori	r24, 0x20	; 32
     ed8:	8c 93       	st	X, r24

	digitalWrite(LEFTBACK_SONAR_RX, HIGH);
     eda:	83 e2       	ldi	r24, 0x23	; 35
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	return;
}
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <_ZL10sonarEcho1v>:
/**
 * Set Input Capture to look for a rising edge, clear
 * the interrupt flag and then enable Input Capture.
 * After that, set RX to HIGH to enable the sonar.
 */
static void sonarEcho1() {
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	SET_RISING_EDGE3();
     ef0:	a1 e9       	ldi	r26, 0x91	; 145
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e1 e9       	ldi	r30, 0x91	; 145
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 64       	ori	r24, 0x40	; 64
     efc:	8c 93       	st	X, r24
	CLEAR_IC_FLAG3();
     efe:	a8 e3       	ldi	r26, 0x38	; 56
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e8 e3       	ldi	r30, 0x38	; 56
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 62       	ori	r24, 0x20	; 32
     f0a:	8c 93       	st	X, r24
	SET_IC_ENABLE3();
     f0c:	a1 e7       	ldi	r26, 0x71	; 113
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e1 e7       	ldi	r30, 0x71	; 113
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 62       	ori	r24, 0x20	; 32
     f18:	8c 93       	st	X, r24

	digitalWrite(LEFTFRONT_SONAR_RX, HIGH);
     f1a:	84 e2       	ldi	r24, 0x24	; 36
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	return;
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <_Z9sonarInitv>:
 */
static uint16_t frontSonarBuffer[SONAR_BUFFER_SIZE];
static uint16_t leftFrontSonarBuffer[SONAR_BUFFER_SIZE];
static uint16_t leftBackSonarBuffer[SONAR_BUFFER_SIZE];

void sonarInit() {
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	2e 97       	sbiw	r28, 0x0e	; 14
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
	/*
	 * CS32 CS31 CS30 = 011
	 * Set clock prescaler factor to 64
	 * ICNC3 = noise canceler => enabled
	 */
	TCCR3B &= ~_BV(CS32);
     f3c:	a1 e9       	ldi	r26, 0x91	; 145
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e1 e9       	ldi	r30, 0x91	; 145
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8b 7f       	andi	r24, 0xFB	; 251
     f48:	8c 93       	st	X, r24
	TCCR3B |= (_BV(CS30) | _BV(CS31));
     f4a:	a1 e9       	ldi	r26, 0x91	; 145
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e1 e9       	ldi	r30, 0x91	; 145
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	83 60       	ori	r24, 0x03	; 3
     f56:	8c 93       	st	X, r24
	TCCR3B |= _BV(ICNC3);
     f58:	a1 e9       	ldi	r26, 0x91	; 145
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e1 e9       	ldi	r30, 0x91	; 145
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 68       	ori	r24, 0x80	; 128
     f64:	8c 93       	st	X, r24

	//Set timer 3 to Normal Mode
	TCCR3A &= ~(_BV(WGM30) | _BV(WGM31));
     f66:	a0 e9       	ldi	r26, 0x90	; 144
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e0 e9       	ldi	r30, 0x90	; 144
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8c 7f       	andi	r24, 0xFC	; 252
     f72:	8c 93       	st	X, r24
	TCCR3B &= ~(_BV(WGM32) | _BV(WGM33));
     f74:	a1 e9       	ldi	r26, 0x91	; 145
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e1 e9       	ldi	r30, 0x91	; 145
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	87 7e       	andi	r24, 0xE7	; 231
     f80:	8c 93       	st	X, r24
	/*
	 * CS42 CS41 CS40 = 011
	 * Set clock prescaler factor to 64
	 * ICNC4 = noise canceler => enabled
	 */
	TCCR4B &= ~_BV(CS42);
     f82:	a1 ea       	ldi	r26, 0xA1	; 161
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e1 ea       	ldi	r30, 0xA1	; 161
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8b 7f       	andi	r24, 0xFB	; 251
     f8e:	8c 93       	st	X, r24
	TCCR4B |= (_BV(CS40) | _BV(CS41));
     f90:	a1 ea       	ldi	r26, 0xA1	; 161
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e1 ea       	ldi	r30, 0xA1	; 161
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	83 60       	ori	r24, 0x03	; 3
     f9c:	8c 93       	st	X, r24
	TCCR4B |= _BV(ICNC4);
     f9e:	a1 ea       	ldi	r26, 0xA1	; 161
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e1 ea       	ldi	r30, 0xA1	; 161
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	8c 93       	st	X, r24

	//Set timer 4 to Normal Mode
	TCCR4A &= ~(_BV(WGM40) | _BV(WGM41));
     fac:	a0 ea       	ldi	r26, 0xA0	; 160
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e0 ea       	ldi	r30, 0xA0	; 160
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8c 7f       	andi	r24, 0xFC	; 252
     fb8:	8c 93       	st	X, r24
	TCCR4B &= ~(_BV(WGM42) | _BV(WGM43));
     fba:	a1 ea       	ldi	r26, 0xA1	; 161
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e1 ea       	ldi	r30, 0xA1	; 161
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	87 7e       	andi	r24, 0xE7	; 231
     fc6:	8c 93       	st	X, r24
//
//	//Set timer 5 to Normal Mode
//	TCCR5A &= ~(_BV(WGM50) | _BV(WGM51));
//	TCCR5B &= ~(_BV(WGM52) | _BV(WGM53));

	sonarBufferIndex = 0;
     fc8:	10 92 de 04 	sts	0x04DE, r1

	/*
	 * Initialize the PW pin as input and all the
	 * RX pins of the sonar sensors as output
	 */
	pinMode(LEFTFRONT_SONAR_RX, OUTPUT);
     fcc:	84 e2       	ldi	r24, 0x24	; 36
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	pinMode(LEFTBACK_SONAR_RX, OUTPUT);
     fd4:	83 e2       	ldi	r24, 0x23	; 35
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	pinMode(FRONT_SONAR_RX, OUTPUT);
     fdc:	85 e2       	ldi	r24, 0x25	; 37
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	aa e7       	ldi	r26, 0x7A	; 122
     fea:	b3 e4       	ldi	r27, 0x43	; 67
     fec:	8b 87       	std	Y+11, r24	; 0x0b
     fee:	9c 87       	std	Y+12, r25	; 0x0c
     ff0:	ad 87       	std	Y+13, r26	; 0x0d
     ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	4a e7       	ldi	r20, 0x7A	; 122
    1002:	55 e4       	ldi	r21, 0x45	; 69
    1004:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	8f 83       	std	Y+7, r24	; 0x07
    100e:	98 87       	std	Y+8, r25	; 0x08
    1010:	a9 87       	std	Y+9, r26	; 0x09
    1012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1014:	6f 81       	ldd	r22, Y+7	; 0x07
    1016:	78 85       	ldd	r23, Y+8	; 0x08
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e8       	ldi	r20, 0x80	; 128
    1022:	5f e3       	ldi	r21, 0x3F	; 63
    1024:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    1028:	88 23       	and	r24, r24
    102a:	2c f4       	brge	.+10     	; 0x1036 <_Z9sonarInitv+0x10e>
		__ticks = 1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9e 83       	std	Y+6, r25	; 0x06
    1032:	8d 83       	std	Y+5, r24	; 0x05
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <_Z9sonarInitv+0x18c>
	else if (__tmp > 65535)
    1036:	6f 81       	ldd	r22, Y+7	; 0x07
    1038:	78 85       	ldd	r23, Y+8	; 0x08
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	3f ef       	ldi	r19, 0xFF	; 255
    1042:	4f e7       	ldi	r20, 0x7F	; 127
    1044:	57 e4       	ldi	r21, 0x47	; 71
    1046:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__gtsf2>
    104a:	18 16       	cp	r1, r24
    104c:	4c f5       	brge	.+82     	; 0x10a0 <_Z9sonarInitv+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1050:	7c 85       	ldd	r23, Y+12	; 0x0c
    1052:	8d 85       	ldd	r24, Y+13	; 0x0d
    1054:	9e 85       	ldd	r25, Y+14	; 0x0e
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e2       	ldi	r20, 0x20	; 32
    105c:	51 e4       	ldi	r21, 0x41	; 65
    105e:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	0f c0       	rjmp	.+30     	; 0x1096 <_Z9sonarInitv+0x16e>
    1078:	80 e9       	ldi	r24, 0x90	; 144
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	9c 83       	std	Y+4, r25	; 0x04
    107e:	8b 83       	std	Y+3, r24	; 0x03
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <_Z9sonarInitv+0x15c>
    1088:	9c 83       	std	Y+4, r25	; 0x04
    108a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	69 f7       	brne	.-38     	; 0x1078 <_Z9sonarInitv+0x150>
    109e:	14 c0       	rjmp	.+40     	; 0x10c8 <_Z9sonarInitv+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a0:	6f 81       	ldd	r22, Y+7	; 0x07
    10a2:	78 85       	ldd	r23, Y+8	; 0x08
    10a4:	89 85       	ldd	r24, Y+9	; 0x09
    10a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a8:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	9e 81       	ldd	r25, Y+6	; 0x06
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <_Z9sonarInitv+0x198>
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
	 * before the RX pin is ready to receive command.
	 */
	_delay_ms(250);

	//Enable each sonar when they are first initialized
	digitalWrite(LEFTFRONT_SONAR_RX, LOW);
    10c8:	84 e2       	ldi	r24, 0x24	; 36
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
	digitalWrite(LEFTBACK_SONAR_RX, LOW);
    10d0:	83 e2       	ldi	r24, 0x23	; 35
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
	digitalWrite(FRONT_SONAR_RX, LOW);
    10d8:	85 e2       	ldi	r24, 0x25	; 37
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	return;
}
    10e0:	2e 96       	adiw	r28, 0x0e	; 14
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <_Z20sonarMeasureDistancev>:

void sonarMeasureDistance() {
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	af 97       	sbiw	r28, 0x2f	; 47
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
	/*
	 * sonarBufferIndex should always be between
	 * 0 and 19 since only 20 data readings should
	 * be kept.
	 */
	++sonarBufferIndex;
    110a:	80 91 de 04 	lds	r24, 0x04DE
    110e:	8f 5f       	subi	r24, 0xFF	; 255
    1110:	80 93 de 04 	sts	0x04DE, r24

	if (sonarBufferIndex >= 20) {
    1114:	80 91 de 04 	lds	r24, 0x04DE
    1118:	1d a6       	std	Y+45, r1	; 0x2d
    111a:	84 31       	cpi	r24, 0x14	; 20
    111c:	10 f0       	brcs	.+4      	; 0x1122 <_Z20sonarMeasureDistancev+0x30>
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	2d a7       	std	Y+45, r18	; 0x2d
    1122:	3d a5       	ldd	r19, Y+45	; 0x2d
    1124:	33 23       	and	r19, r19
    1126:	11 f0       	breq	.+4      	; 0x112c <_Z20sonarMeasureDistancev+0x3a>
		sonarBufferIndex = 0;
    1128:	10 92 de 04 	sts	0x04DE, r1
	 */

	/*
	 * Left Sonar Reading
	 */
	sonarEcho1();
    112c:	0e 94 74 07 	call	0xee8	; 0xee8 <_ZL10sonarEcho1v>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a0 e2       	ldi	r26, 0x20	; 32
    1136:	b2 e4       	ldi	r27, 0x42	; 66
    1138:	8f a3       	std	Y+39, r24	; 0x27
    113a:	98 a7       	std	Y+40, r25	; 0x28
    113c:	a9 a7       	std	Y+41, r26	; 0x29
    113e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1140:	6f a1       	ldd	r22, Y+39	; 0x27
    1142:	78 a5       	ldd	r23, Y+40	; 0x28
    1144:	89 a5       	ldd	r24, Y+41	; 0x29
    1146:	9a a5       	ldd	r25, Y+42	; 0x2a
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4a e7       	ldi	r20, 0x7A	; 122
    114e:	55 e4       	ldi	r21, 0x45	; 69
    1150:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	8b a3       	std	Y+35, r24	; 0x23
    115a:	9c a3       	std	Y+36, r25	; 0x24
    115c:	ad a3       	std	Y+37, r26	; 0x25
    115e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1160:	6b a1       	ldd	r22, Y+35	; 0x23
    1162:	7c a1       	ldd	r23, Y+36	; 0x24
    1164:	8d a1       	ldd	r24, Y+37	; 0x25
    1166:	9e a1       	ldd	r25, Y+38	; 0x26
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    1174:	88 23       	and	r24, r24
    1176:	2c f4       	brge	.+10     	; 0x1182 <_Z20sonarMeasureDistancev+0x90>
		__ticks = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9a a3       	std	Y+34, r25	; 0x22
    117e:	89 a3       	std	Y+33, r24	; 0x21
    1180:	3f c0       	rjmp	.+126    	; 0x1200 <_Z20sonarMeasureDistancev+0x10e>
	else if (__tmp > 65535)
    1182:	6b a1       	ldd	r22, Y+35	; 0x23
    1184:	7c a1       	ldd	r23, Y+36	; 0x24
    1186:	8d a1       	ldd	r24, Y+37	; 0x25
    1188:	9e a1       	ldd	r25, Y+38	; 0x26
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	4f e7       	ldi	r20, 0x7F	; 127
    1190:	57 e4       	ldi	r21, 0x47	; 71
    1192:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__gtsf2>
    1196:	18 16       	cp	r1, r24
    1198:	4c f5       	brge	.+82     	; 0x11ec <_Z20sonarMeasureDistancev+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	6f a1       	ldd	r22, Y+39	; 0x27
    119c:	78 a5       	ldd	r23, Y+40	; 0x28
    119e:	89 a5       	ldd	r24, Y+41	; 0x29
    11a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	9a a3       	std	Y+34, r25	; 0x22
    11c0:	89 a3       	std	Y+33, r24	; 0x21
    11c2:	0f c0       	rjmp	.+30     	; 0x11e2 <_Z20sonarMeasureDistancev+0xf0>
    11c4:	80 e9       	ldi	r24, 0x90	; 144
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	98 a3       	std	Y+32, r25	; 0x20
    11ca:	8f 8f       	std	Y+31, r24	; 0x1f
    11cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11ce:	98 a1       	ldd	r25, Y+32	; 0x20
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <_Z20sonarMeasureDistancev+0xde>
    11d4:	98 a3       	std	Y+32, r25	; 0x20
    11d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d8:	89 a1       	ldd	r24, Y+33	; 0x21
    11da:	9a a1       	ldd	r25, Y+34	; 0x22
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	9a a3       	std	Y+34, r25	; 0x22
    11e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e2:	89 a1       	ldd	r24, Y+33	; 0x21
    11e4:	9a a1       	ldd	r25, Y+34	; 0x22
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	69 f7       	brne	.-38     	; 0x11c4 <_Z20sonarMeasureDistancev+0xd2>
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <_Z20sonarMeasureDistancev+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ec:	6b a1       	ldd	r22, Y+35	; 0x23
    11ee:	7c a1       	ldd	r23, Y+36	; 0x24
    11f0:	8d a1       	ldd	r24, Y+37	; 0x25
    11f2:	9e a1       	ldd	r25, Y+38	; 0x26
    11f4:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9a a3       	std	Y+34, r25	; 0x22
    11fe:	89 a3       	std	Y+33, r24	; 0x21
    1200:	89 a1       	ldd	r24, Y+33	; 0x21
    1202:	9a a1       	ldd	r25, Y+34	; 0x22
    1204:	9e 8f       	std	Y+30, r25	; 0x1e
    1206:	8d 8f       	std	Y+29, r24	; 0x1d
    1208:	8d 8d       	ldd	r24, Y+29	; 0x1d
    120a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <_Z20sonarMeasureDistancev+0x11a>
    1210:	9e 8f       	std	Y+30, r25	; 0x1e
    1212:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(40);
	leftFrontSonarBuffer[sonarBufferIndex] = leftSonarTickCount / 36.75;
    1214:	80 91 de 04 	lds	r24, 0x04DE
    1218:	08 2f       	mov	r16, r24
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	80 91 dc 04 	lds	r24, 0x04DC
    1220:	90 91 dd 04 	lds	r25, 0x04DD
    1224:	cc 01       	movw	r24, r24
    1226:	a0 e0       	ldi	r26, 0x00	; 0
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__floatunsisf>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	43 e1       	ldi	r20, 0x13	; 19
    1240:	52 e4       	ldi	r21, 0x42	; 66
    1242:	0e 94 90 29 	call	0x5320	; 0x5320 <__divsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	9c 01       	movw	r18, r24
    1258:	c8 01       	movw	r24, r16
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	fc 01       	movw	r30, r24
    1260:	e1 52       	subi	r30, 0x21	; 33
    1262:	fb 4f       	sbci	r31, 0xFB	; 251
    1264:	31 83       	std	Z+1, r19	; 0x01
    1266:	20 83       	st	Z, r18
//	Serial.print("Left Front: ");
//	Serial.println(leftFrontSonarBuffer[sonarBufferIndex]);
	/*
	 * Right Sonar Reading
	 */
	sonarEcho2();
    1268:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZL10sonarEcho2v>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 e2       	ldi	r26, 0x20	; 32
    1272:	b2 e4       	ldi	r27, 0x42	; 66
    1274:	89 8f       	std	Y+25, r24	; 0x19
    1276:	9a 8f       	std	Y+26, r25	; 0x1a
    1278:	ab 8f       	std	Y+27, r26	; 0x1b
    127a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127c:	69 8d       	ldd	r22, Y+25	; 0x19
    127e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1280:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1282:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a e7       	ldi	r20, 0x7A	; 122
    128a:	55 e4       	ldi	r21, 0x45	; 69
    128c:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	8d 8b       	std	Y+21, r24	; 0x15
    1296:	9e 8b       	std	Y+22, r25	; 0x16
    1298:	af 8b       	std	Y+23, r26	; 0x17
    129a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    129c:	6d 89       	ldd	r22, Y+21	; 0x15
    129e:	7e 89       	ldd	r23, Y+22	; 0x16
    12a0:	8f 89       	ldd	r24, Y+23	; 0x17
    12a2:	98 8d       	ldd	r25, Y+24	; 0x18
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	2c f4       	brge	.+10     	; 0x12be <_Z20sonarMeasureDistancev+0x1cc>
		__ticks = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9c 8b       	std	Y+20, r25	; 0x14
    12ba:	8b 8b       	std	Y+19, r24	; 0x13
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <_Z20sonarMeasureDistancev+0x24a>
	else if (__tmp > 65535)
    12be:	6d 89       	ldd	r22, Y+21	; 0x15
    12c0:	7e 89       	ldd	r23, Y+22	; 0x16
    12c2:	8f 89       	ldd	r24, Y+23	; 0x17
    12c4:	98 8d       	ldd	r25, Y+24	; 0x18
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
    12ca:	4f e7       	ldi	r20, 0x7F	; 127
    12cc:	57 e4       	ldi	r21, 0x47	; 71
    12ce:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__gtsf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	4c f5       	brge	.+82     	; 0x1328 <_Z20sonarMeasureDistancev+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	69 8d       	ldd	r22, Y+25	; 0x19
    12d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e2       	ldi	r20, 0x20	; 32
    12e4:	51 e4       	ldi	r21, 0x41	; 65
    12e6:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9c 8b       	std	Y+20, r25	; 0x14
    12fc:	8b 8b       	std	Y+19, r24	; 0x13
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <_Z20sonarMeasureDistancev+0x22c>
    1300:	80 e9       	ldi	r24, 0x90	; 144
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	9a 8b       	std	Y+18, r25	; 0x12
    1306:	89 8b       	std	Y+17, r24	; 0x11
    1308:	89 89       	ldd	r24, Y+17	; 0x11
    130a:	9a 89       	ldd	r25, Y+18	; 0x12
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <_Z20sonarMeasureDistancev+0x21a>
    1310:	9a 8b       	std	Y+18, r25	; 0x12
    1312:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1314:	8b 89       	ldd	r24, Y+19	; 0x13
    1316:	9c 89       	ldd	r25, Y+20	; 0x14
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	9c 8b       	std	Y+20, r25	; 0x14
    131c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131e:	8b 89       	ldd	r24, Y+19	; 0x13
    1320:	9c 89       	ldd	r25, Y+20	; 0x14
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	69 f7       	brne	.-38     	; 0x1300 <_Z20sonarMeasureDistancev+0x20e>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <_Z20sonarMeasureDistancev+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1328:	6d 89       	ldd	r22, Y+21	; 0x15
    132a:	7e 89       	ldd	r23, Y+22	; 0x16
    132c:	8f 89       	ldd	r24, Y+23	; 0x17
    132e:	98 8d       	ldd	r25, Y+24	; 0x18
    1330:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9c 8b       	std	Y+20, r25	; 0x14
    133a:	8b 8b       	std	Y+19, r24	; 0x13
    133c:	8b 89       	ldd	r24, Y+19	; 0x13
    133e:	9c 89       	ldd	r25, Y+20	; 0x14
    1340:	98 8b       	std	Y+16, r25	; 0x10
    1342:	8f 87       	std	Y+15, r24	; 0x0f
    1344:	8f 85       	ldd	r24, Y+15	; 0x0f
    1346:	98 89       	ldd	r25, Y+16	; 0x10
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <_Z20sonarMeasureDistancev+0x256>
    134c:	98 8b       	std	Y+16, r25	; 0x10
    134e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	leftBackSonarBuffer[sonarBufferIndex] = rightSonarTickCount / 36.75;
    1350:	80 91 de 04 	lds	r24, 0x04DE
    1354:	08 2f       	mov	r16, r24
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	80 91 da 04 	lds	r24, 0x04DA
    135c:	90 91 db 04 	lds	r25, 0x04DB
    1360:	cc 01       	movw	r24, r24
    1362:	a0 e0       	ldi	r26, 0x00	; 0
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__floatunsisf>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	43 e1       	ldi	r20, 0x13	; 19
    137c:	52 e4       	ldi	r21, 0x42	; 66
    137e:	0e 94 90 29 	call	0x5320	; 0x5320 <__divsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9c 01       	movw	r18, r24
    1394:	c8 01       	movw	r24, r16
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	fc 01       	movw	r30, r24
    139c:	e9 5f       	subi	r30, 0xF9	; 249
    139e:	fa 4f       	sbci	r31, 0xFA	; 250
    13a0:	31 83       	std	Z+1, r19	; 0x01
    13a2:	20 83       	st	Z, r18
//	Serial.println(leftBackSonarBuffer[sonarBufferIndex]);

	/*
	 * Front Sonar Reading
	 */
	digitalWrite(FRONT_SONAR_RX, HIGH);
    13a4:	85 e2       	ldi	r24, 0x25	; 37
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a8 e4       	ldi	r26, 0x48	; 72
    13b2:	b2 e4       	ldi	r27, 0x42	; 66
    13b4:	8b 87       	std	Y+11, r24	; 0x0b
    13b6:	9c 87       	std	Y+12, r25	; 0x0c
    13b8:	ad 87       	std	Y+13, r26	; 0x0d
    13ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13be:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	4a e7       	ldi	r20, 0x7A	; 122
    13ca:	55 e4       	ldi	r21, 0x45	; 69
    13cc:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	8f 83       	std	Y+7, r24	; 0x07
    13d6:	98 87       	std	Y+8, r25	; 0x08
    13d8:	a9 87       	std	Y+9, r26	; 0x09
    13da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13dc:	6f 81       	ldd	r22, Y+7	; 0x07
    13de:	78 85       	ldd	r23, Y+8	; 0x08
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	2c f4       	brge	.+10     	; 0x13fe <_Z20sonarMeasureDistancev+0x30c>
		__ticks = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 83       	std	Y+5, r24	; 0x05
    13fc:	3f c0       	rjmp	.+126    	; 0x147c <_Z20sonarMeasureDistancev+0x38a>
	else if (__tmp > 65535)
    13fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1400:	78 85       	ldd	r23, Y+8	; 0x08
    1402:	89 85       	ldd	r24, Y+9	; 0x09
    1404:	9a 85       	ldd	r25, Y+10	; 0x0a
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	3f ef       	ldi	r19, 0xFF	; 255
    140a:	4f e7       	ldi	r20, 0x7F	; 127
    140c:	57 e4       	ldi	r21, 0x47	; 71
    140e:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__gtsf2>
    1412:	18 16       	cp	r1, r24
    1414:	4c f5       	brge	.+82     	; 0x1468 <_Z20sonarMeasureDistancev+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1416:	6b 85       	ldd	r22, Y+11	; 0x0b
    1418:	7c 85       	ldd	r23, Y+12	; 0x0c
    141a:	8d 85       	ldd	r24, Y+13	; 0x0d
    141c:	9e 85       	ldd	r25, Y+14	; 0x0e
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	0f c0       	rjmp	.+30     	; 0x145e <_Z20sonarMeasureDistancev+0x36c>
    1440:	80 e9       	ldi	r24, 0x90	; 144
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	9c 83       	std	Y+4, r25	; 0x04
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <_Z20sonarMeasureDistancev+0x35a>
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	9e 83       	std	Y+6, r25	; 0x06
    145c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	69 f7       	brne	.-38     	; 0x1440 <_Z20sonarMeasureDistancev+0x34e>
    1466:	14 c0       	rjmp	.+40     	; 0x1490 <_Z20sonarMeasureDistancev+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1468:	6f 81       	ldd	r22, Y+7	; 0x07
    146a:	78 85       	ldd	r23, Y+8	; 0x08
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	9e 83       	std	Y+6, r25	; 0x06
    147a:	8d 83       	std	Y+5, r24	; 0x05
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <_Z20sonarMeasureDistancev+0x396>
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	frontSonarBuffer[sonarBufferIndex] = analogRead(FRONT_SONAR_AN) / 2;
    1490:	80 91 de 04 	lds	r24, 0x04DE
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3c a7       	std	Y+44, r19	; 0x2c
    149a:	2b a7       	std	Y+43, r18	; 0x2b
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <analogRead>
    14a2:	9f a7       	std	Y+47, r25	; 0x2f
    14a4:	8e a7       	std	Y+46, r24	; 0x2e
    14a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    14a8:	9f a5       	ldd	r25, Y+47	; 0x2f
    14aa:	99 23       	and	r25, r25
    14ac:	34 f4       	brge	.+12     	; 0x14ba <_Z20sonarMeasureDistancev+0x3c8>
    14ae:	2e a5       	ldd	r18, Y+46	; 0x2e
    14b0:	3f a5       	ldd	r19, Y+47	; 0x2f
    14b2:	2f 5f       	subi	r18, 0xFF	; 255
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	3f a7       	std	Y+47, r19	; 0x2f
    14b8:	2e a7       	std	Y+46, r18	; 0x2e
    14ba:	8e a5       	ldd	r24, Y+46	; 0x2e
    14bc:	9f a5       	ldd	r25, Y+47	; 0x2f
    14be:	95 95       	asr	r25
    14c0:	87 95       	ror	r24
    14c2:	9c 01       	movw	r18, r24
    14c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	fc 01       	movw	r30, r24
    14ce:	e1 5d       	subi	r30, 0xD1	; 209
    14d0:	fa 4f       	sbci	r31, 0xFA	; 250
    14d2:	31 83       	std	Z+1, r19	; 0x01
    14d4:	20 83       	st	Z, r18
//	Serial.print("Front Sonar: ");
//	Serial.print((int) frontSonarBuffer[sonarBufferIndex]);
//	Serial.println();

	return;
}
    14d6:	af 96       	adiw	r28, 0x2f	; 47
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <_Z15Radio_Drop_Ratev>:

	return result;
}

// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Drop_Rate()
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <_Z15Radio_Drop_Ratev+0x6>
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
{
	uint16_t wh = tx_history;
    14f8:	80 91 61 03 	lds	r24, 0x0361
    14fc:	90 91 62 03 	lds	r25, 0x0362
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t weight = 0;
    1504:	19 82       	std	Y+1, r1	; 0x01
    1506:	0f c0       	rjmp	.+30     	; 0x1526 <_Z15Radio_Drop_Ratev+0x3a>
	while (wh != 0)
	{
		if ((wh & 1) != 0) weight++;
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	81 70       	andi	r24, 0x01	; 1
    150e:	90 70       	andi	r25, 0x00	; 0
    1510:	88 23       	and	r24, r24
    1512:	19 f0       	breq	.+6      	; 0x151a <_Z15Radio_Drop_Ratev+0x2e>
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	8f 5f       	subi	r24, 0xFF	; 255
    1518:	89 83       	std	Y+1, r24	; 0x01
		wh >>= 1;
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	9b 81       	ldd	r25, Y+3	; 0x03
    151e:	96 95       	lsr	r25
    1520:	87 95       	ror	r24
    1522:	9b 83       	std	Y+3, r25	; 0x03
    1524:	8a 83       	std	Y+2, r24	; 0x02
// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
	uint8_t weight = 0;
	while (wh != 0)
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	9b 81       	ldd	r25, Y+3	; 0x03
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	69 f7       	brne	.-38     	; 0x1508 <_Z15Radio_Drop_Ratev+0x1c>
	{
		if ((wh & 1) != 0) weight++;
		wh >>= 1;
	}
	wh = (16 - weight) * 100;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	80 e1       	ldi	r24, 0x10	; 16
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	ac 01       	movw	r20, r24
    153a:	42 1b       	sub	r20, r18
    153c:	53 0b       	sbc	r21, r19
    153e:	9a 01       	movw	r18, r20
    1540:	84 e6       	ldi	r24, 0x64	; 100
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	ac 01       	movw	r20, r24
    1546:	24 9f       	mul	r18, r20
    1548:	c0 01       	movw	r24, r0
    154a:	25 9f       	mul	r18, r21
    154c:	90 0d       	add	r25, r0
    154e:	34 9f       	mul	r19, r20
    1550:	90 0d       	add	r25, r0
    1552:	11 24       	eor	r1, r1
    1554:	9b 83       	std	Y+3, r25	; 0x03
    1556:	8a 83       	std	Y+2, r24	; 0x02
	wh /= 16;
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	92 95       	swap	r25
    155e:	82 95       	swap	r24
    1560:	8f 70       	andi	r24, 0x0F	; 15
    1562:	89 27       	eor	r24, r25
    1564:	9f 70       	andi	r25, 0x0F	; 15
    1566:	89 27       	eor	r24, r25
    1568:	9b 83       	std	Y+3, r25	; 0x03
    156a:	8a 83       	std	Y+2, r24	; 0x02
	return wh;
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <_ZL10get_statusv>:
extern void radio_rxhandler(uint8_t pipenumber);

/**
 * Retrieve the status register.
 */
static uint8_t get_status()
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t status = 0;
    1584:	19 82       	std	Y+1, r1	; 0x01
	CSN_LOW();
    1586:	8a e2       	ldi	r24, 0x2A	; 42
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	status = SPI_Write_Byte(NOP);
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	0e 94 1f 11 	call	0x223e	; 0x223e <_Z14SPI_Write_Byteh>
    1594:	89 83       	std	Y+1, r24	; 0x01

	CSN_HIGH();
    1596:	8a e2       	ldi	r24, 0x2A	; 42
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	return status;
    159e:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <_ZL12set_registerhPhh>:
 * Set a register in the radio
 * \param reg The register value defined in nRF24L01.h (e.g. CONFIG, EN_AA, &c.).
 * \param value The value to write to the given register (the whole register is overwritten).
 * \return The status register.
 */
static uint8_t set_register(radio_register_t reg, uint8_t* value, uint8_t len)
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <_ZL12set_registerhPhh+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <_ZL12set_registerhPhh+0x8>
    15b0:	0f 92       	push	r0
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	7c 83       	std	Y+4, r23	; 0x04
    15ba:	6b 83       	std	Y+3, r22	; 0x03
    15bc:	4d 83       	std	Y+5, r20	; 0x05
{
	uint8_t status;
	CSN_LOW();
    15be:	8a e2       	ldi	r24, 0x2A	; 42
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	status = SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	8f 71       	andi	r24, 0x1F	; 31
    15ca:	80 62       	ori	r24, 0x20	; 32
    15cc:	0e 94 1f 11 	call	0x223e	; 0x223e <_Z14SPI_Write_Byteh>
    15d0:	89 83       	std	Y+1, r24	; 0x01
	SPI_Write_Block(value, len);
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	6d 81       	ldd	r22, Y+5	; 0x05
    15d8:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z15SPI_Write_BlockPhh>

	CSN_HIGH();
    15dc:	8a e2       	ldi	r24, 0x2A	; 42
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	return status;
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <_Z17Radio_Set_Tx_AddrPh>:
	set_register(EN_RXADDR, &value, 1);

}

// default transmitter address is 0xe7e7e7e7e7.
void Radio_Set_Tx_Addr(uint8_t* address)
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <_Z17Radio_Set_Tx_AddrPh+0x6>
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	89 83       	std	Y+1, r24	; 0x01
{
	tx_address[0] = address[0];
    1604:	e9 81       	ldd	r30, Y+1	; 0x01
    1606:	fa 81       	ldd	r31, Y+2	; 0x02
    1608:	80 81       	ld	r24, Z
    160a:	80 93 6a 03 	sts	0x036A, r24
	tx_address[1] = address[1];
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	fc 01       	movw	r30, r24
    1614:	31 96       	adiw	r30, 0x01	; 1
    1616:	80 81       	ld	r24, Z
    1618:	80 93 6b 03 	sts	0x036B, r24
	tx_address[2] = address[2];
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	fc 01       	movw	r30, r24
    1622:	32 96       	adiw	r30, 0x02	; 2
    1624:	80 81       	ld	r24, Z
    1626:	80 93 6c 03 	sts	0x036C, r24
	tx_address[3] = address[3];
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	fc 01       	movw	r30, r24
    1630:	33 96       	adiw	r30, 0x03	; 3
    1632:	80 81       	ld	r24, Z
    1634:	80 93 6d 03 	sts	0x036D, r24
	tx_address[4] = address[4];
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	fc 01       	movw	r30, r24
    163e:	34 96       	adiw	r30, 0x04	; 4
    1640:	80 81       	ld	r24, Z
    1642:	80 93 6e 03 	sts	0x036E, r24
	set_register(TX_ADDR, address, ADDRESS_LENGTH);
    1646:	29 81       	ldd	r18, Y+1	; 0x01
    1648:	3a 81       	ldd	r19, Y+2	; 0x02
    164a:	80 e1       	ldi	r24, 0x10	; 16
    164c:	b9 01       	movw	r22, r18
    164e:	45 e0       	ldi	r20, 0x05	; 5
    1650:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <_ZL19reset_pipe0_addressv>:
/**
 * Reset the pipe 0 address if pipe 0 is enabled.  This is necessary when the radio is using Enhanced Shockburst, because
 * the pipe 0 address is set to the transmit address while the radio is transmitting (this is how the radio receives
 * auto-ack packets).
 */
static void reset_pipe0_address()
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
{
	if (rx_pipe_widths[RADIO_PIPE_0] != 0)
    1668:	80 91 64 03 	lds	r24, 0x0364
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	88 23       	and	r24, r24
    1672:	11 f0       	breq	.+4      	; 0x1678 <_ZL19reset_pipe0_addressv+0x1a>
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	88 23       	and	r24, r24
    167c:	39 f0       	breq	.+14     	; 0x168c <_ZL19reset_pipe0_addressv+0x2e>
	{
		// reset the pipe 0 address if pipe 0 is enabled.
		set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
    167e:	2f e6       	ldi	r18, 0x6F	; 111
    1680:	33 e0       	ldi	r19, 0x03	; 3
    1682:	8a e0       	ldi	r24, 0x0A	; 10
    1684:	b9 01       	movw	r22, r18
    1686:	45 e0       	ldi	r20, 0x05	; 5
    1688:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>
	}
}
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <_ZL16send_instructionhPhS_h>:
 * \param instruction The instruction to send (see the bottom of nRF24L01.h)
 * \param data An array of argument data to the instruction.  If len is 0, then this may be NULL.
 * \param buffer An array for the instruction's return data.  This can be NULL if the instruction has no output.
 * \param len The length of the data and buffer arrays.
 */
static void send_instruction(uint8_t instruction, uint8_t* data, uint8_t* buffer, uint8_t len)
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <_ZL16send_instructionhPhS_h+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <_ZL16send_instructionhPhS_h+0x8>
    169c:	00 d0       	rcall	.+0      	; 0x169e <_ZL16send_instructionhPhS_h+0xa>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	7b 83       	std	Y+3, r23	; 0x03
    16a6:	6a 83       	std	Y+2, r22	; 0x02
    16a8:	5d 83       	std	Y+5, r21	; 0x05
    16aa:	4c 83       	std	Y+4, r20	; 0x04
    16ac:	2e 83       	std	Y+6, r18	; 0x06
{
    CSN_LOW();
    16ae:	8a e2       	ldi	r24, 0x2A	; 42
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
	// send the instruction
	SPI_Write_Byte(instruction);
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	0e 94 1f 11 	call	0x223e	; 0x223e <_Z14SPI_Write_Byteh>
	// pass in args
	if (len > 0)
    16bc:	8e 81       	ldd	r24, Y+6	; 0x06
    16be:	88 23       	and	r24, r24
    16c0:	91 f0       	breq	.+36     	; 0x16e6 <_ZL16send_instructionhPhS_h+0x52>
	{
		if (buffer == NULL)	//
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	31 f4       	brne	.+12     	; 0x16d6 <_ZL16send_instructionhPhS_h+0x42>
			SPI_Write_Block(data, len);
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	6e 81       	ldd	r22, Y+6	; 0x06
    16d0:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z15SPI_Write_BlockPhh>
    16d4:	08 c0       	rjmp	.+16     	; 0x16e6 <_ZL16send_instructionhPhS_h+0x52>
		else
			SPI_ReadWrite_Block(data, buffer, len);
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	2c 81       	ldd	r18, Y+4	; 0x04
    16dc:	3d 81       	ldd	r19, Y+5	; 0x05
    16de:	b9 01       	movw	r22, r18
    16e0:	4e 81       	ldd	r20, Y+6	; 0x06
    16e2:	0e 94 a9 10 	call	0x2152	; 0x2152 <_Z19SPI_ReadWrite_BlockPhS_h>
	}
    // resynch SPI
    CSN_HIGH();
    16e6:	8a e2       	ldi	r24, 0x2A	; 42
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
}
    16ee:	26 96       	adiw	r28, 0x06	; 6
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <_Z13Radio_ReceiveP3_rp>:
    }

    return RADIO_TX_SUCCESS;
}

RADIO_RX_STATUS Radio_Receive(radiopacket_t* buffer)
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	28 97       	sbiw	r28, 0x08	; 8
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	9f 83       	std	Y+7, r25	; 0x07
    1716:	8e 83       	std	Y+6, r24	; 0x06
{
	uint8_t len = 32;
    1718:	80 e2       	ldi	r24, 0x20	; 32
    171a:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t status;
	uint8_t pipe_number;
	uint8_t doMove = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	8a 83       	std	Y+2, r24	; 0x02
	RADIO_RX_STATUS result;

	transmit_lock = 0;
    1720:	10 92 57 05 	sts	0x0557, r1

	CE_LOW();
    1724:	8b e2       	ldi	r24, 0x2B	; 43
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

    status = get_status();
    172c:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZL10get_statusv>
    1730:	8c 83       	std	Y+4, r24	; 0x04
	pipe_number =  (status & 0xE) >> 1;
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	8e 70       	andi	r24, 0x0E	; 14
    173a:	90 70       	andi	r25, 0x00	; 0
    173c:	95 95       	asr	r25
    173e:	87 95       	ror	r24
    1740:	8b 83       	std	Y+3, r24	; 0x03

	if (pipe_number == RADIO_PIPE_EMPTY)
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	87 30       	cpi	r24, 0x07	; 7
    1746:	19 f4       	brne	.+6      	; 0x174e <_Z13Radio_ReceiveP3_rp+0x4e>
	{
		result = RADIO_RX_FIFO_EMPTY;
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	89 83       	std	Y+1, r24	; 0x01
		doMove = 0;
    174c:	1a 82       	std	Y+2, r1	; 0x02
	}

	if (rx_pipe_widths[pipe_number] > len)
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	fc 01       	movw	r30, r24
    1756:	ec 59       	subi	r30, 0x9C	; 156
    1758:	fc 4f       	sbci	r31, 0xFC	; 252
    175a:	90 81       	ld	r25, Z
    175c:	18 86       	std	Y+8, r1	; 0x08
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	89 17       	cp	r24, r25
    1762:	10 f4       	brcc	.+4      	; 0x1768 <_Z13Radio_ReceiveP3_rp+0x68>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	88 87       	std	Y+8, r24	; 0x08
    1768:	88 85       	ldd	r24, Y+8	; 0x08
    176a:	88 23       	and	r24, r24
    176c:	11 f0       	breq	.+4      	; 0x1772 <_Z13Radio_ReceiveP3_rp+0x72>
	{
		// the buffer isn't big enough, so don't copy the data.
		result = RADIO_RX_INVALID_ARGS;
    176e:	19 82       	std	Y+1, r1	; 0x01
		doMove = 0;
    1770:	1a 82       	std	Y+2, r1	; 0x02
	}

	if (doMove)
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	88 23       	and	r24, r24
    1776:	19 f1       	breq	.+70     	; 0x17be <_Z13Radio_ReceiveP3_rp+0xbe>
	{
		// Move the data payload into the local
		send_instruction(R_RX_PAYLOAD, (uint8_t*)buffer, (uint8_t*)buffer, rx_pipe_widths[pipe_number]);
    1778:	2e 81       	ldd	r18, Y+6	; 0x06
    177a:	3f 81       	ldd	r19, Y+7	; 0x07
    177c:	4e 81       	ldd	r20, Y+6	; 0x06
    177e:	5f 81       	ldd	r21, Y+7	; 0x07
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	fc 01       	movw	r30, r24
    1788:	ec 59       	subi	r30, 0x9C	; 156
    178a:	fc 4f       	sbci	r31, 0xFC	; 252
    178c:	90 81       	ld	r25, Z
    178e:	81 e6       	ldi	r24, 0x61	; 97
    1790:	b9 01       	movw	r22, r18
    1792:	29 2f       	mov	r18, r25
    1794:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL16send_instructionhPhS_h>

		status = get_status();
    1798:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZL10get_statusv>
    179c:	8c 83       	std	Y+4, r24	; 0x04
		pipe_number =  (status & 0xE) >> 1;
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	8e 70       	andi	r24, 0x0E	; 14
    17a6:	90 70       	andi	r25, 0x00	; 0
    17a8:	95 95       	asr	r25
    17aa:	87 95       	ror	r24
    17ac:	8b 83       	std	Y+3, r24	; 0x03

		if (pipe_number != RADIO_PIPE_EMPTY)
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	87 30       	cpi	r24, 0x07	; 7
    17b2:	19 f0       	breq	.+6      	; 0x17ba <_Z13Radio_ReceiveP3_rp+0xba>
			result = RADIO_RX_MORE_PACKETS;
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <_Z13Radio_ReceiveP3_rp+0xbe>
		else
			result = RADIO_RX_SUCCESS;
    17ba:	84 e0       	ldi	r24, 0x04	; 4
    17bc:	89 83       	std	Y+1, r24	; 0x01
	}

	CE_HIGH();
    17be:	8b e2       	ldi	r24, 0x2B	; 43
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	transmit_lock = 0;
    17c6:	10 92 57 05 	sts	0x0557, r1

	//release_radio();

	return result;
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    17cc:	28 96       	adiw	r28, 0x08	; 8
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <_ZL19configure_registersv>:
/**
 * Configure radio defaults and turn on the radio in receive mode.
 * This configures the radio to its max-power, max-packet-header-length settings.  If you want to reduce power consumption
 * or increase on-air payload bandwidth, you'll have to change the config.
 */
static void configure_registers()
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t value;

	SPI_Init();
    17e8:	0e 94 3c 11 	call	0x2278	; 0x2278 <_Z8SPI_Initv>

	// set address width to 5 bytes.
	value = ADDRESS_LENGTH - 2;			// 0b11 for 5 bytes, 0b10 for 4 bytes, 0b01 for 3 bytes
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	89 83       	std	Y+1, r24	; 0x01
	set_register(SETUP_AW, &value, 1);
    17f0:	83 e0       	ldi	r24, 0x03	; 3
    17f2:	9e 01       	movw	r18, r28
    17f4:	2f 5f       	subi	r18, 0xFF	; 255
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	b9 01       	movw	r22, r18
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

	// set Enhanced Shockburst retry to every 586 us, up to 5 times.  If packet collisions are a problem even with AA enabled,
	// then consider changing the retry delay to be different on the different stations so that they do not keep colliding on each retry.
	value = 0x15;
    1800:	85 e1       	ldi	r24, 0x15	; 21
    1802:	89 83       	std	Y+1, r24	; 0x01
	//value = 0x10;
	set_register(SETUP_RETR, &value, 1);
    1804:	84 e0       	ldi	r24, 0x04	; 4
    1806:	9e 01       	movw	r18, r28
    1808:	2f 5f       	subi	r18, 0xFF	; 255
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	b9 01       	movw	r22, r18
    180e:	41 e0       	ldi	r20, 0x01	; 1
    1810:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

	// Set to use 2.4 GHz channel 110.
	value = CHANNEL;
    1814:	80 e7       	ldi	r24, 0x70	; 112
    1816:	89 83       	std	Y+1, r24	; 0x01
	set_register(RF_CH, &value, 1);
    1818:	85 e0       	ldi	r24, 0x05	; 5
    181a:	9e 01       	movw	r18, r28
    181c:	2f 5f       	subi	r18, 0xFF	; 255
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	b9 01       	movw	r22, r18
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

	// Set radio to 2 Mbps and high power.  Leave LNA_HCURR at its default.
	value = _BV(RF_DR) | _BV(LNA_HCURR);
    1828:	89 e0       	ldi	r24, 0x09	; 9
    182a:	89 83       	std	Y+1, r24	; 0x01
	set_register(RF_SETUP, &value, 1);
    182c:	86 e0       	ldi	r24, 0x06	; 6
    182e:	9e 01       	movw	r18, r28
    1830:	2f 5f       	subi	r18, 0xFF	; 255
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	b9 01       	movw	r22, r18
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

	// Enable 2-byte CRC and power up in receive mode.
	value = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
    183c:	8f e0       	ldi	r24, 0x0F	; 15
    183e:	89 83       	std	Y+1, r24	; 0x01
	set_register(CONFIG, &value, 1);
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	9e 01       	movw	r18, r28
    1844:	2f 5f       	subi	r18, 0xFF	; 255
    1846:	3f 4f       	sbci	r19, 0xFF	; 255
    1848:	b9 01       	movw	r22, r18
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

	// clear the interrupt flags in case the radio's still asserting an old unhandled interrupt
    value = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1850:	80 e7       	ldi	r24, 0x70	; 112
    1852:	89 83       	std	Y+1, r24	; 0x01
    set_register(STATUS, &value, 1);
    1854:	87 e0       	ldi	r24, 0x07	; 7
    1856:	9e 01       	movw	r18, r28
    1858:	2f 5f       	subi	r18, 0xFF	; 255
    185a:	3f 4f       	sbci	r19, 0xFF	; 255
    185c:	b9 01       	movw	r22, r18
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

    // flush the FIFOs in case there are old data in them.
	send_instruction(FLUSH_TX, NULL, NULL, 0);
    1864:	81 ee       	ldi	r24, 0xE1	; 225
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL16send_instructionhPhS_h>
	send_instruction(FLUSH_RX, NULL, NULL, 0);
    1874:	82 ee       	ldi	r24, 0xE2	; 226
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL16send_instructionhPhS_h>
}
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <_ZL12get_registerhPhh>:
 * \param reg The register value defined in nRF24L01.h (e.g. CONFIG, EN_AA, &c.).
 * \param buffer A contiguous memory block into which the register contents will be copied.  If the buffer is too long for the
 * 		register contents, then the remaining bytes will be overwritten with 0xFF.
 * \param len The length of the buffer.
 */
static uint8_t get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <_ZL12get_registerhPhh+0x6>
    1892:	00 d0       	rcall	.+0      	; 0x1894 <_ZL12get_registerhPhh+0x8>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <_ZL12get_registerhPhh+0xa>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	8b 83       	std	Y+3, r24	; 0x03
    189c:	7d 83       	std	Y+5, r23	; 0x05
    189e:	6c 83       	std	Y+4, r22	; 0x04
    18a0:	4e 83       	std	Y+6, r20	; 0x06
{
	uint8_t status, i;
	for (i = 0; i < len; i++)
    18a2:	19 82       	std	Y+1, r1	; 0x01
    18a4:	0d c0       	rjmp	.+26     	; 0x18c0 <_ZL12get_registerhPhh+0x34>
	{
		// If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
		// To remove the risk, we set the buffer elements to NOP instructions.
		buffer[i] = 0xFF;
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	fc 01       	movw	r30, r24
    18b2:	e2 0f       	add	r30, r18
    18b4:	f3 1f       	adc	r31, r19
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	80 83       	st	Z, r24
 * \param len The length of the buffer.
 */
static uint8_t get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
	uint8_t status, i;
	for (i = 0; i < len; i++)
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	99 81       	ldd	r25, Y+1	; 0x01
    18c2:	8e 81       	ldd	r24, Y+6	; 0x06
    18c4:	98 17       	cp	r25, r24
    18c6:	78 f3       	brcs	.-34     	; 0x18a6 <_ZL12get_registerhPhh+0x1a>
	{
		// If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
		// To remove the risk, we set the buffer elements to NOP instructions.
		buffer[i] = 0xFF;
	}
	CSN_LOW();
    18c8:	8a e2       	ldi	r24, 0x2A	; 42
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	status = SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	8f 71       	andi	r24, 0x1F	; 31
    18d4:	0e 94 1f 11 	call	0x223e	; 0x223e <_Z14SPI_Write_Byteh>
    18d8:	8a 83       	std	Y+2, r24	; 0x02
	SPI_ReadWrite_Block(NULL, buffer, len);
    18da:	2c 81       	ldd	r18, Y+4	; 0x04
    18dc:	3d 81       	ldd	r19, Y+5	; 0x05
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	b9 01       	movw	r22, r18
    18e4:	4e 81       	ldd	r20, Y+6	; 0x06
    18e6:	0e 94 a9 10 	call	0x2152	; 0x2152 <_Z19SPI_ReadWrite_BlockPhS_h>

	CSN_HIGH();
    18ea:	8a e2       	ldi	r24, 0x2A	; 42
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	return status;
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18f4:	26 96       	adiw	r28, 0x06	; 6
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>:
	tx_address[3] = address[3];
	tx_address[4] = address[4];
	set_register(TX_ADDR, address, ADDRESS_LENGTH);
}

void Radio_Configure(RADIO_DATA_RATE dr, RADIO_TX_POWER power)
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x6>
    190c:	0f 92       	push	r0
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	8a 83       	std	Y+2, r24	; 0x02
    1914:	6b 83       	std	Y+3, r22	; 0x03

	// set the address
	//Radio_Set_Tx_Addr(address);

	// set the data rate and power bits in the RF_SETUP register
	get_register(RF_SETUP, &value, 1);
    1916:	86 e0       	ldi	r24, 0x06	; 6
    1918:	9e 01       	movw	r18, r28
    191a:	2f 5f       	subi	r18, 0xFF	; 255
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	b9 01       	movw	r22, r18
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	0e 94 46 0c 	call	0x188c	; 0x188c <_ZL12get_registerhPhh>

	value |= 3 << RF_PWR;			// set the power bits so that the & will mask the power value in properly.
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	86 60       	ori	r24, 0x06	; 6
    192a:	89 83       	std	Y+1, r24	; 0x01
	value &= power << RF_PWR;		// mask the power value into the RF status byte.
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	98 2f       	mov	r25, r24
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	89 23       	and	r24, r25
    193c:	89 83       	std	Y+1, r24	; 0x01

	if (dr)
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	88 23       	and	r24, r24
    1942:	21 f0       	breq	.+8      	; 0x194c <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x46>
		value |= _BV(RF_DR);
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	88 60       	ori	r24, 0x08	; 8
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x4c>
	else
		value &= ~_BV(RF_DR);
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	87 7f       	andi	r24, 0xF7	; 247
    1950:	89 83       	std	Y+1, r24	; 0x01

	set_register(RF_SETUP, &value, 1);
    1952:	86 e0       	ldi	r24, 0x06	; 6
    1954:	9e 01       	movw	r18, r28
    1956:	2f 5f       	subi	r18, 0xFF	; 255
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	b9 01       	movw	r22, r18
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>:
// default address for pipe 1 is 0xc2c2c2c2c2
// default address for pipe 2 is 0xc2c2c2c2c3 (disabled)
// default address for pipe 3 is 0xc2c2c2c2c4 (disabled)
// default address for pipe 4 is 0xc2c2c2c2c5 (disabled)
// default address for pipe 5 is 0xc2c2c2c2c6 (disabled)
void Radio_Configure_Rx(RADIO_PIPE pipe, uint8_t* address, ON_OFF enable)
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	2a 97       	sbiw	r28, 0x0a	; 10
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	8c 83       	std	Y+4, r24	; 0x04
    1984:	7e 83       	std	Y+6, r23	; 0x06
    1986:	6d 83       	std	Y+5, r22	; 0x05
    1988:	4f 83       	std	Y+7, r20	; 0x07
{
	uint8_t value;
	uint8_t use_aa = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t payload_width = 32;
    198e:	80 e2       	ldi	r24, 0x20	; 32
    1990:	89 83       	std	Y+1, r24	; 0x01
	if (payload_width < 1 || payload_width > 32 || pipe < RADIO_PIPE_0 || pipe > RADIO_PIPE_5) return;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	88 23       	and	r24, r24
    1996:	09 f4       	brne	.+2      	; 0x199a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x2c>
    1998:	bd c0       	rjmp	.+378    	; 0x1b14 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x1a6>
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	81 32       	cpi	r24, 0x21	; 33
    199e:	08 f0       	brcs	.+2      	; 0x19a2 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x34>
    19a0:	b9 c0       	rjmp	.+370    	; 0x1b14 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x1a6>
    19a2:	8c 81       	ldd	r24, Y+4	; 0x04
    19a4:	86 30       	cpi	r24, 0x06	; 6
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x3c>
    19a8:	b5 c0       	rjmp	.+362    	; 0x1b14 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x1a6>

	// store the pipe 0 address so that it can be overwritten when transmitting with auto-ack enabled.
	if (pipe == RADIO_PIPE_0)
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	88 23       	and	r24, r24
    19ae:	09 f5       	brne	.+66     	; 0x19f2 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x84>
	{
		rx_pipe0_address[0] = address[0];
    19b0:	ed 81       	ldd	r30, Y+5	; 0x05
    19b2:	fe 81       	ldd	r31, Y+6	; 0x06
    19b4:	80 81       	ld	r24, Z
    19b6:	80 93 6f 03 	sts	0x036F, r24
		rx_pipe0_address[1] = address[1];
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	fc 01       	movw	r30, r24
    19c0:	31 96       	adiw	r30, 0x01	; 1
    19c2:	80 81       	ld	r24, Z
    19c4:	80 93 70 03 	sts	0x0370, r24
		rx_pipe0_address[2] = address[2];
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	fc 01       	movw	r30, r24
    19ce:	32 96       	adiw	r30, 0x02	; 2
    19d0:	80 81       	ld	r24, Z
    19d2:	80 93 71 03 	sts	0x0371, r24
		rx_pipe0_address[3] = address[3];
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	fc 01       	movw	r30, r24
    19dc:	33 96       	adiw	r30, 0x03	; 3
    19de:	80 81       	ld	r24, Z
    19e0:	80 93 72 03 	sts	0x0372, r24
		rx_pipe0_address[4] = address[4];
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	fc 01       	movw	r30, r24
    19ea:	34 96       	adiw	r30, 0x04	; 4
    19ec:	80 81       	ld	r24, Z
    19ee:	80 93 73 03 	sts	0x0373, r24
	}

	// Set the address.  We set this stuff even if the pipe is being disabled, because for example the transmitter
	// needs pipe 0 to have the same address as the Tx address for auto-ack to work, even if pipe 0 is disabled.
	set_register(RX_ADDR_P0 + pipe, address, pipe > RADIO_PIPE_1 ? 1 : ADDRESS_LENGTH);
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	98 2f       	mov	r25, r24
    19f6:	96 5f       	subi	r25, 0xF6	; 246
    19f8:	9a 87       	std	Y+10, r25	; 0x0a
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	82 30       	cpi	r24, 0x02	; 2
    19fe:	18 f0       	brcs	.+6      	; 0x1a06 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x98>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	89 87       	std	Y+9, r24	; 0x09
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x9c>
    1a06:	95 e0       	ldi	r25, 0x05	; 5
    1a08:	99 87       	std	Y+9, r25	; 0x09
    1a0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a10:	b9 01       	movw	r22, r18
    1a12:	49 85       	ldd	r20, Y+9	; 0x09
    1a14:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

	// Set auto-ack.
	get_register(EN_AA, &value, 1);
    1a18:	9e 01       	movw	r18, r28
    1a1a:	2d 5f       	subi	r18, 0xFD	; 253
    1a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	b9 01       	movw	r22, r18
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 46 0c 	call	0x188c	; 0x188c <_ZL12get_registerhPhh>
	if (use_aa)
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	88 23       	and	r24, r24
    1a2c:	81 f0       	breq	.+32     	; 0x1a4e <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xe0>
		value |= _BV(pipe);
    1a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xd2>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xce>
    1a44:	98 2f       	mov	r25, r24
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	89 2b       	or	r24, r25
    1a4a:	8b 83       	std	Y+3, r24	; 0x03
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xfe>
	else
		value &= ~_BV(pipe);
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xf0>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	2a 95       	dec	r18
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xec>
    1a62:	98 2f       	mov	r25, r24
    1a64:	90 95       	com	r25
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	89 23       	and	r24, r25
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
	set_register(EN_AA, &value, 1);
    1a6c:	9e 01       	movw	r18, r28
    1a6e:	2d 5f       	subi	r18, 0xFD	; 253
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	b9 01       	movw	r22, r18
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

	// Set the pipe's payload width.  If the pipe is being disabled, then the payload width is set to 0.
	value = enable ? payload_width : 0;
    1a7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a7e:	88 23       	and	r24, r24
    1a80:	19 f0       	breq	.+6      	; 0x1a88 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x11a>
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	88 87       	std	Y+8, r24	; 0x08
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x11c>
    1a88:	18 86       	std	Y+8, r1	; 0x08
    1a8a:	98 85       	ldd	r25, Y+8	; 0x08
    1a8c:	9b 83       	std	Y+3, r25	; 0x03
	set_register(RX_PW_P0 + pipe, &value, 1);
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a90:	8f 5e       	subi	r24, 0xEF	; 239
    1a92:	9e 01       	movw	r18, r28
    1a94:	2d 5f       	subi	r18, 0xFD	; 253
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
    1a98:	b9 01       	movw	r22, r18
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>
	rx_pipe_widths[pipe] = value;
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	88 2f       	mov	r24, r24
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	ec 59       	subi	r30, 0x9C	; 156
    1aac:	fc 4f       	sbci	r31, 0xFC	; 252
    1aae:	20 83       	st	Z, r18

	// Enable or disable the pipe.
	get_register(EN_RXADDR, &value, 1);
    1ab0:	9e 01       	movw	r18, r28
    1ab2:	2d 5f       	subi	r18, 0xFD	; 253
    1ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	b9 01       	movw	r22, r18
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	0e 94 46 0c 	call	0x188c	; 0x188c <_ZL12get_registerhPhh>
	if (enable)
    1ac0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac2:	88 23       	and	r24, r24
    1ac4:	81 f0       	breq	.+32     	; 0x1ae6 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x178>
		value |= _BV(pipe);
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	02 2e       	mov	r0, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x16a>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x166>
    1adc:	98 2f       	mov	r25, r24
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	89 2b       	or	r24, r25
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x196>
	else
		value &= ~_BV(pipe);
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x188>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	2a 95       	dec	r18
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x184>
    1afa:	98 2f       	mov	r25, r24
    1afc:	90 95       	com	r25
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	89 23       	and	r24, r25
    1b02:	8b 83       	std	Y+3, r24	; 0x03
	set_register(EN_RXADDR, &value, 1);
    1b04:	9e 01       	movw	r18, r28
    1b06:	2d 5f       	subi	r18, 0xFD	; 253
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	82 e0       	ldi	r24, 0x02	; 2
    1b0c:	b9 01       	movw	r22, r18
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

}
    1b14:	2a 96       	adiw	r28, 0x0a	; 10
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <_ZL11set_tx_modev>:
}

/**
 * Switch the radio to transmit mode.  If the radio is already in transmit mode, this does nothing.
 */
static void set_tx_mode()
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	0f 92       	push	r0
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t config;
	get_register(CONFIG, &config, 1);
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	9e 01       	movw	r18, r28
    1b34:	2f 5f       	subi	r18, 0xFF	; 255
    1b36:	3f 4f       	sbci	r19, 0xFF	; 255
    1b38:	b9 01       	movw	r22, r18
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 46 0c 	call	0x188c	; 0x188c <_ZL12get_registerhPhh>
	if ((config & _BV(PRIM_RX)) != 0)
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	81 70       	andi	r24, 0x01	; 1
    1b48:	90 70       	andi	r25, 0x00	; 0
    1b4a:	88 23       	and	r24, r24
    1b4c:	99 f0       	breq	.+38     	; 0x1b74 <_ZL11set_tx_modev+0x4e>
	{
		config &= ~_BV(PRIM_RX);
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	8e 7f       	andi	r24, 0xFE	; 254
    1b52:	89 83       	std	Y+1, r24	; 0x01
		set_register(CONFIG, &config, 1);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	9e 01       	movw	r18, r28
    1b58:	2f 5f       	subi	r18, 0xFF	; 255
    1b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>
		// The radio takes 130 us to power up the transmitter
		// You can delete this if you're sending large packets (I'm thinking > 25 bytes, but I'm not sure) because it
		// sending the bytes over SPI can take this long.
		delayMicroseconds(65);
    1b64:	81 e4       	ldi	r24, 0x41	; 65
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 8c 24 	call	0x4918	; 0x4918 <delayMicroseconds>
		delayMicroseconds(65);
    1b6c:	81 e4       	ldi	r24, 0x41	; 65
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 8c 24 	call	0x4918	; 0x4918 <delayMicroseconds>
	}
}
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <_Z14Radio_TransmitP3_rp14_radio_tx_wait>:
		value &= ~_BV(RF_DR);

	set_register(RF_SETUP, &value, 1);
}

uint8_t Radio_Transmit(radiopacket_t* payload, RADIO_TX_WAIT wait)
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x6>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x8>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0xa>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	9b 83       	std	Y+3, r25	; 0x03
    1b8c:	8a 83       	std	Y+2, r24	; 0x02
    1b8e:	6c 83       	std	Y+4, r22	; 0x04
{
	//if (block && transmit_lock) while (transmit_lock);
	//if (!block && transmit_lock) return 0;
	uint8_t len = 32;
    1b90:	80 e2       	ldi	r24, 0x20	; 32
    1b92:	89 83       	std	Y+1, r24	; 0x01

	// indicate that the driver is transmitting.
    transmit_lock = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	80 93 57 05 	sts	0x0557, r24

	// disable the radio while writing to the Tx FIFO.
    CE_LOW();
    1b9a:	8b e2       	ldi	r24, 0x2B	; 43
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	set_tx_mode();
    1ba2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZL11set_tx_modev>

    // for auto-ack to work, the pipe0 address must be set to the Tx address while the radio is transmitting.
    // The register will be set back to the original pipe 0 address when the TX_DS or MAX_RT interrupt is asserted.
    set_register(RX_ADDR_P0, (uint8_t*)tx_address, ADDRESS_LENGTH);
    1ba6:	2a e6       	ldi	r18, 0x6A	; 106
    1ba8:	33 e0       	ldi	r19, 0x03	; 3
    1baa:	8a e0       	ldi	r24, 0x0A	; 10
    1bac:	b9 01       	movw	r22, r18
    1bae:	45 e0       	ldi	r20, 0x05	; 5
    1bb0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

    // transfer the packet to the radio's Tx FIFO for transmission
    send_instruction(W_TX_PAYLOAD, (uint8_t*)payload, NULL, len);
    1bb4:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb6:	3b 81       	ldd	r19, Y+3	; 0x03
    1bb8:	80 ea       	ldi	r24, 0xA0	; 160
    1bba:	b9 01       	movw	r22, r18
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	29 81       	ldd	r18, Y+1	; 0x01
    1bc2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL16send_instructionhPhS_h>

    // start the transmission.
    CE_HIGH();
    1bc6:	8b e2       	ldi	r24, 0x2B	; 43
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

    if (wait == RADIO_WAIT_FOR_TX)
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	88 23       	and	r24, r24
    1bd2:	79 f4       	brne	.+30     	; 0x1bf2 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x76>
    {
    	while (transmit_lock);
    1bd4:	80 91 57 05 	lds	r24, 0x0557
    1bd8:	8e 83       	std	Y+6, r24	; 0x06
    1bda:	8e 81       	ldd	r24, Y+6	; 0x06
    1bdc:	88 23       	and	r24, r24
    1bde:	11 f0       	breq	.+4      	; 0x1be4 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x68>
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	8e 83       	std	Y+6, r24	; 0x06
    1be4:	8e 81       	ldd	r24, Y+6	; 0x06
    1be6:	88 23       	and	r24, r24
    1be8:	a9 f7       	brne	.-22     	; 0x1bd4 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x58>
    	return tx_last_status;
    1bea:	80 91 63 03 	lds	r24, 0x0363
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x7a>
    }

    return RADIO_TX_SUCCESS;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bf8:	26 96       	adiw	r28, 0x06	; 6
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <_ZL11set_rx_modev>:
}

/**
 * Switch the radio to receive mode.  If the radio is already in receive mode, this does nothing.
 */
static void set_rx_mode()
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	0f 92       	push	r0
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t config;
	get_register(CONFIG, &config, 1);
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	9e 01       	movw	r18, r28
    1c18:	2f 5f       	subi	r18, 0xFF	; 255
    1c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1c:	b9 01       	movw	r22, r18
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	0e 94 46 0c 	call	0x188c	; 0x188c <_ZL12get_registerhPhh>
	if ((config & _BV(PRIM_RX)) == 0)
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	81 70       	andi	r24, 0x01	; 1
    1c2c:	90 70       	andi	r25, 0x00	; 0
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	99 f4       	brne	.+38     	; 0x1c58 <_ZL11set_rx_modev+0x4e>
	{
		config |= _BV(PRIM_RX);
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	81 60       	ori	r24, 0x01	; 1
    1c36:	89 83       	std	Y+1, r24	; 0x01
		set_register(CONFIG, &config, 1);
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	9e 01       	movw	r18, r28
    1c3c:	2f 5f       	subi	r18, 0xFF	; 255
    1c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c40:	b9 01       	movw	r22, r18
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>
		// the radio takes 130 us to power up the receiver.
		delayMicroseconds(65);
    1c48:	81 e4       	ldi	r24, 0x41	; 65
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 8c 24 	call	0x4918	; 0x4918 <delayMicroseconds>
		delayMicroseconds(65);
    1c50:	81 e4       	ldi	r24, 0x41	; 65
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 8c 24 	call	0x4918	; 0x4918 <delayMicroseconds>
	}
}
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <_Z11int0handlerv>:
	return wh;
}

// Interrupt handler
//ISR(INT7_vect)
void int0handler()
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <_Z11int0handlerv+0x6>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
{
    uint8_t status;
    uint8_t pipe_number;

    CE_LOW();
    1c6a:	8b e2       	ldi	r24, 0x2B	; 43
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

    status = get_status();
    1c72:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZL10get_statusv>
    1c76:	8a 83       	std	Y+2, r24	; 0x02

    if (status & _BV(RX_DR))
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	80 74       	andi	r24, 0x40	; 64
    1c80:	90 70       	andi	r25, 0x00	; 0
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	59 f0       	breq	.+22     	; 0x1c9c <_Z11int0handlerv+0x3c>
    {
    	pipe_number =  (status & 0xE) >> 1;
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	8e 70       	andi	r24, 0x0E	; 14
    1c8e:	90 70       	andi	r25, 0x00	; 0
    1c90:	95 95       	asr	r25
    1c92:	87 95       	ror	r24
    1c94:	89 83       	std	Y+1, r24	; 0x01
    	radio_rxhandler(pipe_number);
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_Z15radio_rxhandlerh>
    }
    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS))
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	88 2f       	mov	r24, r24
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	80 72       	andi	r24, 0x20	; 32
    1ca4:	90 70       	andi	r25, 0x00	; 0
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	e9 f0       	breq	.+58     	; 0x1ce4 <_Z11int0handlerv+0x84>
    {
        // if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1caa:	10 92 57 05 	sts	0x0557, r1
        reset_pipe0_address();
    1cae:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZL19reset_pipe0_addressv>
        set_rx_mode();
    1cb2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <_ZL11set_rx_modev>

    	// indicate in the history that a packet was transmitted successfully by appending a 1.
    	tx_history <<= 1;
    1cb6:	80 91 61 03 	lds	r24, 0x0361
    1cba:	90 91 62 03 	lds	r25, 0x0362
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	90 93 62 03 	sts	0x0362, r25
    1cc6:	80 93 61 03 	sts	0x0361, r24
    	tx_history |= 1;
    1cca:	80 91 61 03 	lds	r24, 0x0361
    1cce:	90 91 62 03 	lds	r25, 0x0362
    1cd2:	81 60       	ori	r24, 0x01	; 1
    1cd4:	90 93 62 03 	sts	0x0362, r25
    1cd8:	80 93 61 03 	sts	0x0361, r24

    	tx_last_status = RADIO_TX_SUCCESS;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	80 93 63 03 	sts	0x0363, r24
    1ce2:	21 c0       	rjmp	.+66     	; 0x1d26 <_Z11int0handlerv+0xc6>
    }
    else if (status & _BV(MAX_RT))
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	80 71       	andi	r24, 0x10	; 16
    1cec:	90 70       	andi	r25, 0x00	; 0
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	d1 f0       	breq	.+52     	; 0x1d26 <_Z11int0handlerv+0xc6>
    {
        send_instruction(FLUSH_TX, NULL, NULL, 0);
    1cf2:	81 ee       	ldi	r24, 0xE1	; 225
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL16send_instructionhPhS_h>

    	transmit_lock = 0;
    1d02:	10 92 57 05 	sts	0x0557, r1
    	reset_pipe0_address();
    1d06:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZL19reset_pipe0_addressv>
		set_rx_mode();
    1d0a:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <_ZL11set_rx_modev>
    	// indicate in the history that a packet was dropped by appending a 0.
    	tx_history <<= 1;
    1d0e:	80 91 61 03 	lds	r24, 0x0361
    1d12:	90 91 62 03 	lds	r25, 0x0362
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	90 93 62 03 	sts	0x0362, r25
    1d1e:	80 93 61 03 	sts	0x0361, r24

    	tx_last_status = RADIO_TX_MAX_RT;
    1d22:	10 92 63 03 	sts	0x0363, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1d26:	80 e7       	ldi	r24, 0x70	; 112
    1d28:	8a 83       	std	Y+2, r24	; 0x02
	set_register(STATUS, &status, 1);
    1d2a:	9e 01       	movw	r18, r28
    1d2c:	2e 5f       	subi	r18, 0xFE	; 254
    1d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d30:	87 e0       	ldi	r24, 0x07	; 7
    1d32:	b9 01       	movw	r22, r18
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZL12set_registerhPhh>

    CE_HIGH();
    1d3a:	8b e2       	ldi	r24, 0x2B	; 43
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <_Z10Radio_Initv>:
    // flush the FIFOs in case there are old data in them.
	send_instruction(FLUSH_TX, NULL, NULL, 0);
	send_instruction(FLUSH_RX, NULL, NULL, 0);
}

void Radio_Init()
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	e8 97       	sbiw	r28, 0x38	; 56
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
{
	pinMode(VCC_PIN, OUTPUT);
    1d60:	85 e3       	ldi	r24, 0x35	; 53
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>

	digitalWrite(VCC_PIN, LOW);
    1d68:	85 e3       	ldi	r24, 0x35	; 53
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a8 e4       	ldi	r26, 0x48	; 72
    1d76:	b2 e4       	ldi	r27, 0x42	; 66
    1d78:	8d ab       	std	Y+53, r24	; 0x35
    1d7a:	9e ab       	std	Y+54, r25	; 0x36
    1d7c:	af ab       	std	Y+55, r26	; 0x37
    1d7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6d a9       	ldd	r22, Y+53	; 0x35
    1d82:	7e a9       	ldd	r23, Y+54	; 0x36
    1d84:	8f a9       	ldd	r24, Y+55	; 0x37
    1d86:	98 ad       	ldd	r25, Y+56	; 0x38
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a e7       	ldi	r20, 0x7A	; 122
    1d8e:	55 e4       	ldi	r21, 0x45	; 69
    1d90:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	89 ab       	std	Y+49, r24	; 0x31
    1d9a:	9a ab       	std	Y+50, r25	; 0x32
    1d9c:	ab ab       	std	Y+51, r26	; 0x33
    1d9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1da0:	69 a9       	ldd	r22, Y+49	; 0x31
    1da2:	7a a9       	ldd	r23, Y+50	; 0x32
    1da4:	8b a9       	ldd	r24, Y+51	; 0x33
    1da6:	9c a9       	ldd	r25, Y+52	; 0x34
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <_Z10Radio_Initv+0x76>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	98 ab       	std	Y+48, r25	; 0x30
    1dbe:	8f a7       	std	Y+47, r24	; 0x2f
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <_Z10Radio_Initv+0xf4>
	else if (__tmp > 65535)
    1dc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <_Z10Radio_Initv+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6d a9       	ldd	r22, Y+53	; 0x35
    1ddc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dde:	8f a9       	ldd	r24, Y+55	; 0x37
    1de0:	98 ad       	ldd	r25, Y+56	; 0x38
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	98 ab       	std	Y+48, r25	; 0x30
    1e00:	8f a7       	std	Y+47, r24	; 0x2f
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <_Z10Radio_Initv+0xd6>
    1e04:	80 e9       	ldi	r24, 0x90	; 144
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	9e a7       	std	Y+46, r25	; 0x2e
    1e0a:	8d a7       	std	Y+45, r24	; 0x2d
    1e0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <_Z10Radio_Initv+0xc4>
    1e14:	9e a7       	std	Y+46, r25	; 0x2e
    1e16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	98 ab       	std	Y+48, r25	; 0x30
    1e20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e24:	98 a9       	ldd	r25, Y+48	; 0x30
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <_Z10Radio_Initv+0xb8>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <_Z10Radio_Initv+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e30:	8b a9       	ldd	r24, Y+51	; 0x33
    1e32:	9c a9       	ldd	r25, Y+52	; 0x34
    1e34:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	98 ab       	std	Y+48, r25	; 0x30
    1e3e:	8f a7       	std	Y+47, r24	; 0x2f
    1e40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e42:	98 a9       	ldd	r25, Y+48	; 0x30
    1e44:	9c a7       	std	Y+44, r25	; 0x2c
    1e46:	8b a7       	std	Y+43, r24	; 0x2b
    1e48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <_Z10Radio_Initv+0x100>
    1e50:	9c a7       	std	Y+44, r25	; 0x2c
    1e52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	digitalWrite(VCC_PIN, HIGH);
    1e54:	85 e3       	ldi	r24, 0x35	; 53
    1e56:	61 e0       	ldi	r22, 0x01	; 1
    1e58:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a8 e4       	ldi	r26, 0x48	; 72
    1e62:	b2 e4       	ldi	r27, 0x42	; 66
    1e64:	8f a3       	std	Y+39, r24	; 0x27
    1e66:	98 a7       	std	Y+40, r25	; 0x28
    1e68:	a9 a7       	std	Y+41, r26	; 0x29
    1e6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e70:	89 a5       	ldd	r24, Y+41	; 0x29
    1e72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a e7       	ldi	r20, 0x7A	; 122
    1e7a:	55 e4       	ldi	r21, 0x45	; 69
    1e7c:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8b a3       	std	Y+35, r24	; 0x23
    1e86:	9c a3       	std	Y+36, r25	; 0x24
    1e88:	ad a3       	std	Y+37, r26	; 0x25
    1e8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e90:	8d a1       	ldd	r24, Y+37	; 0x25
    1e92:	9e a1       	ldd	r25, Y+38	; 0x26
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <_Z10Radio_Initv+0x162>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9a a3       	std	Y+34, r25	; 0x22
    1eaa:	89 a3       	std	Y+33, r24	; 0x21
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <_Z10Radio_Initv+0x1e0>
	else if (__tmp > 65535)
    1eae:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <_Z10Radio_Initv+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ecc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9a a3       	std	Y+34, r25	; 0x22
    1eec:	89 a3       	std	Y+33, r24	; 0x21
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <_Z10Radio_Initv+0x1c2>
    1ef0:	80 e9       	ldi	r24, 0x90	; 144
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	98 a3       	std	Y+32, r25	; 0x20
    1ef6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ef8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1efa:	98 a1       	ldd	r25, Y+32	; 0x20
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <_Z10Radio_Initv+0x1b0>
    1f00:	98 a3       	std	Y+32, r25	; 0x20
    1f02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	89 a1       	ldd	r24, Y+33	; 0x21
    1f06:	9a a1       	ldd	r25, Y+34	; 0x22
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9a a3       	std	Y+34, r25	; 0x22
    1f0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f10:	9a a1       	ldd	r25, Y+34	; 0x22
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <_Z10Radio_Initv+0x1a4>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <_Z10Radio_Initv+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f20:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9a a3       	std	Y+34, r25	; 0x22
    1f2a:	89 a3       	std	Y+33, r24	; 0x21
    1f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f30:	9e 8f       	std	Y+30, r25	; 0x1e
    1f32:	8d 8f       	std	Y+29, r24	; 0x1d
    1f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <_Z10Radio_Initv+0x1ec>
    1f3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);

	transmit_lock = 0;
    1f40:	10 92 57 05 	sts	0x0557, r1

	// disable radio during config
	CE_LOW();
    1f44:	8b e2       	ldi	r24, 0x2B	; 43
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	// set as output AT90 pins connected to the radio's slave select and chip enable pins.
	//CE_DDR |= _BV(CE_PIN);
	//CSN_DDR |= _BV(CSN_PIN);
	pinMode(CE_PIN, OUTPUT);
    1f4c:	8b e2       	ldi	r24, 0x2B	; 43
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	pinMode(CSN_PIN, OUTPUT);
    1f54:	8a e2       	ldi	r24, 0x2A	; 42
    1f56:	61 e0       	ldi	r22, 0x01	; 1
    1f58:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	// Enable radio interrupt.  This interrupt is triggered when data are received and when a transmission completes.
	/*DDRE &= ~_BV(PORTE7);
	EICRB |= _BV(ISC71);
	EICRB &= ~_BV(ISC70);
	EIMSK |= _BV(INT7);*/
	attachInterrupt(4, int0handler, LOW);
    1f5c:	20 e3       	ldi	r18, 0x30	; 48
    1f5e:	3e e0       	ldi	r19, 0x0E	; 14
    1f60:	84 e0       	ldi	r24, 0x04	; 4
    1f62:	b9 01       	movw	r22, r18
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	50 e0       	ldi	r21, 0x00	; 0
    1f68:	0e 94 b6 21 	call	0x436c	; 0x436c <attachInterrupt>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 e3       	ldi	r26, 0x30	; 48
    1f72:	b1 e4       	ldi	r27, 0x41	; 65
    1f74:	89 8f       	std	Y+25, r24	; 0x19
    1f76:	9a 8f       	std	Y+26, r25	; 0x1a
    1f78:	ab 8f       	std	Y+27, r26	; 0x1b
    1f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a e7       	ldi	r20, 0x7A	; 122
    1f8a:	55 e4       	ldi	r21, 0x45	; 69
    1f8c:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	8d 8b       	std	Y+21, r24	; 0x15
    1f96:	9e 8b       	std	Y+22, r25	; 0x16
    1f98:	af 8b       	std	Y+23, r26	; 0x17
    1f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <_Z10Radio_Initv+0x272>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9c 8b       	std	Y+20, r25	; 0x14
    1fba:	8b 8b       	std	Y+19, r24	; 0x13
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <_Z10Radio_Initv+0x2f0>
	else if (__tmp > 65535)
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	57 e4       	ldi	r21, 0x47	; 71
    1fce:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f5       	brge	.+82     	; 0x2028 <_Z10Radio_Initv+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9c 8b       	std	Y+20, r25	; 0x14
    1ffc:	8b 8b       	std	Y+19, r24	; 0x13
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <_Z10Radio_Initv+0x2d2>
    2000:	80 e9       	ldi	r24, 0x90	; 144
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	9a 8b       	std	Y+18, r25	; 0x12
    2006:	89 8b       	std	Y+17, r24	; 0x11
    2008:	89 89       	ldd	r24, Y+17	; 0x11
    200a:	9a 89       	ldd	r25, Y+18	; 0x12
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <_Z10Radio_Initv+0x2c0>
    2010:	9a 8b       	std	Y+18, r25	; 0x12
    2012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	8b 89       	ldd	r24, Y+19	; 0x13
    2016:	9c 89       	ldd	r25, Y+20	; 0x14
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9c 8b       	std	Y+20, r25	; 0x14
    201c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	8b 89       	ldd	r24, Y+19	; 0x13
    2020:	9c 89       	ldd	r25, Y+20	; 0x14
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <_Z10Radio_Initv+0x2b4>
    2026:	14 c0       	rjmp	.+40     	; 0x2050 <_Z10Radio_Initv+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	6d 89       	ldd	r22, Y+21	; 0x15
    202a:	7e 89       	ldd	r23, Y+22	; 0x16
    202c:	8f 89       	ldd	r24, Y+23	; 0x17
    202e:	98 8d       	ldd	r25, Y+24	; 0x18
    2030:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9c 8b       	std	Y+20, r25	; 0x14
    203a:	8b 8b       	std	Y+19, r24	; 0x13
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	98 8b       	std	Y+16, r25	; 0x10
    2042:	8f 87       	std	Y+15, r24	; 0x0f
    2044:	8f 85       	ldd	r24, Y+15	; 0x0f
    2046:	98 89       	ldd	r25, Y+16	; 0x10
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <_Z10Radio_Initv+0x2fc>
    204c:	98 8b       	std	Y+16, r25	; 0x10
    204e:	8f 87       	std	Y+15, r24	; 0x0f

	// A 10.3 ms delay is required between power off and power on states (controlled by 3.3 V supply).
	_delay_ms(11);

	// Configure the radio registers that are not application-dependent.
	configure_registers();
    2050:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZL19configure_registersv>
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	a0 e0       	ldi	r26, 0x00	; 0
    205a:	b0 e4       	ldi	r27, 0x40	; 64
    205c:	8b 87       	std	Y+11, r24	; 0x0b
    205e:	9c 87       	std	Y+12, r25	; 0x0c
    2060:	ad 87       	std	Y+13, r26	; 0x0d
    2062:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2064:	6b 85       	ldd	r22, Y+11	; 0x0b
    2066:	7c 85       	ldd	r23, Y+12	; 0x0c
    2068:	8d 85       	ldd	r24, Y+13	; 0x0d
    206a:	9e 85       	ldd	r25, Y+14	; 0x0e
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	4a e7       	ldi	r20, 0x7A	; 122
    2072:	55 e4       	ldi	r21, 0x45	; 69
    2074:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	8f 83       	std	Y+7, r24	; 0x07
    207e:	98 87       	std	Y+8, r25	; 0x08
    2080:	a9 87       	std	Y+9, r26	; 0x09
    2082:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e8       	ldi	r20, 0x80	; 128
    2092:	5f e3       	ldi	r21, 0x3F	; 63
    2094:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    2098:	88 23       	and	r24, r24
    209a:	2c f4       	brge	.+10     	; 0x20a6 <_Z10Radio_Initv+0x35a>
		__ticks = 1;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	3f c0       	rjmp	.+126    	; 0x2124 <_Z10Radio_Initv+0x3d8>
	else if (__tmp > 65535)
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	3f ef       	ldi	r19, 0xFF	; 255
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	57 e4       	ldi	r21, 0x47	; 71
    20b6:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	4c f5       	brge	.+82     	; 0x2110 <_Z10Radio_Initv+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20be:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e2       	ldi	r20, 0x20	; 32
    20cc:	51 e4       	ldi	r21, 0x41	; 65
    20ce:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	bc 01       	movw	r22, r24
    20d8:	cd 01       	movw	r24, r26
    20da:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	0f c0       	rjmp	.+30     	; 0x2106 <_Z10Radio_Initv+0x3ba>
    20e8:	80 e9       	ldi	r24, 0x90	; 144
    20ea:	91 e0       	ldi	r25, 0x01	; 1
    20ec:	9c 83       	std	Y+4, r25	; 0x04
    20ee:	8b 83       	std	Y+3, r24	; 0x03
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <_Z10Radio_Initv+0x3a8>
    20f8:	9c 83       	std	Y+4, r25	; 0x04
    20fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	69 f7       	brne	.-38     	; 0x20e8 <_Z10Radio_Initv+0x39c>
    210e:	14 c0       	rjmp	.+40     	; 0x2138 <_Z10Radio_Initv+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	9a 81       	ldd	r25, Y+2	; 0x02
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <_Z10Radio_Initv+0x3e4>
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01

	// A 1.5 ms delay is required between power down and power up states (controlled by PWR_UP bit in CONFIG)
	_delay_ms(2);

	// enable radio as a receiver
	CE_HIGH();
    2138:	8b e2       	ldi	r24, 0x2B	; 43
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
}
    2140:	e8 96       	adiw	r28, 0x38	; 56
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <_Z19SPI_ReadWrite_BlockPhS_h>:

	//SPI_PORT &= ~_BV(SPI_SS);
	digitalWrite(SS, LOW);
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	27 97       	sbiw	r28, 0x07	; 7
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	9b 83       	std	Y+3, r25	; 0x03
    2168:	8a 83       	std	Y+2, r24	; 0x02
    216a:	7d 83       	std	Y+5, r23	; 0x05
    216c:	6c 83       	std	Y+4, r22	; 0x04
    216e:	4e 83       	std	Y+6, r20	; 0x06
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    2170:	19 82       	std	Y+1, r1	; 0x01
    2172:	26 c0       	rjmp	.+76     	; 0x21c0 <_Z19SPI_ReadWrite_BlockPhS_h+0x6e>
          SPDR = data[i];
    2174:	ae e4       	ldi	r26, 0x4E	; 78
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	9b 81       	ldd	r25, Y+3	; 0x03
    2182:	fc 01       	movw	r30, r24
    2184:	e2 0f       	add	r30, r18
    2186:	f3 1f       	adc	r31, r19
    2188:	80 81       	ld	r24, Z
    218a:	8c 93       	st	X, r24
          SPI_WAIT();
    218c:	ed e4       	ldi	r30, 0x4D	; 77
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	1f 82       	std	Y+7, r1	; 0x07
    2194:	88 23       	and	r24, r24
    2196:	14 f0       	brlt	.+4      	; 0x219c <_Z19SPI_ReadWrite_BlockPhS_h+0x4a>
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	8f 83       	std	Y+7, r24	; 0x07
    219c:	8f 81       	ldd	r24, Y+7	; 0x07
    219e:	88 23       	and	r24, r24
    21a0:	a9 f7       	brne	.-22     	; 0x218c <_Z19SPI_ReadWrite_BlockPhS_h+0x3a>
          buffer[i] = SPDR;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	8c 81       	ldd	r24, Y+4	; 0x04
    21aa:	9d 81       	ldd	r25, Y+5	; 0x05
    21ac:	dc 01       	movw	r26, r24
    21ae:	a2 0f       	add	r26, r18
    21b0:	b3 1f       	adc	r27, r19
    21b2:	ee e4       	ldi	r30, 0x4E	; 78
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	8c 93       	st	X, r24
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	99 81       	ldd	r25, Y+1	; 0x01
    21c2:	8e 81       	ldd	r24, Y+6	; 0x06
    21c4:	98 17       	cp	r25, r24
    21c6:	b0 f2       	brcs	.-84     	; 0x2174 <_Z19SPI_ReadWrite_BlockPhS_h+0x22>
          SPDR = data[i];
          SPI_WAIT();
          buffer[i] = SPDR;
    }
}
    21c8:	27 96       	adiw	r28, 0x07	; 7
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <_Z15SPI_Write_BlockPhh>:

void SPI_Write_Block(uint8_t* data, uint8_t len)
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <_Z15SPI_Write_BlockPhh+0x6>
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <_Z15SPI_Write_BlockPhh+0x8>
    21e2:	0f 92       	push	r0
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	9b 83       	std	Y+3, r25	; 0x03
    21ea:	8a 83       	std	Y+2, r24	; 0x02
    21ec:	6c 83       	std	Y+4, r22	; 0x04
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    21ee:	19 82       	std	Y+1, r1	; 0x01
    21f0:	1a c0       	rjmp	.+52     	; 0x2226 <__stack+0x27>
          SPDR = data[i];
    21f2:	ae e4       	ldi	r26, 0x4E	; 78
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	fc 01       	movw	r30, r24
    2202:	e2 0f       	add	r30, r18
    2204:	f3 1f       	adc	r31, r19
    2206:	80 81       	ld	r24, Z
    2208:	8c 93       	st	X, r24
          SPI_WAIT();
    220a:	ed e4       	ldi	r30, 0x4D	; 77
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	1d 82       	std	Y+5, r1	; 0x05
    2212:	88 23       	and	r24, r24
    2214:	14 f0       	brlt	.+4      	; 0x221a <__stack+0x1b>
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	8d 83       	std	Y+5, r24	; 0x05
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	88 23       	and	r24, r24
    221e:	a9 f7       	brne	.-22     	; 0x220a <__stack+0xb>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	8f 5f       	subi	r24, 0xFF	; 255
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	99 81       	ldd	r25, Y+1	; 0x01
    2228:	8c 81       	ldd	r24, Y+4	; 0x04
    222a:	98 17       	cp	r25, r24
    222c:	10 f3       	brcs	.-60     	; 0x21f2 <_Z15SPI_Write_BlockPhh+0x18>
          SPDR = data[i];
          SPI_WAIT();
    }
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <_Z14SPI_Write_Byteh>:

uint8_t SPI_Write_Byte(uint8_t byte)
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	00 d0       	rcall	.+0      	; 0x2244 <_Z14SPI_Write_Byteh+0x6>
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	89 83       	std	Y+1, r24	; 0x01
{
    SPDR = byte;
    224a:	ee e4       	ldi	r30, 0x4E	; 78
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	80 83       	st	Z, r24
    SPI_WAIT();
    2252:	ed e4       	ldi	r30, 0x4D	; 77
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	1a 82       	std	Y+2, r1	; 0x02
    225a:	88 23       	and	r24, r24
    225c:	14 f0       	brlt	.+4      	; 0x2262 <_Z14SPI_Write_Byteh+0x24>
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	8a 83       	std	Y+2, r24	; 0x02
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	88 23       	and	r24, r24
    2266:	a9 f7       	brne	.-22     	; 0x2252 <_Z14SPI_Write_Byteh+0x14>
    return SPDR;
    2268:	ee e4       	ldi	r30, 0x4E	; 78
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <_Z8SPI_Initv>:
#define SS 53

// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void SPI_Init()
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
	// The DDR operations are pretty fragile and doing this less awkwardly breaks SPI.  I don't care enough
	// to figure out why right now.  Note that SPI_SS is the actual SPI port's SS pin, which is not necessarily
	// the SS pin that's used for a given slave.  Anything that uses this driver must handle its own slave selection.
	// It must set its SS pin direction to output, set the pin low before doing an SPI operation, and set it high
	// when the SPI operation is complete.
	pinMode(MOSI, OUTPUT);
    2280:	83 e3       	ldi	r24, 0x33	; 51
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	pinMode(MISO, INPUT);
    2288:	82 e3       	ldi	r24, 0x32	; 50
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	pinMode(SCK, OUTPUT);
    2290:	84 e3       	ldi	r24, 0x34	; 52
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	pinMode(SS, OUTPUT);
    2298:	85 e3       	ldi	r24, 0x35	; 53
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
	 * bit 0
	 */

    // Set the AT90's SS pin high during config (this disables the Flash RAM or something)
    //SPI_PORT |= _BV(SPI_SS);
	digitalWrite(SS, HIGH);
    22a0:	85 e3       	ldi	r24, 0x35	; 53
    22a2:	61 e0       	ldi	r22, 0x01	; 1
    22a4:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>

	SPCR = _BV(SPE) | _BV(MSTR);	// enable SPI, set as master, set prescaler to f(osc)/4
    22a8:	ec e4       	ldi	r30, 0x4C	; 76
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 e5       	ldi	r24, 0x50	; 80
    22ae:	80 83       	st	Z, r24

	//SPSR = _BV(SPI2X);							// Double SCK to f(osc)/2 (4 MHz)

	//SPI_PORT &= ~_BV(SPI_SS);
	digitalWrite(SS, LOW);
    22b0:	85 e3       	ldi	r24, 0x35	; 53
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
}
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <_ZL4idlev>:
 * FUNCTIONS
 */
/**
 *  @brief The idle task does nothing but busy loop.
 */
static void idle (void)
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	ff cf       	rjmp	.-2      	; 0x22c6 <_ZL4idlev+0x8>

000022c8 <_ZL11exit_kernelv>:
{
    /*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
     SAVE_CTX();
    22c8:	ff 93       	push	r31
    22ca:	ff b7       	in	r31, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	ff 93       	push	r31
    22d0:	ef 93       	push	r30
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	bf 93       	push	r27
    22d8:	af 93       	push	r26
    22da:	9f 93       	push	r25
    22dc:	8f 93       	push	r24
    22de:	7f 93       	push	r23
    22e0:	6f 93       	push	r22
    22e2:	5f 93       	push	r21
    22e4:	4f 93       	push	r20
    22e6:	3f 93       	push	r19
    22e8:	2f 93       	push	r18
    22ea:	1f 93       	push	r17
    22ec:	0f 93       	push	r16
    22ee:	ff 92       	push	r15
    22f0:	ef 92       	push	r14
    22f2:	df 92       	push	r13
    22f4:	cf 92       	push	r12
    22f6:	bf 92       	push	r11
    22f8:	af 92       	push	r10
    22fa:	9f 92       	push	r9
    22fc:	8f 92       	push	r8
    22fe:	7f 92       	push	r7
    2300:	6f 92       	push	r6
    2302:	5f 92       	push	r5
    2304:	4f 92       	push	r4
    2306:	3f 92       	push	r3
    2308:	2f 92       	push	r2
    230a:	1f 92       	push	r1
    230c:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    kernel_sp = SP;
    230e:	ed e5       	ldi	r30, 0x5D	; 93
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	90 93 03 0f 	sts	0x0F03, r25
    231a:	80 93 02 0f 	sts	0x0F02, r24

    /*
     * Now restore the task's context, SP first.
     */
    SP = (uint16_t)(cur_task->sp);
    231e:	ad e5       	ldi	r26, 0x5D	; 93
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	80 91 5b 05 	lds	r24, 0x055B
    2326:	90 91 5c 05 	lds	r25, 0x055C
    232a:	fc 01       	movw	r30, r24
    232c:	e0 50       	subi	r30, 0x00	; 0
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	11 96       	adiw	r26, 0x01	; 1
    2336:	9c 93       	st	X, r25
    2338:	8e 93       	st	-X, r24

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    233a:	0f 90       	pop	r0
    233c:	1f 90       	pop	r1
    233e:	2f 90       	pop	r2
    2340:	3f 90       	pop	r3
    2342:	4f 90       	pop	r4
    2344:	5f 90       	pop	r5
    2346:	6f 90       	pop	r6
    2348:	7f 90       	pop	r7
    234a:	8f 90       	pop	r8
    234c:	9f 90       	pop	r9
    234e:	af 90       	pop	r10
    2350:	bf 90       	pop	r11
    2352:	cf 90       	pop	r12
    2354:	df 90       	pop	r13
    2356:	ef 90       	pop	r14
    2358:	ff 90       	pop	r15
    235a:	0f 91       	pop	r16
    235c:	1f 91       	pop	r17
    235e:	2f 91       	pop	r18
    2360:	3f 91       	pop	r19
    2362:	4f 91       	pop	r20
    2364:	5f 91       	pop	r21
    2366:	6f 91       	pop	r22
    2368:	7f 91       	pop	r23
    236a:	8f 91       	pop	r24
    236c:	9f 91       	pop	r25
    236e:	af 91       	pop	r26
    2370:	bf 91       	pop	r27
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	ef 91       	pop	r30
    2378:	ff 91       	pop	r31
    237a:	ff bf       	out	0x3f, r31	; 63
    237c:	ff 91       	pop	r31
     * enable them here.
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
    237e:	08 95       	ret

00002380 <_ZL12enter_kernelv>:
{
    /*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
    SAVE_CTX();
    2380:	ff 93       	push	r31
    2382:	ff b7       	in	r31, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	ff 93       	push	r31
    2388:	ef 93       	push	r30
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	bf 93       	push	r27
    2390:	af 93       	push	r26
    2392:	9f 93       	push	r25
    2394:	8f 93       	push	r24
    2396:	7f 93       	push	r23
    2398:	6f 93       	push	r22
    239a:	5f 93       	push	r21
    239c:	4f 93       	push	r20
    239e:	3f 93       	push	r19
    23a0:	2f 93       	push	r18
    23a2:	1f 93       	push	r17
    23a4:	0f 93       	push	r16
    23a6:	ff 92       	push	r15
    23a8:	ef 92       	push	r14
    23aa:	df 92       	push	r13
    23ac:	cf 92       	push	r12
    23ae:	bf 92       	push	r11
    23b0:	af 92       	push	r10
    23b2:	9f 92       	push	r9
    23b4:	8f 92       	push	r8
    23b6:	7f 92       	push	r7
    23b8:	6f 92       	push	r6
    23ba:	5f 92       	push	r5
    23bc:	4f 92       	push	r4
    23be:	3f 92       	push	r3
    23c0:	2f 92       	push	r2
    23c2:	1f 92       	push	r1
    23c4:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    cur_task->sp = (uint8_t*)SP;
    23c6:	20 91 5b 05 	lds	r18, 0x055B
    23ca:	30 91 5c 05 	lds	r19, 0x055C
    23ce:	ed e5       	ldi	r30, 0x5D	; 93
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	91 81       	ldd	r25, Z+1	; 0x01
    23d6:	f9 01       	movw	r30, r18
    23d8:	e0 50       	subi	r30, 0x00	; 0
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	80 83       	st	Z, r24

    /*
     * Now restore the kernel's context, SP first.
     */
    SP = kernel_sp;
    23e0:	ed e5       	ldi	r30, 0x5D	; 93
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 91 02 0f 	lds	r24, 0x0F02
    23e8:	90 91 03 0f 	lds	r25, 0x0F03
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    23f0:	0f 90       	pop	r0
    23f2:	1f 90       	pop	r1
    23f4:	2f 90       	pop	r2
    23f6:	3f 90       	pop	r3
    23f8:	4f 90       	pop	r4
    23fa:	5f 90       	pop	r5
    23fc:	6f 90       	pop	r6
    23fe:	7f 90       	pop	r7
    2400:	8f 90       	pop	r8
    2402:	9f 90       	pop	r9
    2404:	af 90       	pop	r10
    2406:	bf 90       	pop	r11
    2408:	cf 90       	pop	r12
    240a:	df 90       	pop	r13
    240c:	ef 90       	pop	r14
    240e:	ff 90       	pop	r15
    2410:	0f 91       	pop	r16
    2412:	1f 91       	pop	r17
    2414:	2f 91       	pop	r18
    2416:	3f 91       	pop	r19
    2418:	4f 91       	pop	r20
    241a:	5f 91       	pop	r21
    241c:	6f 91       	pop	r22
    241e:	7f 91       	pop	r23
    2420:	8f 91       	pop	r24
    2422:	9f 91       	pop	r25
    2424:	af 91       	pop	r26
    2426:	bf 91       	pop	r27
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	ef 91       	pop	r30
    242e:	ff 91       	pop	r31
    2430:	ff bf       	out	0x3f, r31	; 63
    2432:	ff 91       	pop	r31
     * return explicitly required as we are "naked".
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
    2434:	08 95       	ret

00002436 <__vector_17>:
     * of SREG. We know it should have interrupts enabled because this
     * ISR was able to execute, but it has interrupts disabled because
     * it was stored while this ISR was executing. So we set the bit (I = bit 7)
     * in the stored value.
     */
    SAVE_CTX_TOP();
    2436:	ff 93       	push	r31
    2438:	ff b7       	in	r31, 0x3f	; 63
    243a:	f8 94       	cli

    STACK_SREG_SET_I_BIT();
    243c:	f0 68       	ori	r31, 0x80	; 128

    SAVE_CTX_BOTTOM();
    243e:	ff 93       	push	r31
    2440:	ef 93       	push	r30
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	bf 93       	push	r27
    2448:	af 93       	push	r26
    244a:	9f 93       	push	r25
    244c:	8f 93       	push	r24
    244e:	7f 93       	push	r23
    2450:	6f 93       	push	r22
    2452:	5f 93       	push	r21
    2454:	4f 93       	push	r20
    2456:	3f 93       	push	r19
    2458:	2f 93       	push	r18
    245a:	1f 93       	push	r17
    245c:	0f 93       	push	r16
    245e:	ff 92       	push	r15
    2460:	ef 92       	push	r14
    2462:	df 92       	push	r13
    2464:	cf 92       	push	r12
    2466:	bf 92       	push	r11
    2468:	af 92       	push	r10
    246a:	9f 92       	push	r9
    246c:	8f 92       	push	r8
    246e:	7f 92       	push	r7
    2470:	6f 92       	push	r6
    2472:	5f 92       	push	r5
    2474:	4f 92       	push	r4
    2476:	3f 92       	push	r3
    2478:	2f 92       	push	r2
    247a:	1f 92       	push	r1
    247c:	0f 92       	push	r0

    cur_task->sp = (uint8_t*)SP;
    247e:	20 91 5b 05 	lds	r18, 0x055B
    2482:	30 91 5c 05 	lds	r19, 0x055C
    2486:	ed e5       	ldi	r30, 0x5D	; 93
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	f9 01       	movw	r30, r18
    2490:	e0 50       	subi	r30, 0x00	; 0
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
    /*
     * Now that we already saved a copy of the stack pointer
     * for every context including the kernel, we can move to
     * the kernel stack and use it. We will restore it again later.
     */
    SP = kernel_sp;
    2498:	ed e5       	ldi	r30, 0x5D	; 93
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 91 02 0f 	lds	r24, 0x0F02
    24a0:	90 91 03 0f 	lds	r25, 0x0F03
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	80 83       	st	Z, r24

    /*
     * Inform the kernel that this task was interrupted.
     */
    kernel_request = TIMER_EXPIRED;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	80 93 58 05 	sts	0x0558, r24

    /*
     * Prepare for next tick interrupt.
     */
    OCR1A += TICK_CYCLES;
    24ae:	a8 e8       	ldi	r26, 0x88	; 136
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e8 e8       	ldi	r30, 0x88	; 136
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	91 81       	ldd	r25, Z+1	; 0x01
    24ba:	80 5f       	subi	r24, 0xF0	; 240
    24bc:	98 4d       	sbci	r25, 0xD8	; 216
    24be:	11 96       	adiw	r26, 0x01	; 1
    24c0:	9c 93       	st	X, r25
    24c2:	8e 93       	st	-X, r24

    /*
     * Restore the kernel context. (The stack pointer is restored again.)
     */
    SP = kernel_sp;
    24c4:	ed e5       	ldi	r30, 0x5D	; 93
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 91 02 0f 	lds	r24, 0x0F02
    24cc:	90 91 03 0f 	lds	r25, 0x0F03
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    24d4:	0f 90       	pop	r0
    24d6:	1f 90       	pop	r1
    24d8:	2f 90       	pop	r2
    24da:	3f 90       	pop	r3
    24dc:	4f 90       	pop	r4
    24de:	5f 90       	pop	r5
    24e0:	6f 90       	pop	r6
    24e2:	7f 90       	pop	r7
    24e4:	8f 90       	pop	r8
    24e6:	9f 90       	pop	r9
    24e8:	af 90       	pop	r10
    24ea:	bf 90       	pop	r11
    24ec:	cf 90       	pop	r12
    24ee:	df 90       	pop	r13
    24f0:	ef 90       	pop	r14
    24f2:	ff 90       	pop	r15
    24f4:	0f 91       	pop	r16
    24f6:	1f 91       	pop	r17
    24f8:	2f 91       	pop	r18
    24fa:	3f 91       	pop	r19
    24fc:	4f 91       	pop	r20
    24fe:	5f 91       	pop	r21
    2500:	6f 91       	pop	r22
    2502:	7f 91       	pop	r23
    2504:	8f 91       	pop	r24
    2506:	9f 91       	pop	r25
    2508:	af 91       	pop	r26
    250a:	bf 91       	pop	r27
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	ef 91       	pop	r30
    2512:	ff 91       	pop	r31
    2514:	ff bf       	out	0x3f, r31	; 63
    2516:	ff 91       	pop	r31
     * Explilictly required as we are "naked".
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
    2518:	08 95       	ret

0000251a <_ZL7enqueueP7queue_tP9td_struct>:
 * @brief Add a task the head of the queue
 *
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <_ZL7enqueueP7queue_tP9td_struct+0x6>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <_ZL7enqueueP7queue_tP9td_struct+0x8>
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	7c 83       	std	Y+4, r23	; 0x04
    252c:	6b 83       	std	Y+3, r22	; 0x03
{
    task_to_add->next = NULL;
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	fc 01       	movw	r30, r24
    2534:	e9 5f       	subi	r30, 0xF9	; 249
    2536:	fe 4f       	sbci	r31, 0xFE	; 254
    2538:	11 82       	std	Z+1, r1	; 0x01
    253a:	10 82       	st	Z, r1

    if(queue_ptr->head == NULL)
    253c:	e9 81       	ldd	r30, Y+1	; 0x01
    253e:	fa 81       	ldd	r31, Y+2	; 0x02
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	69 f4       	brne	.+26     	; 0x2562 <_ZL7enqueueP7queue_tP9td_struct+0x48>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    2548:	e9 81       	ldd	r30, Y+1	; 0x01
    254a:	fa 81       	ldd	r31, Y+2	; 0x02
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	80 83       	st	Z, r24
        queue_ptr->tail = task_to_add;
    2554:	e9 81       	ldd	r30, Y+1	; 0x01
    2556:	fa 81       	ldd	r31, Y+2	; 0x02
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	93 83       	std	Z+3, r25	; 0x03
    255e:	82 83       	std	Z+2, r24	; 0x02
    2560:	11 c0       	rjmp	.+34     	; 0x2584 <_ZL7enqueueP7queue_tP9td_struct+0x6a>
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    2562:	e9 81       	ldd	r30, Y+1	; 0x01
    2564:	fa 81       	ldd	r31, Y+2	; 0x02
    2566:	82 81       	ldd	r24, Z+2	; 0x02
    2568:	93 81       	ldd	r25, Z+3	; 0x03
    256a:	fc 01       	movw	r30, r24
    256c:	e9 5f       	subi	r30, 0xF9	; 249
    256e:	fe 4f       	sbci	r31, 0xFE	; 254
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
        queue_ptr->tail = task_to_add;
    2578:	e9 81       	ldd	r30, Y+1	; 0x01
    257a:	fa 81       	ldd	r31, Y+2	; 0x02
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	93 83       	std	Z+3, r25	; 0x03
    2582:	82 83       	std	Z+2, r24	; 0x02
    }
}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <_ZL21kernel_terminate_taskv>:


/**
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
    259a:	80 91 5b 05 	lds	r24, 0x055B
    259e:	90 91 5c 05 	lds	r25, 0x055C
    25a2:	fc 01       	movw	r30, r24
    25a4:	ed 5f       	subi	r30, 0xFD	; 253
    25a6:	fe 4f       	sbci	r31, 0xFE	; 254
    25a8:	10 82       	st	Z, r1
    if(cur_task->level == PERIODIC)
    25aa:	80 91 5b 05 	lds	r24, 0x055B
    25ae:	90 91 5c 05 	lds	r25, 0x055C
    25b2:	fc 01       	movw	r30, r24
    25b4:	ea 5f       	subi	r30, 0xFA	; 250
    25b6:	fe 4f       	sbci	r31, 0xFE	; 254
    25b8:	80 81       	ld	r24, Z
    25ba:	82 30       	cpi	r24, 0x02	; 2
    25bc:	89 f4       	brne	.+34     	; 0x25e0 <_ZL21kernel_terminate_taskv+0x4e>
    {
        name_to_task_ptr[cur_task->name] = NULL;
    25be:	80 91 5b 05 	lds	r24, 0x055B
    25c2:	90 91 5c 05 	lds	r25, 0x055C
    25c6:	fc 01       	movw	r30, r24
    25c8:	ee 5f       	subi	r30, 0xFE	; 254
    25ca:	fe 4f       	sbci	r31, 0xFE	; 254
    25cc:	80 81       	ld	r24, Z
    25ce:	88 2f       	mov	r24, r24
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	fc 01       	movw	r30, r24
    25d8:	ea 54       	subi	r30, 0x4A	; 74
    25da:	f1 4f       	sbci	r31, 0xF1	; 241
    25dc:	11 82       	std	Z+1, r1	; 0x01
    25de:	10 82       	st	Z, r1
    }
    enqueue(&dead_pool_queue, cur_task);
    25e0:	20 91 5b 05 	lds	r18, 0x055B
    25e4:	30 91 5c 05 	lds	r19, 0x055C
    25e8:	88 ec       	ldi	r24, 0xC8	; 200
    25ea:	9e e0       	ldi	r25, 0x0E	; 14
    25ec:	b9 01       	movw	r22, r18
    25ee:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
}
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <_ZL7dequeueP7queue_t>:
 * @brief Pops head of queue and returns it.
 *
 * @param queue_ptr the queue to pop
 * @return the popped task descriptor
 */
static task_descriptor_t* dequeue(queue_t* queue_ptr)
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <_ZL7dequeueP7queue_t+0x6>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <_ZL7dequeueP7queue_t+0x8>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
{
    task_descriptor_t* task_ptr = queue_ptr->head;
    2608:	eb 81       	ldd	r30, Y+3	; 0x03
    260a:	fc 81       	ldd	r31, Y+4	; 0x04
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01

    if(queue_ptr->head != NULL)
    2614:	eb 81       	ldd	r30, Y+3	; 0x03
    2616:	fc 81       	ldd	r31, Y+4	; 0x04
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	a1 f0       	breq	.+40     	; 0x2648 <_ZL7dequeueP7queue_t+0x50>
    {
        queue_ptr->head = queue_ptr->head->next;
    2620:	eb 81       	ldd	r30, Y+3	; 0x03
    2622:	fc 81       	ldd	r31, Y+4	; 0x04
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	fc 01       	movw	r30, r24
    262a:	e9 5f       	subi	r30, 0xF9	; 249
    262c:	fe 4f       	sbci	r31, 0xFE	; 254
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	eb 81       	ldd	r30, Y+3	; 0x03
    2634:	fc 81       	ldd	r31, Y+4	; 0x04
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
        task_ptr->next = NULL;
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	fc 01       	movw	r30, r24
    2640:	e9 5f       	subi	r30, 0xF9	; 249
    2642:	fe 4f       	sbci	r31, 0xFE	; 254
    2644:	11 82       	std	Z+1, r1	; 0x01
    2646:	10 82       	st	Z, r1
    }

    return task_ptr;
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <_ZL15kernel_dispatchv>:
 *@brief The second part of the scheduler.
 *
 * Chooses the next task to run.
 *
 */
static void kernel_dispatch(void)
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    2662:	80 91 5b 05 	lds	r24, 0x055B
    2666:	90 91 5c 05 	lds	r25, 0x055C
    266a:	fc 01       	movw	r30, r24
    266c:	ed 5f       	subi	r30, 0xFD	; 253
    266e:	fe 4f       	sbci	r31, 0xFE	; 254
    2670:	80 81       	ld	r24, Z
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	61 f4       	brne	.+24     	; 0x268e <_ZL15kernel_dispatchv+0x34>
    2676:	20 91 5b 05 	lds	r18, 0x055B
    267a:	30 91 5c 05 	lds	r19, 0x055C
    267e:	80 91 75 03 	lds	r24, 0x0375
    2682:	90 91 76 03 	lds	r25, 0x0376
    2686:	28 17       	cp	r18, r24
    2688:	39 07       	cpc	r19, r25
    268a:	09 f0       	breq	.+2      	; 0x268e <_ZL15kernel_dispatchv+0x34>
    268c:	62 c0       	rjmp	.+196    	; 0x2752 <_ZL15kernel_dispatchv+0xf8>
    {
		if(system_queue.head != NULL)
    268e:	80 91 cc 0e 	lds	r24, 0x0ECC
    2692:	90 91 cd 0e 	lds	r25, 0x0ECD
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	49 f0       	breq	.+18     	; 0x26ac <_ZL15kernel_dispatchv+0x52>
        {
            cur_task = dequeue(&system_queue);
    269a:	8c ec       	ldi	r24, 0xCC	; 204
    269c:	9e e0       	ldi	r25, 0x0E	; 14
    269e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZL7dequeueP7queue_t>
    26a2:	90 93 5c 05 	sts	0x055C, r25
    26a6:	80 93 5b 05 	sts	0x055B, r24
    26aa:	4a c0       	rjmp	.+148    	; 0x2740 <_ZL15kernel_dispatchv+0xe6>
        }
        else if(!slot_task_finished && PT > 0 && name_to_task_ptr[PPP[slot_name_index]] != NULL)
    26ac:	80 91 da 0e 	lds	r24, 0x0EDA
    26b0:	88 23       	and	r24, r24
    26b2:	79 f5       	brne	.+94     	; 0x2712 <_ZL15kernel_dispatchv+0xb8>
    26b4:	80 91 8f 02 	lds	r24, 0x028F
    26b8:	90 91 90 02 	lds	r25, 0x0290
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	49 f1       	breq	.+82     	; 0x2712 <_ZL15kernel_dispatchv+0xb8>
    26c0:	80 91 db 0e 	lds	r24, 0x0EDB
    26c4:	90 91 dc 0e 	lds	r25, 0x0EDC
    26c8:	fc 01       	movw	r30, r24
    26ca:	eb 57       	subi	r30, 0x7B	; 123
    26cc:	fd 4f       	sbci	r31, 0xFD	; 253
    26ce:	80 81       	ld	r24, Z
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	fc 01       	movw	r30, r24
    26da:	ea 54       	subi	r30, 0x4A	; 74
    26dc:	f1 4f       	sbci	r31, 0xF1	; 241
    26de:	80 81       	ld	r24, Z
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	b1 f0       	breq	.+44     	; 0x2712 <_ZL15kernel_dispatchv+0xb8>
        {
            /* Keep running the current PERIODIC task. */
            cur_task = name_to_task_ptr[PPP[slot_name_index]];
    26e6:	80 91 db 0e 	lds	r24, 0x0EDB
    26ea:	90 91 dc 0e 	lds	r25, 0x0EDC
    26ee:	fc 01       	movw	r30, r24
    26f0:	eb 57       	subi	r30, 0x7B	; 123
    26f2:	fd 4f       	sbci	r31, 0xFD	; 253
    26f4:	80 81       	ld	r24, Z
    26f6:	88 2f       	mov	r24, r24
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	fc 01       	movw	r30, r24
    2700:	ea 54       	subi	r30, 0x4A	; 74
    2702:	f1 4f       	sbci	r31, 0xF1	; 241
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	90 93 5c 05 	sts	0x055C, r25
    270c:	80 93 5b 05 	sts	0x055B, r24
    2710:	17 c0       	rjmp	.+46     	; 0x2740 <_ZL15kernel_dispatchv+0xe6>
        }
        else if(rr_queue.head != NULL)
    2712:	80 91 fe 0e 	lds	r24, 0x0EFE
    2716:	90 91 ff 0e 	lds	r25, 0x0EFF
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	49 f0       	breq	.+18     	; 0x2730 <_ZL15kernel_dispatchv+0xd6>
        {
            cur_task = dequeue(&rr_queue);
    271e:	8e ef       	ldi	r24, 0xFE	; 254
    2720:	9e e0       	ldi	r25, 0x0E	; 14
    2722:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZL7dequeueP7queue_t>
    2726:	90 93 5c 05 	sts	0x055C, r25
    272a:	80 93 5b 05 	sts	0x055B, r24
    272e:	08 c0       	rjmp	.+16     	; 0x2740 <_ZL15kernel_dispatchv+0xe6>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
    2730:	80 91 75 03 	lds	r24, 0x0375
    2734:	90 91 76 03 	lds	r25, 0x0376
    2738:	90 93 5c 05 	sts	0x055C, r25
    273c:	80 93 5b 05 	sts	0x055B, r24
        }

        cur_task->state = RUNNING;
    2740:	80 91 5b 05 	lds	r24, 0x055B
    2744:	90 91 5c 05 	lds	r25, 0x055C
    2748:	fc 01       	movw	r30, r24
    274a:	ed 5f       	subi	r30, 0xFD	; 253
    274c:	fe 4f       	sbci	r31, 0xFE	; 254
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	80 83       	st	Z, r24
    }
}
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <Task_Create>:
 *  The created process will belong to its scheduling @a level.
 *  If the process is PERIODIC, then its @a name is a user-specified name
 *  to be used in the PPP[] array. Otherwise, @a name is ignored.
 * @sa @ref policy
 */
int Task_Create(void (*f)(void), int arg, unsigned int level, unsigned int name)
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	2b 97       	sbiw	r28, 0x0b	; 11
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	9d 83       	std	Y+5, r25	; 0x05
    276e:	8c 83       	std	Y+4, r24	; 0x04
    2770:	7f 83       	std	Y+7, r23	; 0x07
    2772:	6e 83       	std	Y+6, r22	; 0x06
    2774:	59 87       	std	Y+9, r21	; 0x09
    2776:	48 87       	std	Y+8, r20	; 0x08
    2778:	3b 87       	std	Y+11, r19	; 0x0b
    277a:	2a 87       	std	Y+10, r18	; 0x0a
{
    int retval;
    uint8_t sreg;

    sreg = SREG;
    277c:	ef e5       	ldi	r30, 0x5F	; 95
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    2784:	f8 94       	cli

    kernel_request_create_args.f = (voidfuncvoid_ptr)f;
    2786:	8c 81       	ldd	r24, Y+4	; 0x04
    2788:	9d 81       	ldd	r25, Y+5	; 0x05
    278a:	90 93 5e 05 	sts	0x055E, r25
    278e:	80 93 5d 05 	sts	0x055D, r24
    kernel_request_create_args.arg = arg;
    2792:	8e 81       	ldd	r24, Y+6	; 0x06
    2794:	9f 81       	ldd	r25, Y+7	; 0x07
    2796:	90 93 60 05 	sts	0x0560, r25
    279a:	80 93 5f 05 	sts	0x055F, r24
    kernel_request_create_args.level = (uint8_t)level;
    279e:	88 85       	ldd	r24, Y+8	; 0x08
    27a0:	80 93 61 05 	sts	0x0561, r24
    kernel_request_create_args.name = (uint8_t)name;
    27a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    27a6:	80 93 62 05 	sts	0x0562, r24

    kernel_request = TASK_CREATE;
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	80 93 58 05 	sts	0x0558, r24
    enter_kernel();
    27b0:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZL12enter_kernelv>

    retval = kernel_request_retval;
    27b4:	80 91 63 05 	lds	r24, 0x0563
    27b8:	90 91 64 05 	lds	r25, 0x0564
    27bc:	9b 83       	std	Y+3, r25	; 0x03
    27be:	8a 83       	std	Y+2, r24	; 0x02
    SREG = sreg;
    27c0:	ef e5       	ldi	r30, 0x5F	; 95
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	80 83       	st	Z, r24

    return retval;
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	9b 81       	ldd	r25, Y+3	; 0x03
}
    27cc:	2b 96       	adiw	r28, 0x0b	; 11
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <Task_Next>:


/**
  * @brief The calling task gives up its share of the processor voluntarily.
  */
void Task_Next()
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	0f 92       	push	r0
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
{
    uint8_t volatile sreg;

    sreg = SREG;
    27e8:	ef e5       	ldi	r30, 0x5F	; 95
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    27f0:	f8 94       	cli

    kernel_request = TASK_NEXT;
    27f2:	84 e0       	ldi	r24, 0x04	; 4
    27f4:	80 93 58 05 	sts	0x0558, r24
    enter_kernel();
    27f8:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZL12enter_kernelv>

    SREG = sreg;
    27fc:	ef e5       	ldi	r30, 0x5F	; 95
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	80 83       	st	Z, r24
}
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <Task_Terminate>:


/**
  * @brief The calling task terminates itself.
  */
void Task_Terminate()
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	0f 92       	push	r0
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
{
    uint8_t sreg;

    sreg = SREG;
    2816:	ef e5       	ldi	r30, 0x5F	; 95
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    281e:	f8 94       	cli

    kernel_request = TASK_TERMINATE;
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	80 93 58 05 	sts	0x0558, r24
    enter_kernel();
    2826:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZL12enter_kernelv>

    SREG = sreg;
    282a:	ef e5       	ldi	r30, 0x5F	; 95
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	80 83       	st	Z, r24
}
    2832:	0f 90       	pop	r0
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <Task_GetArg>:


/** @brief Retrieve the assigned parameter.
 */
int Task_GetArg(void)
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	00 d0       	rcall	.+0      	; 0x2840 <Task_GetArg+0x6>
    2840:	0f 92       	push	r0
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
{
    int arg;
    uint8_t sreg;

    sreg = SREG;
    2846:	ef e5       	ldi	r30, 0x5F	; 95
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    284e:	f8 94       	cli

    arg = cur_task->arg;
    2850:	80 91 5b 05 	lds	r24, 0x055B
    2854:	90 91 5c 05 	lds	r25, 0x055C
    2858:	fc 01       	movw	r30, r24
    285a:	ec 5f       	subi	r30, 0xFC	; 252
    285c:	fe 4f       	sbci	r31, 0xFE	; 254
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	9b 83       	std	Y+3, r25	; 0x03
    2864:	8a 83       	std	Y+2, r24	; 0x02

    SREG = sreg;
    2866:	ef e5       	ldi	r30, 0x5F	; 95
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	80 83       	st	Z, r24

    return arg;
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <Event_Init>:
/**
 * @brief Initialize a new, non-NULL Event descriptor.
 *
 * @return a non-NULL Event descriptor if successful; NULL otherwise.
 */
EVENT *Event_Init(void)
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	00 d0       	rcall	.+0      	; 0x2884 <Event_Init+0x6>
    2884:	0f 92       	push	r0
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
{
    EVENT* event_ptr;
    uint8_t sreg;

    sreg = SREG;
    288a:	ef e5       	ldi	r30, 0x5F	; 95
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    2892:	f8 94       	cli

    kernel_request = EVENT_INIT;
    2894:	86 e0       	ldi	r24, 0x06	; 6
    2896:	80 93 58 05 	sts	0x0558, r24
    enter_kernel();
    289a:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZL12enter_kernelv>

    event_ptr = (EVENT *)kernel_request_event_ptr;
    289e:	80 91 59 05 	lds	r24, 0x0559
    28a2:	90 91 5a 05 	lds	r25, 0x055A
    28a6:	9b 83       	std	Y+3, r25	; 0x03
    28a8:	8a 83       	std	Y+2, r24	; 0x02

    SREG = sreg;
    28aa:	ef e5       	ldi	r30, 0x5F	; 95
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	80 83       	st	Z, r24

    return event_ptr;
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <Event_Wait>:
/**
  * @brief Wait for the next occurrence of a signal on \a e. The calling process always blocks.
  *
  * @param e  an Event descriptor
  */
void Event_Wait(EVENT *e)
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <Event_Wait+0x6>
    28c8:	0f 92       	push	r0
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	9b 83       	std	Y+3, r25	; 0x03
    28d0:	8a 83       	std	Y+2, r24	; 0x02
{
    uint8_t sreg;

    sreg = SREG;
    28d2:	ef e5       	ldi	r30, 0x5F	; 95
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    28da:	f8 94       	cli

    kernel_request = EVENT_WAIT;
    28dc:	87 e0       	ldi	r24, 0x07	; 7
    28de:	80 93 58 05 	sts	0x0558, r24
    kernel_request_event_ptr = e;
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	90 93 5a 05 	sts	0x055A, r25
    28ea:	80 93 59 05 	sts	0x0559, r24
    enter_kernel();
    28ee:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZL12enter_kernelv>

    SREG = sreg;
    28f2:	ef e5       	ldi	r30, 0x5F	; 95
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	80 83       	st	Z, r24
}
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <Event_Signal>:
  * \param e an Event descriptor
  *
  * @brief Resume a \b single waiting task on \a e. It is a \a no-op if there is no waiting process.
  * \sa Event_Wait()
  */
void Event_Signal(EVENT *e)
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	00 d0       	rcall	.+0      	; 0x290c <Event_Signal+0x6>
    290c:	0f 92       	push	r0
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	9b 83       	std	Y+3, r25	; 0x03
    2914:	8a 83       	std	Y+2, r24	; 0x02
{
    uint8_t sreg;

    sreg = SREG;
    2916:	ef e5       	ldi	r30, 0x5F	; 95
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    291e:	f8 94       	cli

    kernel_request = EVENT_SIGNAL;
    2920:	88 e0       	ldi	r24, 0x08	; 8
    2922:	80 93 58 05 	sts	0x0558, r24
    kernel_request_event_ptr = e;
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	9b 81       	ldd	r25, Y+3	; 0x03
    292a:	90 93 5a 05 	sts	0x055A, r25
    292e:	80 93 59 05 	sts	0x0559, r24
    enter_kernel();
    2932:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZL12enter_kernelv>

    SREG = sreg;
    2936:	ef e5       	ldi	r30, 0x5F	; 95
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	80 83       	st	Z, r24
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <Event_Broadcast>:
  * \param e  an Event descriptor
  *
  * @brief Resume \b ALL waiting tasks on \a e. It is a \a no-op if there is no waiting process.
  * \sa Event_Wait()
  */
void Event_Broadcast(EVENT *e)
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	00 d0       	rcall	.+0      	; 0x2950 <Event_Broadcast+0x6>
    2950:	0f 92       	push	r0
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	9b 83       	std	Y+3, r25	; 0x03
    2958:	8a 83       	std	Y+2, r24	; 0x02
{
    uint8_t sreg;

    sreg = SREG;
    295a:	ef e5       	ldi	r30, 0x5F	; 95
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    2962:	f8 94       	cli

    kernel_request = EVENT_BROADCAST;
    2964:	89 e0       	ldi	r24, 0x09	; 9
    2966:	80 93 58 05 	sts	0x0558, r24
    kernel_request_event_ptr = e;
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	9b 81       	ldd	r25, Y+3	; 0x03
    296e:	90 93 5a 05 	sts	0x055A, r25
    2972:	80 93 59 05 	sts	0x0559, r24
    enter_kernel();
    2976:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZL12enter_kernelv>

    SREG = sreg;
    297a:	ef e5       	ldi	r30, 0x5F	; 95
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	80 83       	st	Z, r24
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <Signal_And_Next>:
  * fundamental difference is that these two operations are performed as
  * an indivisible unit. So conceptually, the calling task resumes another
  * waiting task and gives up its share of the processor simultaneously.
  * \sa Event_Signal(), Task_Next()
  */
void  Signal_And_Next(EVENT *e)
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	00 d0       	rcall	.+0      	; 0x2994 <Signal_And_Next+0x6>
    2994:	0f 92       	push	r0
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	9b 83       	std	Y+3, r25	; 0x03
    299c:	8a 83       	std	Y+2, r24	; 0x02
{
    uint8_t sreg;

    sreg = SREG;
    299e:	ef e5       	ldi	r30, 0x5F	; 95
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    29a6:	f8 94       	cli

    kernel_request = EVENT_SIGNAL_AND_NEXT;
    29a8:	8a e0       	ldi	r24, 0x0A	; 10
    29aa:	80 93 58 05 	sts	0x0558, r24
    kernel_request_event_ptr = e;
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	9b 81       	ldd	r25, Y+3	; 0x03
    29b2:	90 93 5a 05 	sts	0x055A, r25
    29b6:	80 93 59 05 	sts	0x0559, r24
    enter_kernel();
    29ba:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZL12enter_kernelv>

    SREG = sreg;
    29be:	ef e5       	ldi	r30, 0x5F	; 95
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	80 83       	st	Z, r24
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <Broadcast_And_Next>:
  * @brief Resume \b ALL waiting tasks on \a e and at the same time relinquish the processor.
  *
  * This is equivalent to "Event_Broadcast( e ); Task_Next()" in concept.
  * \sa Event_Broadcast(), Task_Next()
  */
void  Broadcast_And_Next(EVENT *e)
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <Broadcast_And_Next+0x6>
    29d8:	0f 92       	push	r0
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	9b 83       	std	Y+3, r25	; 0x03
    29e0:	8a 83       	std	Y+2, r24	; 0x02
{
    uint8_t sreg;

    sreg = SREG;
    29e2:	ef e5       	ldi	r30, 0x5F	; 95
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    29ea:	f8 94       	cli

    kernel_request = EVENT_BROADCAST_AND_NEXT;
    29ec:	8b e0       	ldi	r24, 0x0B	; 11
    29ee:	80 93 58 05 	sts	0x0558, r24
    kernel_request_event_ptr = e;
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	9b 81       	ldd	r25, Y+3	; 0x03
    29f6:	90 93 5a 05 	sts	0x055A, r25
    29fa:	80 93 59 05 	sts	0x0559, r24
    enter_kernel();
    29fe:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZL12enter_kernelv>

    SREG = sreg;
    2a02:	ef e5       	ldi	r30, 0x5F	; 95
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	80 83       	st	Z, r24
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <_ZL11_delay_25msv>:


/**
 *  @brief Delay function adapted from <util/delay.h>
 */
static void _delay_25ms(void)
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	2e 97       	sbiw	r28, 0x0e	; 14
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	a8 ec       	ldi	r26, 0xC8	; 200
    2a30:	b1 e4       	ldi	r27, 0x41	; 65
    2a32:	8b 87       	std	Y+11, r24	; 0x0b
    2a34:	9c 87       	std	Y+12, r25	; 0x0c
    2a36:	ad 87       	std	Y+13, r26	; 0x0d
    2a38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	4a e7       	ldi	r20, 0x7A	; 122
    2a48:	55 e4       	ldi	r21, 0x45	; 69
    2a4a:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	8f 83       	std	Y+7, r24	; 0x07
    2a54:	98 87       	std	Y+8, r25	; 0x08
    2a56:	a9 87       	std	Y+9, r26	; 0x09
    2a58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5c:	78 85       	ldd	r23, Y+8	; 0x08
    2a5e:	89 85       	ldd	r24, Y+9	; 0x09
    2a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e8       	ldi	r20, 0x80	; 128
    2a68:	5f e3       	ldi	r21, 0x3F	; 63
    2a6a:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    2a6e:	88 23       	and	r24, r24
    2a70:	2c f4       	brge	.+10     	; 0x2a7c <_ZL11_delay_25msv+0x66>
		__ticks = 1;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9e 83       	std	Y+6, r25	; 0x06
    2a78:	8d 83       	std	Y+5, r24	; 0x05
    2a7a:	3f c0       	rjmp	.+126    	; 0x2afa <_ZL11_delay_25msv+0xe4>
	else if (__tmp > 65535)
    2a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7e:	78 85       	ldd	r23, Y+8	; 0x08
    2a80:	89 85       	ldd	r24, Y+9	; 0x09
    2a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	3f ef       	ldi	r19, 0xFF	; 255
    2a88:	4f e7       	ldi	r20, 0x7F	; 127
    2a8a:	57 e4       	ldi	r21, 0x47	; 71
    2a8c:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__gtsf2>
    2a90:	18 16       	cp	r1, r24
    2a92:	4c f5       	brge	.+82     	; 0x2ae6 <_ZL11_delay_25msv+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e2       	ldi	r20, 0x20	; 32
    2aa2:	51 e4       	ldi	r21, 0x41	; 65
    2aa4:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	bc 01       	movw	r22, r24
    2aae:	cd 01       	movw	r24, r26
    2ab0:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <_ZL11_delay_25msv+0xc6>
    2abe:	80 e9       	ldi	r24, 0x90	; 144
    2ac0:	91 e0       	ldi	r25, 0x01	; 1
    2ac2:	9c 83       	std	Y+4, r25	; 0x04
    2ac4:	8b 83       	std	Y+3, r24	; 0x03
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <_ZL11_delay_25msv+0xb4>
    2ace:	9c 83       	std	Y+4, r25	; 0x04
    2ad0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	69 f7       	brne	.-38     	; 0x2abe <_ZL11_delay_25msv+0xa8>
    2ae4:	14 c0       	rjmp	.+40     	; 0x2b0e <_ZL11_delay_25msv+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae8:	78 85       	ldd	r23, Y+8	; 0x08
    2aea:	89 85       	ldd	r24, Y+9	; 0x09
    2aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aee:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	9e 83       	std	Y+6, r25	; 0x06
    2af8:	8d 83       	std	Y+5, r24	; 0x05
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	9a 81       	ldd	r25, Y+2	; 0x02
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <_ZL11_delay_25msv+0xf0>
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    //uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    //asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    _delay_ms(25);
}
    2b0e:	2e 96       	adiw	r28, 0x0e	; 14
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <OS_Abort>:


/** @brief Abort the execution of this RTOS due to an unrecoverable erorr.
 */
void OS_Abort(void)
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <OS_Abort+0x6>
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <OS_Abort+0x8>
    2b28:	0f 92       	push	r0
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
{
    uint8_t i, j;
    uint8_t flashes, mask;

    Disable_Interrupt();
    2b2e:	f8 94       	cli

    /* Initialize port for output */
    DDRD = LED_RED_MASK | LED_GREEN_MASK;
    2b30:	ea e2       	ldi	r30, 0x2A	; 42
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 ef       	ldi	r24, 0xF0	; 240
    2b36:	80 83       	st	Z, r24

    if(error_msg < ERR_RUN_1_USER_CALLED_OS_ABORT)
    2b38:	80 91 74 03 	lds	r24, 0x0374
    2b3c:	1d 82       	std	Y+5, r1	; 0x05
    2b3e:	86 30       	cpi	r24, 0x06	; 6
    2b40:	10 f4       	brcc	.+4      	; 0x2b46 <OS_Abort+0x26>
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	8d 83       	std	Y+5, r24	; 0x05
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	88 23       	and	r24, r24
    2b4a:	39 f0       	breq	.+14     	; 0x2b5a <OS_Abort+0x3a>
    {
        flashes = error_msg + 1;
    2b4c:	80 91 74 03 	lds	r24, 0x0374
    2b50:	8f 5f       	subi	r24, 0xFF	; 255
    2b52:	8a 83       	std	Y+2, r24	; 0x02
        mask = LED_GREEN_MASK;
    2b54:	80 e6       	ldi	r24, 0x60	; 96
    2b56:	89 83       	std	Y+1, r24	; 0x01
    2b58:	06 c0       	rjmp	.+12     	; 0x2b66 <OS_Abort+0x46>
    }
    else
    {
        flashes = error_msg + 1 - ERR_RUN_1_USER_CALLED_OS_ABORT;
    2b5a:	80 91 74 03 	lds	r24, 0x0374
    2b5e:	85 50       	subi	r24, 0x05	; 5
    2b60:	8a 83       	std	Y+2, r24	; 0x02
        mask = LED_RED_MASK;
    2b62:	80 e9       	ldi	r24, 0x90	; 144
    2b64:	89 83       	std	Y+1, r24	; 0x01
    }


    for(;;)
    {
        PORTD = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);
    2b66:	eb e2       	ldi	r30, 0x2B	; 43
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 ef       	ldi	r24, 0xF0	; 240
    2b6c:	80 83       	st	Z, r24

        for(i = 0; i < 100; ++i)
    2b6e:	1c 82       	std	Y+4, r1	; 0x04
    2b70:	05 c0       	rjmp	.+10     	; 0x2b7c <OS_Abort+0x5c>
        {
               _delay_25ms();
    2b72:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZL11_delay_25msv>

    for(;;)
    {
        PORTD = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);

        for(i = 0; i < 100; ++i)
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	8f 5f       	subi	r24, 0xFF	; 255
    2b7a:	8c 83       	std	Y+4, r24	; 0x04
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	84 36       	cpi	r24, 0x64	; 100
    2b80:	c0 f3       	brcs	.-16     	; 0x2b72 <OS_Abort+0x52>
        {
               _delay_25ms();
        }

        PORTD = (uint8_t) 0;
    2b82:	eb e2       	ldi	r30, 0x2B	; 43
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	10 82       	st	Z, r1

        for(i = 0; i < 40; ++i)
    2b88:	1c 82       	std	Y+4, r1	; 0x04
    2b8a:	05 c0       	rjmp	.+10     	; 0x2b96 <OS_Abort+0x76>
        {
               _delay_25ms();
    2b8c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZL11_delay_25msv>
               _delay_25ms();
        }

        PORTD = (uint8_t) 0;

        for(i = 0; i < 40; ++i)
    2b90:	8c 81       	ldd	r24, Y+4	; 0x04
    2b92:	8f 5f       	subi	r24, 0xFF	; 255
    2b94:	8c 83       	std	Y+4, r24	; 0x04
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	88 32       	cpi	r24, 0x28	; 40
    2b9a:	c0 f3       	brcs	.-16     	; 0x2b8c <OS_Abort+0x6c>
        {
               _delay_25ms();
        }


        for(j = 0; j < flashes; ++j)
    2b9c:	1b 82       	std	Y+3, r1	; 0x03
    2b9e:	1e c0       	rjmp	.+60     	; 0x2bdc <OS_Abort+0xbc>
        {
            PORTD = mask;
    2ba0:	eb e2       	ldi	r30, 0x2B	; 43
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	80 83       	st	Z, r24

            for(i = 0; i < 10; ++i)
    2ba8:	1c 82       	std	Y+4, r1	; 0x04
    2baa:	05 c0       	rjmp	.+10     	; 0x2bb6 <OS_Abort+0x96>
            {
                _delay_25ms();
    2bac:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZL11_delay_25msv>

        for(j = 0; j < flashes; ++j)
        {
            PORTD = mask;

            for(i = 0; i < 10; ++i)
    2bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb2:	8f 5f       	subi	r24, 0xFF	; 255
    2bb4:	8c 83       	std	Y+4, r24	; 0x04
    2bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb8:	8a 30       	cpi	r24, 0x0A	; 10
    2bba:	c0 f3       	brcs	.-16     	; 0x2bac <OS_Abort+0x8c>
            {
                _delay_25ms();
            }

            PORTD = (uint8_t) 0;
    2bbc:	eb e2       	ldi	r30, 0x2B	; 43
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	10 82       	st	Z, r1

            for(i = 0; i < 10; ++i)
    2bc2:	1c 82       	std	Y+4, r1	; 0x04
    2bc4:	05 c0       	rjmp	.+10     	; 0x2bd0 <OS_Abort+0xb0>
            {
                _delay_25ms();
    2bc6:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZL11_delay_25msv>
                _delay_25ms();
            }

            PORTD = (uint8_t) 0;

            for(i = 0; i < 10; ++i)
    2bca:	8c 81       	ldd	r24, Y+4	; 0x04
    2bcc:	8f 5f       	subi	r24, 0xFF	; 255
    2bce:	8c 83       	std	Y+4, r24	; 0x04
    2bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd2:	8a 30       	cpi	r24, 0x0A	; 10
    2bd4:	c0 f3       	brcs	.-16     	; 0x2bc6 <OS_Abort+0xa6>
        {
               _delay_25ms();
        }


        for(j = 0; j < flashes; ++j)
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	8f 5f       	subi	r24, 0xFF	; 255
    2bda:	8b 83       	std	Y+3, r24	; 0x03
    2bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	98 17       	cp	r25, r24
    2be2:	f0 f2       	brcs	.-68     	; 0x2ba0 <OS_Abort+0x80>
            {
                _delay_25ms();
            }
        }

        for(i = 0; i < 20; ++i)
    2be4:	1c 82       	std	Y+4, r1	; 0x04
    2be6:	05 c0       	rjmp	.+10     	; 0x2bf2 <OS_Abort+0xd2>
        {
            _delay_25ms();
    2be8:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZL11_delay_25msv>
            {
                _delay_25ms();
            }
        }

        for(i = 0; i < 20; ++i)
    2bec:	8c 81       	ldd	r24, Y+4	; 0x04
    2bee:	8f 5f       	subi	r24, 0xFF	; 255
    2bf0:	8c 83       	std	Y+4, r24	; 0x04
    2bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf4:	84 31       	cpi	r24, 0x14	; 20
    2bf6:	c0 f3       	brcs	.-16     	; 0x2be8 <OS_Abort+0xc8>
    2bf8:	b6 cf       	rjmp	.-148    	; 0x2b66 <OS_Abort+0x46>

00002bfa <_ZL15check_PPP_namesv>:


/**
 * @brief Validate the PPP array.
 */
static void check_PPP_names(void)
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <_ZL15check_PPP_namesv+0x6>
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
{
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    2c04:	1a 82       	std	Y+2, r1	; 0x02
    2c06:	1b c0       	rjmp	.+54     	; 0x2c3e <_ZL15check_PPP_namesv+0x44>
    {
        name = PPP[i];
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	88 2f       	mov	r24, r24
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	fc 01       	movw	r30, r24
    2c10:	eb 57       	subi	r30, 0x7B	; 123
    2c12:	fd 4f       	sbci	r31, 0xFD	; 253
    2c14:	80 81       	ld	r24, Z
    2c16:	89 83       	std	Y+1, r24	; 0x01

        /* name == IDLE or 0 < name <= MAXNAME */
        if(name <= MAXNAME)
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	89 30       	cpi	r24, 0x09	; 9
    2c1c:	48 f4       	brcc	.+18     	; 0x2c30 <_ZL15check_PPP_namesv+0x36>
        {
            name_in_PPP[name] = 1;
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	fc 01       	movw	r30, r24
    2c26:	ef 52       	subi	r30, 0x2F	; 47
    2c28:	f1 4f       	sbci	r31, 0xF1	; 241
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	80 83       	st	Z, r24
    2c2e:	04 c0       	rjmp	.+8      	; 0x2c38 <_ZL15check_PPP_namesv+0x3e>
        }
        else
        {
            error_msg = ERR_1_PPP_NAME_OUT_OF_RANGE;
    2c30:	10 92 74 03 	sts	0x0374, r1
            OS_Abort();
    2c34:	0e 94 90 15 	call	0x2b20	; 0x2b20 <OS_Abort>
static void check_PPP_names(void)
{
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	8e 5f       	subi	r24, 0xFE	; 254
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	80 91 8f 02 	lds	r24, 0x028F
    2c48:	90 91 90 02 	lds	r25, 0x0290
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	28 17       	cp	r18, r24
    2c52:	39 07       	cpc	r19, r25
    2c54:	c8 f2       	brcs	.-78     	; 0x2c08 <_ZL15check_PPP_namesv+0xe>
        {
            error_msg = ERR_1_PPP_NAME_OUT_OF_RANGE;
            OS_Abort();
        }
    }
}
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <_ZL20kernel_update_tickerv>:
/**
 * @brief Update the current time.
 *
 * Perhaps move to the next time slot of the PPP.
 */
static void kernel_update_ticker(void)
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	0f 92       	push	r0
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
{
    /* PORTD ^= LED_D5_RED; */

    if(PT > 0)
    2c6a:	80 91 8f 02 	lds	r24, 0x028F
    2c6e:	90 91 90 02 	lds	r25, 0x0290
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <_ZL20kernel_update_tickerv+0x18>
    2c76:	72 c0       	rjmp	.+228    	; 0x2d5c <_ZL20kernel_update_tickerv+0xfc>
    {
        --ticks_remaining;
    2c78:	80 91 d0 0e 	lds	r24, 0x0ED0
    2c7c:	81 50       	subi	r24, 0x01	; 1
    2c7e:	80 93 d0 0e 	sts	0x0ED0, r24

        if(ticks_remaining == 0)
    2c82:	80 91 d0 0e 	lds	r24, 0x0ED0
    2c86:	19 82       	std	Y+1, r1	; 0x01
    2c88:	88 23       	and	r24, r24
    2c8a:	11 f4       	brne	.+4      	; 0x2c90 <_ZL20kernel_update_tickerv+0x30>
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	88 23       	and	r24, r24
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <_ZL20kernel_update_tickerv+0x38>
    2c96:	62 c0       	rjmp	.+196    	; 0x2d5c <_ZL20kernel_update_tickerv+0xfc>
        {
            /* If Periodic task still running then error */
            if(cur_task != NULL && cur_task->level == PERIODIC && slot_task_finished == 0)
    2c98:	80 91 5b 05 	lds	r24, 0x055B
    2c9c:	90 91 5c 05 	lds	r25, 0x055C
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	99 f0       	breq	.+38     	; 0x2cca <_ZL20kernel_update_tickerv+0x6a>
    2ca4:	80 91 5b 05 	lds	r24, 0x055B
    2ca8:	90 91 5c 05 	lds	r25, 0x055C
    2cac:	fc 01       	movw	r30, r24
    2cae:	ea 5f       	subi	r30, 0xFA	; 250
    2cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb2:	80 81       	ld	r24, Z
    2cb4:	82 30       	cpi	r24, 0x02	; 2
    2cb6:	49 f4       	brne	.+18     	; 0x2cca <_ZL20kernel_update_tickerv+0x6a>
    2cb8:	80 91 da 0e 	lds	r24, 0x0EDA
    2cbc:	88 23       	and	r24, r24
    2cbe:	29 f4       	brne	.+10     	; 0x2cca <_ZL20kernel_update_tickerv+0x6a>
            {
                /* error handling */
                error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
    2cc0:	88 e0       	ldi	r24, 0x08	; 8
    2cc2:	80 93 74 03 	sts	0x0374, r24
                OS_Abort();
    2cc6:	0e 94 90 15 	call	0x2b20	; 0x2b20 <OS_Abort>
            }

            slot_name_index += 2;
    2cca:	80 91 db 0e 	lds	r24, 0x0EDB
    2cce:	90 91 dc 0e 	lds	r25, 0x0EDC
    2cd2:	02 96       	adiw	r24, 0x02	; 2
    2cd4:	90 93 dc 0e 	sts	0x0EDC, r25
    2cd8:	80 93 db 0e 	sts	0x0EDB, r24
            if(slot_name_index >= 2 * PT)
    2cdc:	80 91 8f 02 	lds	r24, 0x028F
    2ce0:	90 91 90 02 	lds	r25, 0x0290
    2ce4:	9c 01       	movw	r18, r24
    2ce6:	22 0f       	add	r18, r18
    2ce8:	33 1f       	adc	r19, r19
    2cea:	80 91 db 0e 	lds	r24, 0x0EDB
    2cee:	90 91 dc 0e 	lds	r25, 0x0EDC
    2cf2:	82 17       	cp	r24, r18
    2cf4:	93 07       	cpc	r25, r19
    2cf6:	20 f0       	brcs	.+8      	; 0x2d00 <_ZL20kernel_update_tickerv+0xa0>
            {
                slot_name_index = 0;
    2cf8:	10 92 dc 0e 	sts	0x0EDC, r1
    2cfc:	10 92 db 0e 	sts	0x0EDB, r1
            }

            ticks_remaining = PPP[slot_name_index + 1];
    2d00:	80 91 db 0e 	lds	r24, 0x0EDB
    2d04:	90 91 dc 0e 	lds	r25, 0x0EDC
    2d08:	01 96       	adiw	r24, 0x01	; 1
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	eb 57       	subi	r30, 0x7B	; 123
    2d0e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d10:	80 81       	ld	r24, Z
    2d12:	80 93 d0 0e 	sts	0x0ED0, r24

            if(PPP[slot_name_index] == IDLE || name_to_task_ptr[PPP[slot_name_index]] == NULL)
    2d16:	80 91 db 0e 	lds	r24, 0x0EDB
    2d1a:	90 91 dc 0e 	lds	r25, 0x0EDC
    2d1e:	fc 01       	movw	r30, r24
    2d20:	eb 57       	subi	r30, 0x7B	; 123
    2d22:	fd 4f       	sbci	r31, 0xFD	; 253
    2d24:	80 81       	ld	r24, Z
    2d26:	88 23       	and	r24, r24
    2d28:	99 f0       	breq	.+38     	; 0x2d50 <_ZL20kernel_update_tickerv+0xf0>
    2d2a:	80 91 db 0e 	lds	r24, 0x0EDB
    2d2e:	90 91 dc 0e 	lds	r25, 0x0EDC
    2d32:	fc 01       	movw	r30, r24
    2d34:	eb 57       	subi	r30, 0x7B	; 123
    2d36:	fd 4f       	sbci	r31, 0xFD	; 253
    2d38:	80 81       	ld	r24, Z
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	fc 01       	movw	r30, r24
    2d44:	ea 54       	subi	r30, 0x4A	; 74
    2d46:	f1 4f       	sbci	r31, 0xF1	; 241
    2d48:	80 81       	ld	r24, Z
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	21 f4       	brne	.+8      	; 0x2d58 <_ZL20kernel_update_tickerv+0xf8>
            {
                slot_task_finished = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	80 93 da 0e 	sts	0x0EDA, r24
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <_ZL20kernel_update_tickerv+0xfc>
            }
            else
            {
                slot_task_finished = 0;
    2d58:	10 92 da 0e 	sts	0x0EDA, r1
            }
        }
    }
}
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <_ZL19kernel_event_signalhh>:
 * @brief Kernel function to signal waiting processes.
 *
 * Handles signals and broadcasts, with or without yielding.
 * May cause current task to be suspended.
 */
static void kernel_event_signal(uint8_t is_broadcast, uint8_t and_next)
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	28 97       	sbiw	r28, 0x08	; 8
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	6e 83       	std	Y+6, r22	; 0x06
{
    /* Check the handle of the event to ensure that it is initialized. */
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);
    2d7c:	80 91 59 05 	lds	r24, 0x0559
    2d80:	90 91 5a 05 	lds	r25, 0x055A
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	8c 83       	std	Y+4, r24	; 0x04

    if(handle >= num_events_created)
    2d88:	90 91 dd 0e 	lds	r25, 0x0EDD
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	89 17       	cp	r24, r25
    2d90:	30 f0       	brcs	.+12     	; 0x2d9e <_ZL19kernel_event_signalhh+0x3a>
    {
        /* Error code. */
        error_msg = ERR_RUN_4_SIGNAL_ON_BAD_EVENT;
    2d92:	89 e0       	ldi	r24, 0x09	; 9
    2d94:	80 93 74 03 	sts	0x0374, r24
        OS_Abort();
    2d98:	0e 94 90 15 	call	0x2b20	; 0x2b20 <OS_Abort>
    2d9c:	d2 c0       	rjmp	.+420    	; 0x2f42 <_ZL19kernel_event_signalhh+0x1de>
    }
    else
    {
        uint8_t make_ready = 0;
    2d9e:	1b 82       	std	Y+3, r1	; 0x03

        /* Signal appropriately, and perhaps place this task in a queue. */
        if(and_next)
    2da0:	8e 81       	ldd	r24, Y+6	; 0x06
    2da2:	88 23       	and	r24, r24
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <_ZL19kernel_event_signalhh+0x44>
    2da6:	94 c0       	rjmp	.+296    	; 0x2ed0 <_ZL19kernel_event_signalhh+0x16c>
        {
            make_ready = 1;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	8b 83       	std	Y+3, r24	; 0x03
    2dac:	91 c0       	rjmp	.+290    	; 0x2ed0 <_ZL19kernel_event_signalhh+0x16c>
        }

        while(event_queue[handle].head != NULL)
        {
            /* The signalled task */
			task_descriptor_t* task_ptr = dequeue(&event_queue[handle]);
    2dae:	8c 81       	ldd	r24, Y+4	; 0x04
    2db0:	88 2f       	mov	r24, r24
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	88 0f       	add	r24, r24
    2db6:	99 1f       	adc	r25, r25
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	82 52       	subi	r24, 0x22	; 34
    2dbe:	91 4f       	sbci	r25, 0xF1	; 241
    2dc0:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZL7dequeueP7queue_t>
    2dc4:	9a 83       	std	Y+2, r25	; 0x02
    2dc6:	89 83       	std	Y+1, r24	; 0x01
            task_ptr->state = READY;
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	9a 81       	ldd	r25, Y+2	; 0x02
    2dcc:	fc 01       	movw	r30, r24
    2dce:	ed 5f       	subi	r30, 0xFD	; 253
    2dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd2:	82 e0       	ldi	r24, 0x02	; 2
    2dd4:	80 83       	st	Z, r24

            switch(task_ptr->level)
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	fc 01       	movw	r30, r24
    2ddc:	ea 5f       	subi	r30, 0xFA	; 250
    2dde:	fe 4f       	sbci	r31, 0xFE	; 254
    2de0:	80 81       	ld	r24, Z
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	38 87       	std	Y+8, r19	; 0x08
    2de8:	2f 83       	std	Y+7, r18	; 0x07
    2dea:	8f 81       	ldd	r24, Y+7	; 0x07
    2dec:	98 85       	ldd	r25, Y+8	; 0x08
    2dee:	82 30       	cpi	r24, 0x02	; 2
    2df0:	91 05       	cpc	r25, r1
    2df2:	d1 f0       	breq	.+52     	; 0x2e28 <_ZL19kernel_event_signalhh+0xc4>
    2df4:	2f 81       	ldd	r18, Y+7	; 0x07
    2df6:	38 85       	ldd	r19, Y+8	; 0x08
    2df8:	23 30       	cpi	r18, 0x03	; 3
    2dfa:	31 05       	cpc	r19, r1
    2dfc:	31 f0       	breq	.+12     	; 0x2e0a <_ZL19kernel_event_signalhh+0xa6>
    2dfe:	8f 81       	ldd	r24, Y+7	; 0x07
    2e00:	98 85       	ldd	r25, Y+8	; 0x08
    2e02:	81 30       	cpi	r24, 0x01	; 1
    2e04:	91 05       	cpc	r25, r1
    2e06:	49 f0       	breq	.+18     	; 0x2e1a <_ZL19kernel_event_signalhh+0xb6>
    2e08:	0f c0       	rjmp	.+30     	; 0x2e28 <_ZL19kernel_event_signalhh+0xc4>
            {
            case SYSTEM:
                enqueue(&system_queue, task_ptr);
    2e0a:	8c ec       	ldi	r24, 0xCC	; 204
    2e0c:	9e e0       	ldi	r25, 0x0E	; 14
    2e0e:	29 81       	ldd	r18, Y+1	; 0x01
    2e10:	3a 81       	ldd	r19, Y+2	; 0x02
    2e12:	b9 01       	movw	r22, r18
    2e14:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
    2e18:	07 c0       	rjmp	.+14     	; 0x2e28 <_ZL19kernel_event_signalhh+0xc4>
                break;
            case PERIODIC:
                break;
            case RR:
                enqueue(&rr_queue, task_ptr);
    2e1a:	8e ef       	ldi	r24, 0xFE	; 254
    2e1c:	9e e0       	ldi	r25, 0x0E	; 14
    2e1e:	29 81       	ldd	r18, Y+1	; 0x01
    2e20:	3a 81       	ldd	r19, Y+2	; 0x02
    2e22:	b9 01       	movw	r22, r18
    2e24:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
            default:
                break;
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
    2e28:	20 91 5b 05 	lds	r18, 0x055B
    2e2c:	30 91 5c 05 	lds	r19, 0x055C
    2e30:	80 91 75 03 	lds	r24, 0x0375
    2e34:	90 91 76 03 	lds	r25, 0x0376
    2e38:	28 17       	cp	r18, r24
    2e3a:	39 07       	cpc	r19, r25
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <_ZL19kernel_event_signalhh+0xdc>
    2e3e:	45 c0       	rjmp	.+138    	; 0x2eca <_ZL19kernel_event_signalhh+0x166>
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	88 23       	and	r24, r24
    2e44:	09 f0       	breq	.+2      	; 0x2e48 <_ZL19kernel_event_signalhh+0xe4>
    2e46:	41 c0       	rjmp	.+130    	; 0x2eca <_ZL19kernel_event_signalhh+0x166>
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
    2e48:	80 91 5b 05 	lds	r24, 0x055B
    2e4c:	90 91 5c 05 	lds	r25, 0x055C
    2e50:	fc 01       	movw	r30, r24
    2e52:	ea 5f       	subi	r30, 0xFA	; 250
    2e54:	fe 4f       	sbci	r31, 0xFE	; 254
    2e56:	80 81       	ld	r24, Z
    2e58:	83 30       	cpi	r24, 0x03	; 3
    2e5a:	59 f0       	breq	.+22     	; 0x2e72 <_ZL19kernel_event_signalhh+0x10e>
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	fc 01       	movw	r30, r24
    2e62:	ea 5f       	subi	r30, 0xFA	; 250
    2e64:	fe 4f       	sbci	r31, 0xFE	; 254
    2e66:	80 81       	ld	r24, Z
    2e68:	83 30       	cpi	r24, 0x03	; 3
    2e6a:	19 f4       	brne	.+6      	; 0x2e72 <_ZL19kernel_event_signalhh+0x10e>
                {
                    make_ready = 1;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	8b 83       	std	Y+3, r24	; 0x03
    2e70:	2c c0       	rjmp	.+88     	; 0x2eca <_ZL19kernel_event_signalhh+0x166>
                }
                else if(cur_task->level == RR &&
    2e72:	80 91 5b 05 	lds	r24, 0x055B
    2e76:	90 91 5c 05 	lds	r25, 0x055C
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	ea 5f       	subi	r30, 0xFA	; 250
    2e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e80:	80 81       	ld	r24, Z
    2e82:	81 30       	cpi	r24, 0x01	; 1
    2e84:	11 f5       	brne	.+68     	; 0x2eca <_ZL19kernel_event_signalhh+0x166>
    2e86:	80 91 8f 02 	lds	r24, 0x028F
    2e8a:	90 91 90 02 	lds	r25, 0x0290
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	e1 f0       	breq	.+56     	; 0x2eca <_ZL19kernel_event_signalhh+0x166>
    2e92:	80 91 da 0e 	lds	r24, 0x0EDA
    2e96:	88 23       	and	r24, r24
    2e98:	c1 f4       	brne	.+48     	; 0x2eca <_ZL19kernel_event_signalhh+0x166>
    2e9a:	80 91 db 0e 	lds	r24, 0x0EDB
    2e9e:	90 91 dc 0e 	lds	r25, 0x0EDC
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	eb 57       	subi	r30, 0x7B	; 123
    2ea6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ea8:	80 81       	ld	r24, Z
    2eaa:	88 2f       	mov	r24, r24
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	ea 54       	subi	r30, 0x4A	; 74
    2eb6:	f1 4f       	sbci	r31, 0xF1	; 241
    2eb8:	20 81       	ld	r18, Z
    2eba:	31 81       	ldd	r19, Z+1	; 0x01
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	28 17       	cp	r18, r24
    2ec2:	39 07       	cpc	r19, r25
    2ec4:	11 f4       	brne	.+4      	; 0x2eca <_ZL19kernel_event_signalhh+0x166>
                    PT > 0 &&
                    slot_task_finished == 0 &&
                    task_ptr == name_to_task_ptr[PPP[slot_name_index]])
                {
                    make_ready = 1;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
                }
            }

            if(!is_broadcast)
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	88 23       	and	r24, r24
    2ece:	79 f0       	breq	.+30     	; 0x2eee <_ZL19kernel_event_signalhh+0x18a>
        if(and_next)
        {
            make_ready = 1;
        }

        while(event_queue[handle].head != NULL)
    2ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed2:	88 2f       	mov	r24, r24
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	88 0f       	add	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	fc 01       	movw	r30, r24
    2ee0:	e2 52       	subi	r30, 0x22	; 34
    2ee2:	f1 4f       	sbci	r31, 0xF1	; 241
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	09 f0       	breq	.+2      	; 0x2eee <_ZL19kernel_event_signalhh+0x18a>
    2eec:	60 cf       	rjmp	.-320    	; 0x2dae <_ZL19kernel_event_signalhh+0x4a>
            {
                break;
            }
        }

        if(make_ready && cur_task != idle_task)
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	88 23       	and	r24, r24
    2ef2:	39 f1       	breq	.+78     	; 0x2f42 <_ZL19kernel_event_signalhh+0x1de>
    2ef4:	20 91 5b 05 	lds	r18, 0x055B
    2ef8:	30 91 5c 05 	lds	r19, 0x055C
    2efc:	80 91 75 03 	lds	r24, 0x0375
    2f00:	90 91 76 03 	lds	r25, 0x0376
    2f04:	28 17       	cp	r18, r24
    2f06:	39 07       	cpc	r19, r25
    2f08:	e1 f0       	breq	.+56     	; 0x2f42 <_ZL19kernel_event_signalhh+0x1de>
        {
            cur_task->state = READY;
    2f0a:	80 91 5b 05 	lds	r24, 0x055B
    2f0e:	90 91 5c 05 	lds	r25, 0x055C
    2f12:	fc 01       	movw	r30, r24
    2f14:	ed 5f       	subi	r30, 0xFD	; 253
    2f16:	fe 4f       	sbci	r31, 0xFE	; 254
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	80 83       	st	Z, r24
            if(cur_task->level == RR)
    2f1c:	80 91 5b 05 	lds	r24, 0x055B
    2f20:	90 91 5c 05 	lds	r25, 0x055C
    2f24:	fc 01       	movw	r30, r24
    2f26:	ea 5f       	subi	r30, 0xFA	; 250
    2f28:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2a:	80 81       	ld	r24, Z
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	49 f4       	brne	.+18     	; 0x2f42 <_ZL19kernel_event_signalhh+0x1de>
            {
                enqueue(&rr_queue, cur_task);
    2f30:	20 91 5b 05 	lds	r18, 0x055B
    2f34:	30 91 5c 05 	lds	r19, 0x055C
    2f38:	8e ef       	ldi	r24, 0xFE	; 254
    2f3a:	9e e0       	ldi	r25, 0x0E	; 14
    2f3c:	b9 01       	movw	r22, r18
    2f3e:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
            }
        }
    }
}
    2f42:	28 96       	adiw	r28, 0x08	; 8
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <_ZL17kernel_event_waitv>:


/**
 * @brief Kernel function to place current task in a waiting queue.
 */
static void kernel_event_wait(void)
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	0f 92       	push	r0
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
{
    /* Check the handle of the event to ensure that it is initialized. */
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);
    2f5e:	80 91 59 05 	lds	r24, 0x0559
    2f62:	90 91 5a 05 	lds	r25, 0x055A
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	89 83       	std	Y+1, r24	; 0x01

    if(handle >= num_events_created)
    2f6a:	90 91 dd 0e 	lds	r25, 0x0EDD
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	89 17       	cp	r24, r25
    2f72:	30 f0       	brcs	.+12     	; 0x2f80 <_ZL17kernel_event_waitv+0x2c>
    {
        /* Error code. */
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
    2f74:	8a e0       	ldi	r24, 0x0A	; 10
    2f76:	80 93 74 03 	sts	0x0374, r24
        OS_Abort();
    2f7a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <OS_Abort>
    2f7e:	29 c0       	rjmp	.+82     	; 0x2fd2 <_ZL17kernel_event_waitv+0x7e>
    }
    else if(cur_task->level == PERIODIC)
    2f80:	80 91 5b 05 	lds	r24, 0x055B
    2f84:	90 91 5c 05 	lds	r25, 0x055C
    2f88:	fc 01       	movw	r30, r24
    2f8a:	ea 5f       	subi	r30, 0xFA	; 250
    2f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8e:	80 81       	ld	r24, Z
    2f90:	82 30       	cpi	r24, 0x02	; 2
    2f92:	31 f4       	brne	.+12     	; 0x2fa0 <_ZL17kernel_event_waitv+0x4c>
	{
		error_msg = ERR_RUN_7_PERIODIC_CALLED_WAIT;
    2f94:	8c e0       	ldi	r24, 0x0C	; 12
    2f96:	80 93 74 03 	sts	0x0374, r24
		OS_Abort();
    2f9a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <OS_Abort>
    2f9e:	19 c0       	rjmp	.+50     	; 0x2fd2 <_ZL17kernel_event_waitv+0x7e>
	}
	else
    {
        /* Place this task in a queue. */
        cur_task->state = WAITING;
    2fa0:	80 91 5b 05 	lds	r24, 0x055B
    2fa4:	90 91 5c 05 	lds	r25, 0x055C
    2fa8:	fc 01       	movw	r30, r24
    2faa:	ed 5f       	subi	r30, 0xFD	; 253
    2fac:	fe 4f       	sbci	r31, 0xFE	; 254
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	80 83       	st	Z, r24
        enqueue(&event_queue[handle], cur_task);
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	88 0f       	add	r24, r24
    2fba:	99 1f       	adc	r25, r25
    2fbc:	88 0f       	add	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	82 52       	subi	r24, 0x22	; 34
    2fc2:	91 4f       	sbci	r25, 0xF1	; 241
    2fc4:	20 91 5b 05 	lds	r18, 0x055B
    2fc8:	30 91 5c 05 	lds	r19, 0x055C
    2fcc:	b9 01       	movw	r22, r18
    2fce:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
    }
}
    2fd2:	0f 90       	pop	r0
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <_ZL18kernel_create_taskv>:
 * When creating a new task, it is important to initialize its stack just like
 * it has called "enter_kernel()"; so that when we switch to it later, we
 * can just restore its execution context on its stack.
 * @sa enter_kernel
 */
static int kernel_create_task()
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	2e 97       	sbiw	r28, 0x0e	; 14
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    /* The new task. */
    task_descriptor_t *p;
    uint8_t* stack_bottom;


    if (dead_pool_queue.head == NULL)
    2fee:	80 91 c8 0e 	lds	r24, 0x0EC8
    2ff2:	90 91 c9 0e 	lds	r25, 0x0EC9
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	19 f4       	brne	.+6      	; 0x3000 <_ZL18kernel_create_taskv+0x26>
    {
        /* Too many tasks! */
        return 0;
    2ffa:	1e 86       	std	Y+14, r1	; 0x0e
    2ffc:	1d 86       	std	Y+13, r1	; 0x0d
    2ffe:	00 c1       	rjmp	.+512    	; 0x3200 <_ZL18kernel_create_taskv+0x226>
    }

    if(kernel_request_create_args.level == PERIODIC &&
    3000:	80 91 61 05 	lds	r24, 0x0561
    3004:	82 30       	cpi	r24, 0x02	; 2
    3006:	59 f4       	brne	.+22     	; 0x301e <_ZL18kernel_create_taskv+0x44>
    3008:	80 91 62 05 	lds	r24, 0x0562
    300c:	88 23       	and	r24, r24
    300e:	21 f0       	breq	.+8      	; 0x3018 <_ZL18kernel_create_taskv+0x3e>
    3010:	80 91 62 05 	lds	r24, 0x0562
    3014:	89 30       	cpi	r24, 0x09	; 9
    3016:	18 f0       	brcs	.+6      	; 0x301e <_ZL18kernel_create_taskv+0x44>
    3018:	21 e0       	ldi	r18, 0x01	; 1
    301a:	2c 87       	std	Y+12, r18	; 0x0c
    301c:	01 c0       	rjmp	.+2      	; 0x3020 <_ZL18kernel_create_taskv+0x46>
    301e:	1c 86       	std	Y+12, r1	; 0x0c
    3020:	8c 85       	ldd	r24, Y+12	; 0x0c
    3022:	88 23       	and	r24, r24
    3024:	29 f0       	breq	.+10     	; 0x3030 <_ZL18kernel_create_taskv+0x56>
        (kernel_request_create_args.name == IDLE ||
         kernel_request_create_args.name > MAXNAME))
    {
        /* PERIODIC name is out of range [1 .. MAXNAME] */
        error_msg = ERR_2_CREATE_NAME_OUT_OF_RANGE;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	80 93 74 03 	sts	0x0374, r24
        OS_Abort();
    302c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <OS_Abort>
    }

    if(kernel_request_create_args.level == PERIODIC &&
    3030:	80 91 61 05 	lds	r24, 0x0561
    3034:	82 30       	cpi	r24, 0x02	; 2
    3036:	69 f4       	brne	.+26     	; 0x3052 <_ZL18kernel_create_taskv+0x78>
    3038:	80 91 62 05 	lds	r24, 0x0562
    303c:	88 2f       	mov	r24, r24
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	fc 01       	movw	r30, r24
    3042:	ef 52       	subi	r30, 0x2F	; 47
    3044:	f1 4f       	sbci	r31, 0xF1	; 241
    3046:	80 81       	ld	r24, Z
    3048:	88 23       	and	r24, r24
    304a:	19 f4       	brne	.+6      	; 0x3052 <_ZL18kernel_create_taskv+0x78>
    304c:	31 e0       	ldi	r19, 0x01	; 1
    304e:	3b 87       	std	Y+11, r19	; 0x0b
    3050:	01 c0       	rjmp	.+2      	; 0x3054 <_ZL18kernel_create_taskv+0x7a>
    3052:	1b 86       	std	Y+11, r1	; 0x0b
    3054:	8b 85       	ldd	r24, Y+11	; 0x0b
    3056:	88 23       	and	r24, r24
    3058:	29 f0       	breq	.+10     	; 0x3064 <_ZL18kernel_create_taskv+0x8a>
        name_in_PPP[kernel_request_create_args.name] == 0)
    {
        error_msg = ERR_5_NAME_NOT_IN_PPP;
    305a:	84 e0       	ldi	r24, 0x04	; 4
    305c:	80 93 74 03 	sts	0x0374, r24
        OS_Abort();
    3060:	0e 94 90 15 	call	0x2b20	; 0x2b20 <OS_Abort>
    }

    if(kernel_request_create_args.level == PERIODIC &&
    3064:	80 91 61 05 	lds	r24, 0x0561
    3068:	82 30       	cpi	r24, 0x02	; 2
    306a:	81 f4       	brne	.+32     	; 0x308c <_ZL18kernel_create_taskv+0xb2>
    306c:	80 91 62 05 	lds	r24, 0x0562
    3070:	88 2f       	mov	r24, r24
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	fc 01       	movw	r30, r24
    307a:	ea 54       	subi	r30, 0x4A	; 74
    307c:	f1 4f       	sbci	r31, 0xF1	; 241
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	19 f0       	breq	.+6      	; 0x308c <_ZL18kernel_create_taskv+0xb2>
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	8a 87       	std	Y+10, r24	; 0x0a
    308a:	01 c0       	rjmp	.+2      	; 0x308e <_ZL18kernel_create_taskv+0xb4>
    308c:	1a 86       	std	Y+10, r1	; 0x0a
    308e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3090:	88 23       	and	r24, r24
    3092:	29 f0       	breq	.+10     	; 0x309e <_ZL18kernel_create_taskv+0xc4>
    name_to_task_ptr[kernel_request_create_args.name] != NULL)
    {
        /* PERIODIC name already used */
        error_msg = ERR_4_PERIODIC_NAME_IN_USE;
    3094:	83 e0       	ldi	r24, 0x03	; 3
    3096:	80 93 74 03 	sts	0x0374, r24
        OS_Abort();
    309a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <OS_Abort>
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == NULL)
    309e:	80 91 61 05 	lds	r24, 0x0561
    30a2:	19 86       	std	Y+9, r1	; 0x09
    30a4:	88 23       	and	r24, r24
    30a6:	11 f4       	brne	.+4      	; 0x30ac <_ZL18kernel_create_taskv+0xd2>
    30a8:	91 e0       	ldi	r25, 0x01	; 1
    30aa:	99 87       	std	Y+9, r25	; 0x09
    30ac:	29 85       	ldd	r18, Y+9	; 0x09
    30ae:	22 23       	and	r18, r18
    30b0:	29 f0       	breq	.+10     	; 0x30bc <_ZL18kernel_create_taskv+0xe2>
	{
		p = &task_desc[MAXPROCESS];
    30b2:	8d ea       	ldi	r24, 0xAD	; 173
    30b4:	9d e0       	ldi	r25, 0x0D	; 13
    30b6:	9e 83       	std	Y+6, r25	; 0x06
    30b8:	8d 83       	std	Y+5, r24	; 0x05
    30ba:	06 c0       	rjmp	.+12     	; 0x30c8 <_ZL18kernel_create_taskv+0xee>
	}
	/* Find an unused descriptor. */
	else
	{
	    p = dequeue(&dead_pool_queue);
    30bc:	88 ec       	ldi	r24, 0xC8	; 200
    30be:	9e e0       	ldi	r25, 0x0E	; 14
    30c0:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZL7dequeueP7queue_t>
    30c4:	9e 83       	std	Y+6, r25	; 0x06
    30c6:	8d 83       	std	Y+5, r24	; 0x05
	}

    stack_bottom = &(p->stack[WORKSPACE-1]);
    30c8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ca:	9e 81       	ldd	r25, Y+6	; 0x06
    30cc:	81 50       	subi	r24, 0x01	; 1
    30ce:	9f 4f       	sbci	r25, 0xFF	; 255
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
     *   the address of the start of the task to "return" to the first time it runs,
     *   register 31,
     *   the stored SREG, and
     *   registers 30 to 0.
     */
    uint8_t* stack_top = stack_bottom - (32 + 1 + 2 + 2);
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	85 97       	sbiw	r24, 0x25	; 37
    30da:	9a 83       	std	Y+2, r25	; 0x02
    30dc:	89 83       	std	Y+1, r24	; 0x01
    /* Not necessary to clear the task descriptor. */
    /* memset(p,0,sizeof(task_descriptor_t)); */

    /* stack_top[0] is the byte above the stack.
     * stack_top[1] is r0. */
    stack_top[2] = (uint8_t) 0; /* r1 is the "zero" register. */
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	9a 81       	ldd	r25, Y+2	; 0x02
    30e2:	fc 01       	movw	r30, r24
    30e4:	32 96       	adiw	r30, 0x02	; 2
    30e6:	10 82       	st	Z, r1
    /* stack_top[31] is r30. */
    stack_top[32] = (uint8_t) _BV(SREG_I); /* set SREG_I bit in stored SREG. */
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	9a 81       	ldd	r25, Y+2	; 0x02
    30ec:	fc 01       	movw	r30, r24
    30ee:	b0 96       	adiw	r30, 0x20	; 32
    30f0:	80 e8       	ldi	r24, 0x80	; 128
    30f2:	80 83       	st	Z, r24
     * onto the stack in reverse byte order (least significant first, followed
     * by most significant).  This is because the "return" assembly instructions
     * (ret and reti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
     * second), even though the AT90 is LITTLE ENDIAN machine.
     */
    stack_top[34] = (uint8_t)((uint16_t)(kernel_request_create_args.f) >> 8);
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	9a 81       	ldd	r25, Y+2	; 0x02
    30f8:	fc 01       	movw	r30, r24
    30fa:	b2 96       	adiw	r30, 0x22	; 34
    30fc:	80 91 5d 05 	lds	r24, 0x055D
    3100:	90 91 5e 05 	lds	r25, 0x055E
    3104:	89 2f       	mov	r24, r25
    3106:	99 27       	eor	r25, r25
    3108:	80 83       	st	Z, r24
    stack_top[35] = (uint8_t)(uint16_t)(kernel_request_create_args.f);
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	9a 81       	ldd	r25, Y+2	; 0x02
    310e:	fc 01       	movw	r30, r24
    3110:	b3 96       	adiw	r30, 0x23	; 35
    3112:	80 91 5d 05 	lds	r24, 0x055D
    3116:	90 91 5e 05 	lds	r25, 0x055E
    311a:	80 83       	st	Z, r24
    stack_top[36] = (uint8_t)((uint16_t)Task_Terminate >> 8);
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	9a 81       	ldd	r25, Y+2	; 0x02
    3120:	fc 01       	movw	r30, r24
    3122:	b4 96       	adiw	r30, 0x24	; 36
    3124:	86 e0       	ldi	r24, 0x06	; 6
    3126:	94 e1       	ldi	r25, 0x14	; 20
    3128:	89 2f       	mov	r24, r25
    312a:	99 27       	eor	r25, r25
    312c:	80 83       	st	Z, r24
    stack_top[37] = (uint8_t)(uint16_t)Task_Terminate;
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	9a 81       	ldd	r25, Y+2	; 0x02
    3132:	fc 01       	movw	r30, r24
    3134:	b5 96       	adiw	r30, 0x25	; 37
    3136:	86 e0       	ldi	r24, 0x06	; 6
    3138:	94 e1       	ldi	r25, 0x14	; 20
    313a:	80 83       	st	Z, r24

    /*
     * Make stack pointer point to cell above stack (the top).
     * Make room for 32 registers, SREG and two return addresses.
     */
    p->sp = stack_top;
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	fc 01       	movw	r30, r24
    3142:	e0 50       	subi	r30, 0x00	; 0
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	9a 81       	ldd	r25, Y+2	; 0x02
    314a:	91 83       	std	Z+1, r25	; 0x01
    314c:	80 83       	st	Z, r24

    p->state = READY;
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	9e 81       	ldd	r25, Y+6	; 0x06
    3152:	fc 01       	movw	r30, r24
    3154:	ed 5f       	subi	r30, 0xFD	; 253
    3156:	fe 4f       	sbci	r31, 0xFE	; 254
    3158:	82 e0       	ldi	r24, 0x02	; 2
    315a:	80 83       	st	Z, r24
    p->arg = kernel_request_create_args.arg;
    315c:	20 91 5f 05 	lds	r18, 0x055F
    3160:	30 91 60 05 	lds	r19, 0x0560
    3164:	8d 81       	ldd	r24, Y+5	; 0x05
    3166:	9e 81       	ldd	r25, Y+6	; 0x06
    3168:	fc 01       	movw	r30, r24
    316a:	ec 5f       	subi	r30, 0xFC	; 252
    316c:	fe 4f       	sbci	r31, 0xFE	; 254
    316e:	31 83       	std	Z+1, r19	; 0x01
    3170:	20 83       	st	Z, r18
    p->level = kernel_request_create_args.level;
    3172:	20 91 61 05 	lds	r18, 0x0561
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	9e 81       	ldd	r25, Y+6	; 0x06
    317a:	fc 01       	movw	r30, r24
    317c:	ea 5f       	subi	r30, 0xFA	; 250
    317e:	fe 4f       	sbci	r31, 0xFE	; 254
    3180:	20 83       	st	Z, r18
    p->name = kernel_request_create_args.name;
    3182:	20 91 62 05 	lds	r18, 0x0562
    3186:	8d 81       	ldd	r24, Y+5	; 0x05
    3188:	9e 81       	ldd	r25, Y+6	; 0x06
    318a:	fc 01       	movw	r30, r24
    318c:	ee 5f       	subi	r30, 0xFE	; 254
    318e:	fe 4f       	sbci	r31, 0xFE	; 254
    3190:	20 83       	st	Z, r18

	switch(kernel_request_create_args.level)
    3192:	80 91 61 05 	lds	r24, 0x0561
    3196:	28 2f       	mov	r18, r24
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	38 87       	std	Y+8, r19	; 0x08
    319c:	2f 83       	std	Y+7, r18	; 0x07
    319e:	8f 81       	ldd	r24, Y+7	; 0x07
    31a0:	98 85       	ldd	r25, Y+8	; 0x08
    31a2:	82 30       	cpi	r24, 0x02	; 2
    31a4:	91 05       	cpc	r25, r1
    31a6:	59 f0       	breq	.+22     	; 0x31be <_ZL18kernel_create_taskv+0x1e4>
    31a8:	2f 81       	ldd	r18, Y+7	; 0x07
    31aa:	38 85       	ldd	r19, Y+8	; 0x08
    31ac:	23 30       	cpi	r18, 0x03	; 3
    31ae:	31 05       	cpc	r19, r1
    31b0:	a1 f0       	breq	.+40     	; 0x31da <_ZL18kernel_create_taskv+0x200>
    31b2:	8f 81       	ldd	r24, Y+7	; 0x07
    31b4:	98 85       	ldd	r25, Y+8	; 0x08
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	91 05       	cpc	r25, r1
    31ba:	b9 f0       	breq	.+46     	; 0x31ea <_ZL18kernel_create_taskv+0x210>
    31bc:	1d c0       	rjmp	.+58     	; 0x31f8 <_ZL18kernel_create_taskv+0x21e>
	{
	case PERIODIC:
		/* Put this newly created PPP task into the PPP lookup array */
        name_to_task_ptr[kernel_request_create_args.name] = p;
    31be:	80 91 62 05 	lds	r24, 0x0562
    31c2:	88 2f       	mov	r24, r24
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	fc 01       	movw	r30, r24
    31cc:	ea 54       	subi	r30, 0x4A	; 74
    31ce:	f1 4f       	sbci	r31, 0xF1	; 241
    31d0:	8d 81       	ldd	r24, Y+5	; 0x05
    31d2:	9e 81       	ldd	r25, Y+6	; 0x06
    31d4:	91 83       	std	Z+1, r25	; 0x01
    31d6:	80 83       	st	Z, r24
    31d8:	0f c0       	rjmp	.+30     	; 0x31f8 <_ZL18kernel_create_taskv+0x21e>
		break;

    case SYSTEM:
    	/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&system_queue, p);
    31da:	8c ec       	ldi	r24, 0xCC	; 204
    31dc:	9e e0       	ldi	r25, 0x0E	; 14
    31de:	2d 81       	ldd	r18, Y+5	; 0x05
    31e0:	3e 81       	ldd	r19, Y+6	; 0x06
    31e2:	b9 01       	movw	r22, r18
    31e4:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
    31e8:	07 c0       	rjmp	.+14     	; 0x31f8 <_ZL18kernel_create_taskv+0x21e>
		break;

    case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&rr_queue, p);
    31ea:	8e ef       	ldi	r24, 0xFE	; 254
    31ec:	9e e0       	ldi	r25, 0x0E	; 14
    31ee:	2d 81       	ldd	r18, Y+5	; 0x05
    31f0:	3e 81       	ldd	r19, Y+6	; 0x06
    31f2:	b9 01       	movw	r22, r18
    31f4:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
    31f8:	21 e0       	ldi	r18, 0x01	; 1
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	3e 87       	std	Y+14, r19	; 0x0e
    31fe:	2d 87       	std	Y+13, r18	; 0x0d
    3200:	8d 85       	ldd	r24, Y+13	; 0x0d
    3202:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    3204:	2e 96       	adiw	r28, 0x0e	; 14
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <_ZL21kernel_handle_requestv>:
 *@brief The first part of the scheduler.
 *
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waitng queue.
 */
static void kernel_handle_request(void)
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	27 97       	sbiw	r28, 0x07	; 7
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
{
   switch(kernel_request)
    322a:	80 91 58 05 	lds	r24, 0x0558
    322e:	28 2f       	mov	r18, r24
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	3f 83       	std	Y+7, r19	; 0x07
    3234:	2e 83       	std	Y+6, r18	; 0x06
    3236:	8e 81       	ldd	r24, Y+6	; 0x06
    3238:	9f 81       	ldd	r25, Y+7	; 0x07
    323a:	85 30       	cpi	r24, 0x05	; 5
    323c:	91 05       	cpc	r25, r1
    323e:	09 f4       	brne	.+2      	; 0x3242 <_ZL21kernel_handle_requestv+0x2c>
    3240:	a2 c1       	rjmp	.+836    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
    3242:	2e 81       	ldd	r18, Y+6	; 0x06
    3244:	3f 81       	ldd	r19, Y+7	; 0x07
    3246:	26 30       	cpi	r18, 0x06	; 6
    3248:	31 05       	cpc	r19, r1
    324a:	1c f5       	brge	.+70     	; 0x3292 <_ZL21kernel_handle_requestv+0x7c>
    324c:	8e 81       	ldd	r24, Y+6	; 0x06
    324e:	9f 81       	ldd	r25, Y+7	; 0x07
    3250:	82 30       	cpi	r24, 0x02	; 2
    3252:	91 05       	cpc	r25, r1
    3254:	09 f4       	brne	.+2      	; 0x3258 <_ZL21kernel_handle_requestv+0x42>
    3256:	73 c0       	rjmp	.+230    	; 0x333e <_ZL21kernel_handle_requestv+0x128>
    3258:	2e 81       	ldd	r18, Y+6	; 0x06
    325a:	3f 81       	ldd	r19, Y+7	; 0x07
    325c:	23 30       	cpi	r18, 0x03	; 3
    325e:	31 05       	cpc	r19, r1
    3260:	5c f4       	brge	.+22     	; 0x3278 <_ZL21kernel_handle_requestv+0x62>
    3262:	8e 81       	ldd	r24, Y+6	; 0x06
    3264:	9f 81       	ldd	r25, Y+7	; 0x07
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	09 f4       	brne	.+2      	; 0x326c <_ZL21kernel_handle_requestv+0x56>
    326a:	8d c1       	rjmp	.+794    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
    326c:	2e 81       	ldd	r18, Y+6	; 0x06
    326e:	3f 81       	ldd	r19, Y+7	; 0x07
    3270:	21 30       	cpi	r18, 0x01	; 1
    3272:	31 05       	cpc	r19, r1
    3274:	c9 f1       	breq	.+114    	; 0x32e8 <_ZL21kernel_handle_requestv+0xd2>
    3276:	82 c1       	rjmp	.+772    	; 0x357c <_ZL21kernel_handle_requestv+0x366>
    3278:	8e 81       	ldd	r24, Y+6	; 0x06
    327a:	9f 81       	ldd	r25, Y+7	; 0x07
    327c:	83 30       	cpi	r24, 0x03	; 3
    327e:	91 05       	cpc	r25, r1
    3280:	09 f4       	brne	.+2      	; 0x3284 <_ZL21kernel_handle_requestv+0x6e>
    3282:	d8 c0       	rjmp	.+432    	; 0x3434 <_ZL21kernel_handle_requestv+0x21e>
    3284:	2e 81       	ldd	r18, Y+6	; 0x06
    3286:	3f 81       	ldd	r19, Y+7	; 0x07
    3288:	24 30       	cpi	r18, 0x04	; 4
    328a:	31 05       	cpc	r19, r1
    328c:	09 f4       	brne	.+2      	; 0x3290 <_ZL21kernel_handle_requestv+0x7a>
    328e:	e1 c0       	rjmp	.+450    	; 0x3452 <_ZL21kernel_handle_requestv+0x23c>
    3290:	75 c1       	rjmp	.+746    	; 0x357c <_ZL21kernel_handle_requestv+0x366>
    3292:	8e 81       	ldd	r24, Y+6	; 0x06
    3294:	9f 81       	ldd	r25, Y+7	; 0x07
    3296:	88 30       	cpi	r24, 0x08	; 8
    3298:	91 05       	cpc	r25, r1
    329a:	09 f4       	brne	.+2      	; 0x329e <_ZL21kernel_handle_requestv+0x88>
    329c:	41 c1       	rjmp	.+642    	; 0x3520 <_ZL21kernel_handle_requestv+0x30a>
    329e:	2e 81       	ldd	r18, Y+6	; 0x06
    32a0:	3f 81       	ldd	r19, Y+7	; 0x07
    32a2:	29 30       	cpi	r18, 0x09	; 9
    32a4:	31 05       	cpc	r19, r1
    32a6:	6c f4       	brge	.+26     	; 0x32c2 <_ZL21kernel_handle_requestv+0xac>
    32a8:	8e 81       	ldd	r24, Y+6	; 0x06
    32aa:	9f 81       	ldd	r25, Y+7	; 0x07
    32ac:	86 30       	cpi	r24, 0x06	; 6
    32ae:	91 05       	cpc	r25, r1
    32b0:	09 f4       	brne	.+2      	; 0x32b4 <_ZL21kernel_handle_requestv+0x9e>
    32b2:	0c c1       	rjmp	.+536    	; 0x34cc <_ZL21kernel_handle_requestv+0x2b6>
    32b4:	2e 81       	ldd	r18, Y+6	; 0x06
    32b6:	3f 81       	ldd	r19, Y+7	; 0x07
    32b8:	27 30       	cpi	r18, 0x07	; 7
    32ba:	31 05       	cpc	r19, r1
    32bc:	09 f4       	brne	.+2      	; 0x32c0 <_ZL21kernel_handle_requestv+0xaa>
    32be:	22 c1       	rjmp	.+580    	; 0x3504 <_ZL21kernel_handle_requestv+0x2ee>
    32c0:	5d c1       	rjmp	.+698    	; 0x357c <_ZL21kernel_handle_requestv+0x366>
    32c2:	8e 81       	ldd	r24, Y+6	; 0x06
    32c4:	9f 81       	ldd	r25, Y+7	; 0x07
    32c6:	8a 30       	cpi	r24, 0x0A	; 10
    32c8:	91 05       	cpc	r25, r1
    32ca:	09 f4       	brne	.+2      	; 0x32ce <_ZL21kernel_handle_requestv+0xb8>
    32cc:	33 c1       	rjmp	.+614    	; 0x3534 <_ZL21kernel_handle_requestv+0x31e>
    32ce:	2e 81       	ldd	r18, Y+6	; 0x06
    32d0:	3f 81       	ldd	r19, Y+7	; 0x07
    32d2:	2a 30       	cpi	r18, 0x0A	; 10
    32d4:	31 05       	cpc	r19, r1
    32d6:	0c f4       	brge	.+2      	; 0x32da <_ZL21kernel_handle_requestv+0xc4>
    32d8:	28 c1       	rjmp	.+592    	; 0x352a <_ZL21kernel_handle_requestv+0x314>
    32da:	8e 81       	ldd	r24, Y+6	; 0x06
    32dc:	9f 81       	ldd	r25, Y+7	; 0x07
    32de:	8b 30       	cpi	r24, 0x0B	; 11
    32e0:	91 05       	cpc	r25, r1
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <_ZL21kernel_handle_requestv+0xd0>
    32e4:	39 c1       	rjmp	.+626    	; 0x3558 <_ZL21kernel_handle_requestv+0x342>
    32e6:	4a c1       	rjmp	.+660    	; 0x357c <_ZL21kernel_handle_requestv+0x366>
    case NONE:
        /* Should not happen. */
        break;

    case TIMER_EXPIRED:
        kernel_update_ticker();
    32e8:	0e 94 30 16 	call	0x2c60	; 0x2c60 <_ZL20kernel_update_tickerv>

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->level == RR && cur_task->state == RUNNING)
    32ec:	80 91 5b 05 	lds	r24, 0x055B
    32f0:	90 91 5c 05 	lds	r25, 0x055C
    32f4:	fc 01       	movw	r30, r24
    32f6:	ea 5f       	subi	r30, 0xFA	; 250
    32f8:	fe 4f       	sbci	r31, 0xFE	; 254
    32fa:	80 81       	ld	r24, Z
    32fc:	81 30       	cpi	r24, 0x01	; 1
    32fe:	09 f0       	breq	.+2      	; 0x3302 <_ZL21kernel_handle_requestv+0xec>
    3300:	42 c1       	rjmp	.+644    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
    3302:	80 91 5b 05 	lds	r24, 0x055B
    3306:	90 91 5c 05 	lds	r25, 0x055C
    330a:	fc 01       	movw	r30, r24
    330c:	ed 5f       	subi	r30, 0xFD	; 253
    330e:	fe 4f       	sbci	r31, 0xFE	; 254
    3310:	80 81       	ld	r24, Z
    3312:	81 30       	cpi	r24, 0x01	; 1
    3314:	09 f0       	breq	.+2      	; 0x3318 <_ZL21kernel_handle_requestv+0x102>
    3316:	37 c1       	rjmp	.+622    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        {
            cur_task->state = READY;
    3318:	80 91 5b 05 	lds	r24, 0x055B
    331c:	90 91 5c 05 	lds	r25, 0x055C
    3320:	fc 01       	movw	r30, r24
    3322:	ed 5f       	subi	r30, 0xFD	; 253
    3324:	fe 4f       	sbci	r31, 0xFE	; 254
    3326:	82 e0       	ldi	r24, 0x02	; 2
    3328:	80 83       	st	Z, r24
            enqueue(&rr_queue, cur_task);
    332a:	20 91 5b 05 	lds	r18, 0x055B
    332e:	30 91 5c 05 	lds	r19, 0x055C
    3332:	8e ef       	ldi	r24, 0xFE	; 254
    3334:	9e e0       	ldi	r25, 0x0E	; 14
    3336:	b9 01       	movw	r22, r18
    3338:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
    333c:	24 c1       	rjmp	.+584    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        }
        break;

    case TASK_CREATE:
        kernel_request_retval = kernel_create_task();
    333e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZL18kernel_create_taskv>
    3342:	90 93 64 05 	sts	0x0564, r25
    3346:	80 93 63 05 	sts	0x0563, r24

        /* Check if new task has higer priority, and that it wasn't an ISR
         * making the request.
         */
        if(kernel_request_retval)
    334a:	80 91 63 05 	lds	r24, 0x0563
    334e:	90 91 64 05 	lds	r25, 0x0564
    3352:	1d 82       	std	Y+5, r1	; 0x05
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	11 f0       	breq	.+4      	; 0x335c <_ZL21kernel_handle_requestv+0x146>
    3358:	91 e0       	ldi	r25, 0x01	; 1
    335a:	9d 83       	std	Y+5, r25	; 0x05
    335c:	2d 81       	ldd	r18, Y+5	; 0x05
    335e:	22 23       	and	r18, r18
    3360:	09 f4       	brne	.+2      	; 0x3364 <_ZL21kernel_handle_requestv+0x14e>
    3362:	11 c1       	rjmp	.+546    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
    3364:	80 91 61 05 	lds	r24, 0x0561
    3368:	83 30       	cpi	r24, 0x03	; 3
    336a:	69 f4       	brne	.+26     	; 0x3386 <_ZL21kernel_handle_requestv+0x170>
    336c:	80 91 5b 05 	lds	r24, 0x055B
    3370:	90 91 5c 05 	lds	r25, 0x055C
    3374:	fc 01       	movw	r30, r24
    3376:	ea 5f       	subi	r30, 0xFA	; 250
    3378:	fe 4f       	sbci	r31, 0xFE	; 254
    337a:	80 81       	ld	r24, Z
    337c:	83 30       	cpi	r24, 0x03	; 3
    337e:	19 f0       	breq	.+6      	; 0x3386 <_ZL21kernel_handle_requestv+0x170>
    3380:	31 e0       	ldi	r19, 0x01	; 1
    3382:	3c 83       	std	Y+4, r19	; 0x04
    3384:	01 c0       	rjmp	.+2      	; 0x3388 <_ZL21kernel_handle_requestv+0x172>
    3386:	1c 82       	std	Y+4, r1	; 0x04
    3388:	8c 81       	ldd	r24, Y+4	; 0x04
    338a:	88 23       	and	r24, r24
    338c:	49 f0       	breq	.+18     	; 0x33a0 <_ZL21kernel_handle_requestv+0x18a>
            {
                cur_task->state = READY;
    338e:	80 91 5b 05 	lds	r24, 0x055B
    3392:	90 91 5c 05 	lds	r25, 0x055C
    3396:	fc 01       	movw	r30, r24
    3398:	ed 5f       	subi	r30, 0xFD	; 253
    339a:	fe 4f       	sbci	r31, 0xFE	; 254
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	80 83       	st	Z, r24
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
    33a0:	80 91 5b 05 	lds	r24, 0x055B
    33a4:	90 91 5c 05 	lds	r25, 0x055C
    33a8:	fc 01       	movw	r30, r24
    33aa:	ea 5f       	subi	r30, 0xFA	; 250
    33ac:	fe 4f       	sbci	r31, 0xFE	; 254
    33ae:	80 81       	ld	r24, Z
    33b0:	81 30       	cpi	r24, 0x01	; 1
    33b2:	99 f4       	brne	.+38     	; 0x33da <_ZL21kernel_handle_requestv+0x1c4>
    33b4:	80 91 61 05 	lds	r24, 0x0561
    33b8:	82 30       	cpi	r24, 0x02	; 2
    33ba:	79 f4       	brne	.+30     	; 0x33da <_ZL21kernel_handle_requestv+0x1c4>
    33bc:	80 91 db 0e 	lds	r24, 0x0EDB
    33c0:	90 91 dc 0e 	lds	r25, 0x0EDC
    33c4:	fc 01       	movw	r30, r24
    33c6:	eb 57       	subi	r30, 0x7B	; 123
    33c8:	fd 4f       	sbci	r31, 0xFD	; 253
    33ca:	90 81       	ld	r25, Z
    33cc:	80 91 62 05 	lds	r24, 0x0562
    33d0:	98 17       	cp	r25, r24
    33d2:	19 f4       	brne	.+6      	; 0x33da <_ZL21kernel_handle_requestv+0x1c4>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	8b 83       	std	Y+3, r24	; 0x03
    33d8:	01 c0       	rjmp	.+2      	; 0x33dc <_ZL21kernel_handle_requestv+0x1c6>
    33da:	1b 82       	std	Y+3, r1	; 0x03
    33dc:	8b 81       	ldd	r24, Y+3	; 0x03
    33de:	88 23       	and	r24, r24
    33e0:	49 f0       	breq	.+18     	; 0x33f4 <_ZL21kernel_handle_requestv+0x1de>
               kernel_request_create_args.level == PERIODIC &&
               PPP[slot_name_index] == kernel_request_create_args.name)
            {
                cur_task->state = READY;
    33e2:	80 91 5b 05 	lds	r24, 0x055B
    33e6:	90 91 5c 05 	lds	r25, 0x055C
    33ea:	fc 01       	movw	r30, r24
    33ec:	ed 5f       	subi	r30, 0xFD	; 253
    33ee:	fe 4f       	sbci	r31, 0xFE	; 254
    33f0:	82 e0       	ldi	r24, 0x02	; 2
    33f2:	80 83       	st	Z, r24
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
    33f4:	80 91 5b 05 	lds	r24, 0x055B
    33f8:	90 91 5c 05 	lds	r25, 0x055C
    33fc:	fc 01       	movw	r30, r24
    33fe:	ea 5f       	subi	r30, 0xFA	; 250
    3400:	fe 4f       	sbci	r31, 0xFE	; 254
    3402:	80 81       	ld	r24, Z
    3404:	81 30       	cpi	r24, 0x01	; 1
    3406:	09 f0       	breq	.+2      	; 0x340a <_ZL21kernel_handle_requestv+0x1f4>
    3408:	be c0       	rjmp	.+380    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
    340a:	80 91 5b 05 	lds	r24, 0x055B
    340e:	90 91 5c 05 	lds	r25, 0x055C
    3412:	fc 01       	movw	r30, r24
    3414:	ed 5f       	subi	r30, 0xFD	; 253
    3416:	fe 4f       	sbci	r31, 0xFE	; 254
    3418:	80 81       	ld	r24, Z
    341a:	82 30       	cpi	r24, 0x02	; 2
    341c:	09 f0       	breq	.+2      	; 0x3420 <_ZL21kernel_handle_requestv+0x20a>
    341e:	b3 c0       	rjmp	.+358    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
            {
                enqueue(&rr_queue, cur_task);
    3420:	20 91 5b 05 	lds	r18, 0x055B
    3424:	30 91 5c 05 	lds	r19, 0x055C
    3428:	8e ef       	ldi	r24, 0xFE	; 254
    342a:	9e e0       	ldi	r25, 0x0E	; 14
    342c:	b9 01       	movw	r22, r18
    342e:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
    3432:	a9 c0       	rjmp	.+338    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
            }
        }
        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
    3434:	20 91 5b 05 	lds	r18, 0x055B
    3438:	30 91 5c 05 	lds	r19, 0x055C
    343c:	80 91 75 03 	lds	r24, 0x0375
    3440:	90 91 76 03 	lds	r25, 0x0376
    3444:	28 17       	cp	r18, r24
    3446:	39 07       	cpc	r19, r25
    3448:	09 f4       	brne	.+2      	; 0x344c <_ZL21kernel_handle_requestv+0x236>
    344a:	9d c0       	rjmp	.+314    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
		{
        	kernel_terminate_task();
    344c:	0e 94 c9 12 	call	0x2592	; 0x2592 <_ZL21kernel_terminate_taskv>
    3450:	9a c0       	rjmp	.+308    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
		}
        break;

    case TASK_NEXT:
		switch(cur_task->level)
    3452:	80 91 5b 05 	lds	r24, 0x055B
    3456:	90 91 5c 05 	lds	r25, 0x055C
    345a:	fc 01       	movw	r30, r24
    345c:	ea 5f       	subi	r30, 0xFA	; 250
    345e:	fe 4f       	sbci	r31, 0xFE	; 254
    3460:	80 81       	ld	r24, Z
    3462:	28 2f       	mov	r18, r24
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	3a 83       	std	Y+2, r19	; 0x02
    3468:	29 83       	std	Y+1, r18	; 0x01
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	9a 81       	ldd	r25, Y+2	; 0x02
    346e:	82 30       	cpi	r24, 0x02	; 2
    3470:	91 05       	cpc	r25, r1
    3472:	a9 f0       	breq	.+42     	; 0x349e <_ZL21kernel_handle_requestv+0x288>
    3474:	29 81       	ldd	r18, Y+1	; 0x01
    3476:	3a 81       	ldd	r19, Y+2	; 0x02
    3478:	23 30       	cpi	r18, 0x03	; 3
    347a:	31 05       	cpc	r19, r1
    347c:	31 f0       	breq	.+12     	; 0x348a <_ZL21kernel_handle_requestv+0x274>
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
    3482:	81 30       	cpi	r24, 0x01	; 1
    3484:	91 05       	cpc	r25, r1
    3486:	79 f0       	breq	.+30     	; 0x34a6 <_ZL21kernel_handle_requestv+0x290>
    3488:	17 c0       	rjmp	.+46     	; 0x34b8 <_ZL21kernel_handle_requestv+0x2a2>
		{
	    case SYSTEM:
	        enqueue(&system_queue, cur_task);
    348a:	20 91 5b 05 	lds	r18, 0x055B
    348e:	30 91 5c 05 	lds	r19, 0x055C
    3492:	8c ec       	ldi	r24, 0xCC	; 204
    3494:	9e e0       	ldi	r25, 0x0E	; 14
    3496:	b9 01       	movw	r22, r18
    3498:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>
    349c:	0d c0       	rjmp	.+26     	; 0x34b8 <_ZL21kernel_handle_requestv+0x2a2>
			break;

	    case PERIODIC:
	        slot_task_finished = 1;
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	80 93 da 0e 	sts	0x0EDA, r24
    34a4:	09 c0       	rjmp	.+18     	; 0x34b8 <_ZL21kernel_handle_requestv+0x2a2>
	        break;

	    case RR:
	        enqueue(&rr_queue, cur_task);
    34a6:	20 91 5b 05 	lds	r18, 0x055B
    34aa:	30 91 5c 05 	lds	r19, 0x055C
    34ae:	8e ef       	ldi	r24, 0xFE	; 254
    34b0:	9e e0       	ldi	r25, 0x0E	; 14
    34b2:	b9 01       	movw	r22, r18
    34b4:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZL7enqueueP7queue_tP9td_struct>

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
    34b8:	80 91 5b 05 	lds	r24, 0x055B
    34bc:	90 91 5c 05 	lds	r25, 0x055C
    34c0:	fc 01       	movw	r30, r24
    34c2:	ed 5f       	subi	r30, 0xFD	; 253
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	82 e0       	ldi	r24, 0x02	; 2
    34c8:	80 83       	st	Z, r24
    34ca:	5d c0       	rjmp	.+186    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
    case TASK_GET_ARG:
        /* Should not happen. Handled in task itself. */
        break;

    case EVENT_INIT:
        kernel_request_event_ptr = NULL;
    34cc:	10 92 5a 05 	sts	0x055A, r1
    34d0:	10 92 59 05 	sts	0x0559, r1
        if(num_events_created < MAXEVENT)
    34d4:	80 91 dd 0e 	lds	r24, 0x0EDD
    34d8:	88 30       	cpi	r24, 0x08	; 8
    34da:	78 f4       	brcc	.+30     	; 0x34fa <_ZL21kernel_handle_requestv+0x2e4>
        {
            /* Pass a number back to the task, but pretend it is a pointer.
             * It is the index of the event_queue plus 1.
             * (0 is return value for failure.)
             */
            kernel_request_event_ptr = (EVENT *)(uint16_t)(num_events_created + 1);
    34dc:	80 91 dd 0e 	lds	r24, 0x0EDD
    34e0:	88 2f       	mov	r24, r24
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	90 93 5a 05 	sts	0x055A, r25
    34ea:	80 93 59 05 	sts	0x0559, r24
            /*
            event_queue[num_events_created].head = NULL;
            event_queue[num_events_created].tail = NULL;
            */
            ++num_events_created;
    34ee:	80 91 dd 0e 	lds	r24, 0x0EDD
    34f2:	8f 5f       	subi	r24, 0xFF	; 255
    34f4:	80 93 dd 0e 	sts	0x0EDD, r24
    34f8:	46 c0       	rjmp	.+140    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        }
        else
        {
            kernel_request_event_ptr = (EVENT *)(uint16_t)0;
    34fa:	10 92 5a 05 	sts	0x055A, r1
    34fe:	10 92 59 05 	sts	0x0559, r1
    3502:	41 c0       	rjmp	.+130    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        }
        break;

    case EVENT_WAIT:
        /* idle_task does not wait. */
		if(cur_task != idle_task)
    3504:	20 91 5b 05 	lds	r18, 0x055B
    3508:	30 91 5c 05 	lds	r19, 0x055C
    350c:	80 91 75 03 	lds	r24, 0x0375
    3510:	90 91 76 03 	lds	r25, 0x0376
    3514:	28 17       	cp	r18, r24
    3516:	39 07       	cpc	r19, r25
    3518:	b1 f1       	breq	.+108    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        {
            kernel_event_wait();
    351a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <_ZL17kernel_event_waitv>
    351e:	33 c0       	rjmp	.+102    	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        }

        break;

    case EVENT_SIGNAL:
        kernel_event_signal(0 /* not broadcast */, 0 /* not task_next */);
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_ZL19kernel_event_signalhh>
    3528:	2e c0       	rjmp	.+92     	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        break;

    case EVENT_BROADCAST:
        kernel_event_signal(1 /* is broadcast */, 0 /* not task_next */);
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	60 e0       	ldi	r22, 0x00	; 0
    352e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_ZL19kernel_event_signalhh>
    3532:	29 c0       	rjmp	.+82     	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        break;

    case EVENT_SIGNAL_AND_NEXT:
        if(cur_task->level == PERIODIC)
    3534:	80 91 5b 05 	lds	r24, 0x055B
    3538:	90 91 5c 05 	lds	r25, 0x055C
    353c:	fc 01       	movw	r30, r24
    353e:	ea 5f       	subi	r30, 0xFA	; 250
    3540:	fe 4f       	sbci	r31, 0xFE	; 254
    3542:	80 81       	ld	r24, Z
    3544:	82 30       	cpi	r24, 0x02	; 2
    3546:	19 f4       	brne	.+6      	; 0x354e <_ZL21kernel_handle_requestv+0x338>
        {
            slot_task_finished = 1;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	80 93 da 0e 	sts	0x0EDA, r24
        }

        kernel_event_signal(0 /* not broadcast */, 1 /* is task_next */);
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	61 e0       	ldi	r22, 0x01	; 1
    3552:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_ZL19kernel_event_signalhh>
    3556:	17 c0       	rjmp	.+46     	; 0x3586 <_ZL21kernel_handle_requestv+0x370>

        break;

    case EVENT_BROADCAST_AND_NEXT:
        if(cur_task->level == PERIODIC)
    3558:	80 91 5b 05 	lds	r24, 0x055B
    355c:	90 91 5c 05 	lds	r25, 0x055C
    3560:	fc 01       	movw	r30, r24
    3562:	ea 5f       	subi	r30, 0xFA	; 250
    3564:	fe 4f       	sbci	r31, 0xFE	; 254
    3566:	80 81       	ld	r24, Z
    3568:	82 30       	cpi	r24, 0x02	; 2
    356a:	19 f4       	brne	.+6      	; 0x3572 <_ZL21kernel_handle_requestv+0x35c>
        {
            slot_task_finished = 1;
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	80 93 da 0e 	sts	0x0EDA, r24
        }

        kernel_event_signal(1 /* is broadcast */, 1 /* is task_next */);
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	61 e0       	ldi	r22, 0x01	; 1
    3576:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_ZL19kernel_event_signalhh>
    357a:	05 c0       	rjmp	.+10     	; 0x3586 <_ZL21kernel_handle_requestv+0x370>
        break;

    default:
        /* Should never happen */
        error_msg = ERR_RUN_8_RTOS_INTERNAL_ERROR;
    357c:	8d e0       	ldi	r24, 0x0D	; 13
    357e:	80 93 74 03 	sts	0x0374, r24
        OS_Abort();
    3582:	0e 94 90 15 	call	0x2b20	; 0x2b20 <OS_Abort>
        break;
    }

    kernel_request = NONE;
    3586:	10 92 58 05 	sts	0x0558, r1
}
    358a:	27 96       	adiw	r28, 0x07	; 7
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	f8 94       	cli
    3590:	de bf       	out	0x3e, r29	; 62
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	cd bf       	out	0x3d, r28	; 61
    3596:	cf 91       	pop	r28
    3598:	df 91       	pop	r29
    359a:	08 95       	ret

0000359c <_ZL16kernel_main_loopv>:
 *<li>Exit the kernel (The loop is left and re-entered here.)</li>
 *<li>Handle the request from the process that was running.</li>
 *<li>End loop, go to 1.</li>
 *</ol>
 */
static void kernel_main_loop(void)
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
{
    for(;;)
    {
        kernel_dispatch();
    35a4:	0e 94 2d 13 	call	0x265a	; 0x265a <_ZL15kernel_dispatchv>

        exit_kernel();
    35a8:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZL11exit_kernelv>

        /* if this task makes a system call, or is interrupted,
         * the thread of control will return to here. */

        kernel_handle_request();
    35ac:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZL21kernel_handle_requestv>
    35b0:	f9 cf       	rjmp	.-14     	; 0x35a4 <_ZL16kernel_main_loopv+0x8>

000035b2 <OS_Init>:
/**
 * @brief Setup the RTOS and create main() as the first SYSTEM level task.
 *
 * Point of entry from the C runtime crt0.S.
 */
void OS_Init()
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <OS_Init+0x6>
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
{
    int i;

    /* Set up the clocks */

    TCCR1B |= (_BV(CS11));
    35bc:	a1 e8       	ldi	r26, 0x81	; 129
    35be:	b0 e0       	ldi	r27, 0x00	; 0
    35c0:	e1 e8       	ldi	r30, 0x81	; 129
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	80 81       	ld	r24, Z
    35c6:	82 60       	ori	r24, 0x02	; 2
    35c8:	8c 93       	st	X, r24

#ifdef SLOW_CLOCK
    kernel_slow_clock();
#endif

    check_PPP_names();
    35ca:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <_ZL15check_PPP_namesv>
    /*
     * Initialize dead pool to contain all but last task descriptor.
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    35ce:	1a 82       	std	Y+2, r1	; 0x02
    35d0:	19 82       	std	Y+1, r1	; 0x01
    35d2:	41 c0       	rjmp	.+130    	; 0x3656 <OS_Init+0xa4>
    {
        task_desc[i].state = DEAD;
    35d4:	29 81       	ldd	r18, Y+1	; 0x01
    35d6:	3a 81       	ldd	r19, Y+2	; 0x02
    35d8:	89 e0       	ldi	r24, 0x09	; 9
    35da:	91 e0       	ldi	r25, 0x01	; 1
    35dc:	ac 01       	movw	r20, r24
    35de:	24 9f       	mul	r18, r20
    35e0:	c0 01       	movw	r24, r0
    35e2:	25 9f       	mul	r18, r21
    35e4:	90 0d       	add	r25, r0
    35e6:	34 9f       	mul	r19, r20
    35e8:	90 0d       	add	r25, r0
    35ea:	11 24       	eor	r1, r1
    35ec:	fc 01       	movw	r30, r24
    35ee:	e8 59       	subi	r30, 0x98	; 152
    35f0:	f9 4f       	sbci	r31, 0xF9	; 249
    35f2:	10 82       	st	Z, r1
        name_to_task_ptr[i] = NULL;
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	fc 01       	movw	r30, r24
    35fe:	ea 54       	subi	r30, 0x4A	; 74
    3600:	f1 4f       	sbci	r31, 0xF1	; 241
    3602:	11 82       	std	Z+1, r1	; 0x01
    3604:	10 82       	st	Z, r1
        task_desc[i].next = &task_desc[i + 1];
    3606:	49 81       	ldd	r20, Y+1	; 0x01
    3608:	5a 81       	ldd	r21, Y+2	; 0x02
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	9a 81       	ldd	r25, Y+2	; 0x02
    360e:	9c 01       	movw	r18, r24
    3610:	2f 5f       	subi	r18, 0xFF	; 255
    3612:	3f 4f       	sbci	r19, 0xFF	; 255
    3614:	89 e0       	ldi	r24, 0x09	; 9
    3616:	91 e0       	ldi	r25, 0x01	; 1
    3618:	bc 01       	movw	r22, r24
    361a:	26 9f       	mul	r18, r22
    361c:	c0 01       	movw	r24, r0
    361e:	27 9f       	mul	r18, r23
    3620:	90 0d       	add	r25, r0
    3622:	36 9f       	mul	r19, r22
    3624:	90 0d       	add	r25, r0
    3626:	11 24       	eor	r1, r1
    3628:	9c 01       	movw	r18, r24
    362a:	2b 59       	subi	r18, 0x9B	; 155
    362c:	3a 4f       	sbci	r19, 0xFA	; 250
    362e:	89 e0       	ldi	r24, 0x09	; 9
    3630:	91 e0       	ldi	r25, 0x01	; 1
    3632:	bc 01       	movw	r22, r24
    3634:	46 9f       	mul	r20, r22
    3636:	c0 01       	movw	r24, r0
    3638:	47 9f       	mul	r20, r23
    363a:	90 0d       	add	r25, r0
    363c:	56 9f       	mul	r21, r22
    363e:	90 0d       	add	r25, r0
    3640:	11 24       	eor	r1, r1
    3642:	fc 01       	movw	r30, r24
    3644:	e4 59       	subi	r30, 0x94	; 148
    3646:	f9 4f       	sbci	r31, 0xF9	; 249
    3648:	31 83       	std	Z+1, r19	; 0x01
    364a:	20 83       	st	Z, r18
    /*
     * Initialize dead pool to contain all but last task descriptor.
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	01 96       	adiw	r24, 0x01	; 1
    3652:	9a 83       	std	Y+2, r25	; 0x02
    3654:	89 83       	std	Y+1, r24	; 0x01
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	9a 81       	ldd	r25, Y+2	; 0x02
    365a:	87 30       	cpi	r24, 0x07	; 7
    365c:	91 05       	cpc	r25, r1
    365e:	0c f4       	brge	.+2      	; 0x3662 <OS_Init+0xb0>
    3660:	b9 cf       	rjmp	.-142    	; 0x35d4 <OS_Init+0x22>
    {
        task_desc[i].state = DEAD;
        name_to_task_ptr[i] = NULL;
        task_desc[i].next = &task_desc[i + 1];
    }
    task_desc[MAXPROCESS - 1].next = NULL;
    3662:	10 92 ac 0d 	sts	0x0DAC, r1
    3666:	10 92 ab 0d 	sts	0x0DAB, r1
    dead_pool_queue.head = &task_desc[0];
    366a:	85 e6       	ldi	r24, 0x65	; 101
    366c:	95 e0       	ldi	r25, 0x05	; 5
    366e:	90 93 c9 0e 	sts	0x0EC9, r25
    3672:	80 93 c8 0e 	sts	0x0EC8, r24
    dead_pool_queue.tail = &task_desc[MAXPROCESS - 1];
    3676:	84 ea       	ldi	r24, 0xA4	; 164
    3678:	9c e0       	ldi	r25, 0x0C	; 12
    367a:	90 93 cb 0e 	sts	0x0ECB, r25
    367e:	80 93 ca 0e 	sts	0x0ECA, r24

	/* Create idle "task" */
    kernel_request_create_args.f = (voidfuncvoid_ptr)idle;
    3682:	8f e5       	ldi	r24, 0x5F	; 95
    3684:	91 e1       	ldi	r25, 0x11	; 17
    3686:	90 93 5e 05 	sts	0x055E, r25
    368a:	80 93 5d 05 	sts	0x055D, r24
    kernel_request_create_args.level = NULL;
    368e:	10 92 61 05 	sts	0x0561, r1
    kernel_create_task();
    3692:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZL18kernel_create_taskv>

    /* Create "main" task as SYSTEM level. */
    kernel_request_create_args.f = (voidfuncvoid_ptr)r_main;
    3696:	87 e3       	ldi	r24, 0x37	; 55
    3698:	94 e0       	ldi	r25, 0x04	; 4
    369a:	90 93 5e 05 	sts	0x055E, r25
    369e:	80 93 5d 05 	sts	0x055D, r24
    kernel_request_create_args.level = SYSTEM;
    36a2:	83 e0       	ldi	r24, 0x03	; 3
    36a4:	80 93 61 05 	sts	0x0561, r24
    kernel_create_task();
    36a8:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZL18kernel_create_taskv>

    /* First time through. Select "main" task to run first. */
    cur_task = task_desc;
    36ac:	85 e6       	ldi	r24, 0x65	; 101
    36ae:	95 e0       	ldi	r25, 0x05	; 5
    36b0:	90 93 5c 05 	sts	0x055C, r25
    36b4:	80 93 5b 05 	sts	0x055B, r24
    cur_task->state = RUNNING;
    36b8:	80 91 5b 05 	lds	r24, 0x055B
    36bc:	90 91 5c 05 	lds	r25, 0x055C
    36c0:	fc 01       	movw	r30, r24
    36c2:	ed 5f       	subi	r30, 0xFD	; 253
    36c4:	fe 4f       	sbci	r31, 0xFE	; 254
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	80 83       	st	Z, r24
    dequeue(&system_queue);
    36ca:	8c ec       	ldi	r24, 0xCC	; 204
    36cc:	9e e0       	ldi	r25, 0x0E	; 14
    36ce:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZL7dequeueP7queue_t>

    /* Initilize time slot */
    if(PT > 0)
    36d2:	80 91 8f 02 	lds	r24, 0x028F
    36d6:	90 91 90 02 	lds	r25, 0x0290
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	21 f0       	breq	.+8      	; 0x36e6 <OS_Init+0x134>
    {
        ticks_remaining = PPP[1];
    36de:	80 91 86 02 	lds	r24, 0x0286
    36e2:	80 93 d0 0e 	sts	0x0ED0, r24
    }

    /* Set up Timer 1 Output Compare interrupt,the TICK clock. */
    TIMSK1 |= _BV(OCIE1A);
    36e6:	af e6       	ldi	r26, 0x6F	; 111
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	ef e6       	ldi	r30, 0x6F	; 111
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	82 60       	ori	r24, 0x02	; 2
    36f2:	8c 93       	st	X, r24
    OCR1A = TCNT1 + TICK_CYCLES;
    36f4:	a8 e8       	ldi	r26, 0x88	; 136
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e4 e8       	ldi	r30, 0x84	; 132
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	91 81       	ldd	r25, Z+1	; 0x01
    3700:	80 5f       	subi	r24, 0xF0	; 240
    3702:	98 4d       	sbci	r25, 0xD8	; 216
    3704:	11 96       	adiw	r26, 0x01	; 1
    3706:	9c 93       	st	X, r25
    3708:	8e 93       	st	-X, r24
    /* Clear flag. */
    TIFR1 = _BV(OCF1A);
    370a:	e6 e3       	ldi	r30, 0x36	; 54
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	82 e0       	ldi	r24, 0x02	; 2
    3710:	80 83       	st	Z, r24

    /*
     * The main loop of the RTOS kernel.
     */
    kernel_main_loop();
    3712:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZL16kernel_main_loopv>
}
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <main>:
}

/**
 * Runtime entry point into the program; just start the RTOS.  The application layer must define r_main() for its entry point.
 */
int main()
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
{
	OS_Init();
    3728:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <OS_Init>
	return 0;
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	90 e0       	ldi	r25, 0x00	; 0
}
    3730:	cf 91       	pop	r28
    3732:	df 91       	pop	r29
    3734:	08 95       	ret

00003736 <_Z10store_charhP11ring_buffer>:
    3736:	0f 93       	push	r16
    3738:	1f 93       	push	r17
    373a:	cf 93       	push	r28
    373c:	df 93       	push	r29
    373e:	48 2f       	mov	r20, r24
    3740:	fb 01       	movw	r30, r22
    3742:	8b 01       	movw	r16, r22
    3744:	00 58       	subi	r16, 0x80	; 128
    3746:	1f 4f       	sbci	r17, 0xFF	; 255
    3748:	d8 01       	movw	r26, r16
    374a:	cd 91       	ld	r28, X+
    374c:	dc 91       	ld	r29, X
    374e:	ce 01       	movw	r24, r28
    3750:	01 96       	adiw	r24, 0x01	; 1
    3752:	60 e8       	ldi	r22, 0x80	; 128
    3754:	70 e0       	ldi	r23, 0x00	; 0
    3756:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divmodhi4>
    375a:	9c 01       	movw	r18, r24
    375c:	ee 57       	subi	r30, 0x7E	; 126
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	80 81       	ld	r24, Z
    3762:	91 81       	ldd	r25, Z+1	; 0x01
    3764:	e2 58       	subi	r30, 0x82	; 130
    3766:	f0 40       	sbci	r31, 0x00	; 0
    3768:	28 17       	cp	r18, r24
    376a:	39 07       	cpc	r19, r25
    376c:	31 f0       	breq	.+12     	; 0x377a <_Z10store_charhP11ring_buffer+0x44>
    376e:	ce 0f       	add	r28, r30
    3770:	df 1f       	adc	r29, r31
    3772:	48 83       	st	Y, r20
    3774:	f8 01       	movw	r30, r16
    3776:	31 83       	std	Z+1, r19	; 0x01
    3778:	20 83       	st	Z, r18
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    3782:	08 95       	ret

00003784 <__vector_25>:
    3784:	1f 92       	push	r1
    3786:	0f 92       	push	r0
    3788:	0f b6       	in	r0, 0x3f	; 63
    378a:	0f 92       	push	r0
    378c:	0b b6       	in	r0, 0x3b	; 59
    378e:	0f 92       	push	r0
    3790:	11 24       	eor	r1, r1
    3792:	2f 93       	push	r18
    3794:	3f 93       	push	r19
    3796:	4f 93       	push	r20
    3798:	5f 93       	push	r21
    379a:	6f 93       	push	r22
    379c:	7f 93       	push	r23
    379e:	8f 93       	push	r24
    37a0:	9f 93       	push	r25
    37a2:	af 93       	push	r26
    37a4:	bf 93       	push	r27
    37a6:	ef 93       	push	r30
    37a8:	ff 93       	push	r31
    37aa:	80 91 c6 00 	lds	r24, 0x00C6
    37ae:	64 e0       	ldi	r22, 0x04	; 4
    37b0:	7f e0       	ldi	r23, 0x0F	; 15
    37b2:	0e 94 9b 1b 	call	0x3736	; 0x3736 <_Z10store_charhP11ring_buffer>
    37b6:	ff 91       	pop	r31
    37b8:	ef 91       	pop	r30
    37ba:	bf 91       	pop	r27
    37bc:	af 91       	pop	r26
    37be:	9f 91       	pop	r25
    37c0:	8f 91       	pop	r24
    37c2:	7f 91       	pop	r23
    37c4:	6f 91       	pop	r22
    37c6:	5f 91       	pop	r21
    37c8:	4f 91       	pop	r20
    37ca:	3f 91       	pop	r19
    37cc:	2f 91       	pop	r18
    37ce:	0f 90       	pop	r0
    37d0:	0b be       	out	0x3b, r0	; 59
    37d2:	0f 90       	pop	r0
    37d4:	0f be       	out	0x3f, r0	; 63
    37d6:	0f 90       	pop	r0
    37d8:	1f 90       	pop	r1
    37da:	18 95       	reti

000037dc <__vector_36>:
    37dc:	1f 92       	push	r1
    37de:	0f 92       	push	r0
    37e0:	0f b6       	in	r0, 0x3f	; 63
    37e2:	0f 92       	push	r0
    37e4:	0b b6       	in	r0, 0x3b	; 59
    37e6:	0f 92       	push	r0
    37e8:	11 24       	eor	r1, r1
    37ea:	2f 93       	push	r18
    37ec:	3f 93       	push	r19
    37ee:	4f 93       	push	r20
    37f0:	5f 93       	push	r21
    37f2:	6f 93       	push	r22
    37f4:	7f 93       	push	r23
    37f6:	8f 93       	push	r24
    37f8:	9f 93       	push	r25
    37fa:	af 93       	push	r26
    37fc:	bf 93       	push	r27
    37fe:	ef 93       	push	r30
    3800:	ff 93       	push	r31
    3802:	80 91 ce 00 	lds	r24, 0x00CE
    3806:	68 e8       	ldi	r22, 0x88	; 136
    3808:	7f e0       	ldi	r23, 0x0F	; 15
    380a:	0e 94 9b 1b 	call	0x3736	; 0x3736 <_Z10store_charhP11ring_buffer>
    380e:	ff 91       	pop	r31
    3810:	ef 91       	pop	r30
    3812:	bf 91       	pop	r27
    3814:	af 91       	pop	r26
    3816:	9f 91       	pop	r25
    3818:	8f 91       	pop	r24
    381a:	7f 91       	pop	r23
    381c:	6f 91       	pop	r22
    381e:	5f 91       	pop	r21
    3820:	4f 91       	pop	r20
    3822:	3f 91       	pop	r19
    3824:	2f 91       	pop	r18
    3826:	0f 90       	pop	r0
    3828:	0b be       	out	0x3b, r0	; 59
    382a:	0f 90       	pop	r0
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	0f 90       	pop	r0
    3830:	1f 90       	pop	r1
    3832:	18 95       	reti

00003834 <__vector_51>:
    3834:	1f 92       	push	r1
    3836:	0f 92       	push	r0
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	0f 92       	push	r0
    383c:	0b b6       	in	r0, 0x3b	; 59
    383e:	0f 92       	push	r0
    3840:	11 24       	eor	r1, r1
    3842:	2f 93       	push	r18
    3844:	3f 93       	push	r19
    3846:	4f 93       	push	r20
    3848:	5f 93       	push	r21
    384a:	6f 93       	push	r22
    384c:	7f 93       	push	r23
    384e:	8f 93       	push	r24
    3850:	9f 93       	push	r25
    3852:	af 93       	push	r26
    3854:	bf 93       	push	r27
    3856:	ef 93       	push	r30
    3858:	ff 93       	push	r31
    385a:	80 91 d6 00 	lds	r24, 0x00D6
    385e:	6c e0       	ldi	r22, 0x0C	; 12
    3860:	70 e1       	ldi	r23, 0x10	; 16
    3862:	0e 94 9b 1b 	call	0x3736	; 0x3736 <_Z10store_charhP11ring_buffer>
    3866:	ff 91       	pop	r31
    3868:	ef 91       	pop	r30
    386a:	bf 91       	pop	r27
    386c:	af 91       	pop	r26
    386e:	9f 91       	pop	r25
    3870:	8f 91       	pop	r24
    3872:	7f 91       	pop	r23
    3874:	6f 91       	pop	r22
    3876:	5f 91       	pop	r21
    3878:	4f 91       	pop	r20
    387a:	3f 91       	pop	r19
    387c:	2f 91       	pop	r18
    387e:	0f 90       	pop	r0
    3880:	0b be       	out	0x3b, r0	; 59
    3882:	0f 90       	pop	r0
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	0f 90       	pop	r0
    3888:	1f 90       	pop	r1
    388a:	18 95       	reti

0000388c <__vector_54>:
    388c:	1f 92       	push	r1
    388e:	0f 92       	push	r0
    3890:	0f b6       	in	r0, 0x3f	; 63
    3892:	0f 92       	push	r0
    3894:	0b b6       	in	r0, 0x3b	; 59
    3896:	0f 92       	push	r0
    3898:	11 24       	eor	r1, r1
    389a:	2f 93       	push	r18
    389c:	3f 93       	push	r19
    389e:	4f 93       	push	r20
    38a0:	5f 93       	push	r21
    38a2:	6f 93       	push	r22
    38a4:	7f 93       	push	r23
    38a6:	8f 93       	push	r24
    38a8:	9f 93       	push	r25
    38aa:	af 93       	push	r26
    38ac:	bf 93       	push	r27
    38ae:	ef 93       	push	r30
    38b0:	ff 93       	push	r31
    38b2:	80 91 36 01 	lds	r24, 0x0136
    38b6:	60 e9       	ldi	r22, 0x90	; 144
    38b8:	70 e1       	ldi	r23, 0x10	; 16
    38ba:	0e 94 9b 1b 	call	0x3736	; 0x3736 <_Z10store_charhP11ring_buffer>
    38be:	ff 91       	pop	r31
    38c0:	ef 91       	pop	r30
    38c2:	bf 91       	pop	r27
    38c4:	af 91       	pop	r26
    38c6:	9f 91       	pop	r25
    38c8:	8f 91       	pop	r24
    38ca:	7f 91       	pop	r23
    38cc:	6f 91       	pop	r22
    38ce:	5f 91       	pop	r21
    38d0:	4f 91       	pop	r20
    38d2:	3f 91       	pop	r19
    38d4:	2f 91       	pop	r18
    38d6:	0f 90       	pop	r0
    38d8:	0b be       	out	0x3b, r0	; 59
    38da:	0f 90       	pop	r0
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	0f 90       	pop	r0
    38e0:	1f 90       	pop	r1
    38e2:	18 95       	reti

000038e4 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:
    38e4:	8f 92       	push	r8
    38e6:	af 92       	push	r10
    38e8:	cf 92       	push	r12
    38ea:	df 92       	push	r13
    38ec:	ef 92       	push	r14
    38ee:	ff 92       	push	r15
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	df 93       	push	r29
    38f6:	cf 93       	push	r28
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
    38fc:	fc 01       	movw	r30, r24
    38fe:	8b e7       	ldi	r24, 0x7B	; 123
    3900:	93 e0       	ldi	r25, 0x03	; 3
    3902:	91 83       	std	Z+1, r25	; 0x01
    3904:	80 83       	st	Z, r24
    3906:	73 83       	std	Z+3, r23	; 0x03
    3908:	62 83       	std	Z+2, r22	; 0x02
    390a:	55 83       	std	Z+5, r21	; 0x05
    390c:	44 83       	std	Z+4, r20	; 0x04
    390e:	37 83       	std	Z+7, r19	; 0x07
    3910:	26 83       	std	Z+6, r18	; 0x06
    3912:	11 87       	std	Z+9, r17	; 0x09
    3914:	00 87       	std	Z+8, r16	; 0x08
    3916:	f3 86       	std	Z+11, r15	; 0x0b
    3918:	e2 86       	std	Z+10, r14	; 0x0a
    391a:	d5 86       	std	Z+13, r13	; 0x0d
    391c:	c4 86       	std	Z+12, r12	; 0x0c
    391e:	a6 86       	std	Z+14, r10	; 0x0e
    3920:	87 86       	std	Z+15, r8	; 0x0f
    3922:	8d 85       	ldd	r24, Y+13	; 0x0d
    3924:	80 8b       	std	Z+16, r24	; 0x10
    3926:	8e 85       	ldd	r24, Y+14	; 0x0e
    3928:	81 8b       	std	Z+17, r24	; 0x11
    392a:	8f 85       	ldd	r24, Y+15	; 0x0f
    392c:	82 8b       	std	Z+18, r24	; 0x12
    392e:	cf 91       	pop	r28
    3930:	df 91       	pop	r29
    3932:	1f 91       	pop	r17
    3934:	0f 91       	pop	r16
    3936:	ff 90       	pop	r15
    3938:	ef 90       	pop	r14
    393a:	df 90       	pop	r13
    393c:	cf 90       	pop	r12
    393e:	af 90       	pop	r10
    3940:	8f 90       	pop	r8
    3942:	08 95       	ret

00003944 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:
    3944:	8f 92       	push	r8
    3946:	af 92       	push	r10
    3948:	cf 92       	push	r12
    394a:	df 92       	push	r13
    394c:	ef 92       	push	r14
    394e:	ff 92       	push	r15
    3950:	0f 93       	push	r16
    3952:	1f 93       	push	r17
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	fc 01       	movw	r30, r24
    395e:	8b e7       	ldi	r24, 0x7B	; 123
    3960:	93 e0       	ldi	r25, 0x03	; 3
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	80 83       	st	Z, r24
    3966:	73 83       	std	Z+3, r23	; 0x03
    3968:	62 83       	std	Z+2, r22	; 0x02
    396a:	55 83       	std	Z+5, r21	; 0x05
    396c:	44 83       	std	Z+4, r20	; 0x04
    396e:	37 83       	std	Z+7, r19	; 0x07
    3970:	26 83       	std	Z+6, r18	; 0x06
    3972:	11 87       	std	Z+9, r17	; 0x09
    3974:	00 87       	std	Z+8, r16	; 0x08
    3976:	f3 86       	std	Z+11, r15	; 0x0b
    3978:	e2 86       	std	Z+10, r14	; 0x0a
    397a:	d5 86       	std	Z+13, r13	; 0x0d
    397c:	c4 86       	std	Z+12, r12	; 0x0c
    397e:	a6 86       	std	Z+14, r10	; 0x0e
    3980:	87 86       	std	Z+15, r8	; 0x0f
    3982:	8d 85       	ldd	r24, Y+13	; 0x0d
    3984:	80 8b       	std	Z+16, r24	; 0x10
    3986:	8e 85       	ldd	r24, Y+14	; 0x0e
    3988:	81 8b       	std	Z+17, r24	; 0x11
    398a:	8f 85       	ldd	r24, Y+15	; 0x0f
    398c:	82 8b       	std	Z+18, r24	; 0x12
    398e:	cf 91       	pop	r28
    3990:	df 91       	pop	r29
    3992:	1f 91       	pop	r17
    3994:	0f 91       	pop	r16
    3996:	ff 90       	pop	r15
    3998:	ef 90       	pop	r14
    399a:	df 90       	pop	r13
    399c:	cf 90       	pop	r12
    399e:	af 90       	pop	r10
    39a0:	8f 90       	pop	r8
    39a2:	08 95       	ret

000039a4 <_ZN14HardwareSerial5beginEl>:
    39a4:	5f 92       	push	r5
    39a6:	6f 92       	push	r6
    39a8:	7f 92       	push	r7
    39aa:	8f 92       	push	r8
    39ac:	9f 92       	push	r9
    39ae:	af 92       	push	r10
    39b0:	bf 92       	push	r11
    39b2:	cf 92       	push	r12
    39b4:	df 92       	push	r13
    39b6:	ef 92       	push	r14
    39b8:	ff 92       	push	r15
    39ba:	0f 93       	push	r16
    39bc:	1f 93       	push	r17
    39be:	cf 93       	push	r28
    39c0:	df 93       	push	r29
    39c2:	ec 01       	movw	r28, r24
    39c4:	5a 01       	movw	r10, r20
    39c6:	6b 01       	movw	r12, r22
    39c8:	81 e4       	ldi	r24, 0x41	; 65
    39ca:	a8 16       	cp	r10, r24
    39cc:	82 e4       	ldi	r24, 0x42	; 66
    39ce:	b8 06       	cpc	r11, r24
    39d0:	8f e0       	ldi	r24, 0x0F	; 15
    39d2:	c8 06       	cpc	r12, r24
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	d8 06       	cpc	r13, r24
    39d8:	08 f0       	brcs	.+2      	; 0x39dc <_ZN14HardwareSerial5beginEl+0x38>
    39da:	77 c0       	rjmp	.+238    	; 0x3aca <_ZN14HardwareSerial5beginEl+0x126>
    39dc:	60 e8       	ldi	r22, 0x80	; 128
    39de:	74 e8       	ldi	r23, 0x84	; 132
    39e0:	8e e1       	ldi	r24, 0x1E	; 30
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	a6 01       	movw	r20, r12
    39e6:	95 01       	movw	r18, r10
    39e8:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodsi4>
    39ec:	39 01       	movw	r6, r18
    39ee:	4a 01       	movw	r8, r20
    39f0:	08 94       	sec
    39f2:	61 08       	sbc	r6, r1
    39f4:	71 08       	sbc	r7, r1
    39f6:	81 08       	sbc	r8, r1
    39f8:	91 08       	sbc	r9, r1
    39fa:	96 94       	lsr	r9
    39fc:	87 94       	ror	r8
    39fe:	77 94       	ror	r7
    3a00:	67 94       	ror	r6
    3a02:	a4 01       	movw	r20, r8
    3a04:	93 01       	movw	r18, r6
    3a06:	2f 5f       	subi	r18, 0xFF	; 255
    3a08:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0a:	4f 4f       	sbci	r20, 0xFF	; 255
    3a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a0e:	74 e0       	ldi	r23, 0x04	; 4
    3a10:	22 0f       	add	r18, r18
    3a12:	33 1f       	adc	r19, r19
    3a14:	44 1f       	adc	r20, r20
    3a16:	55 1f       	adc	r21, r21
    3a18:	7a 95       	dec	r23
    3a1a:	d1 f7       	brne	.-12     	; 0x3a10 <_ZN14HardwareSerial5beginEl+0x6c>
    3a1c:	60 e0       	ldi	r22, 0x00	; 0
    3a1e:	74 e2       	ldi	r23, 0x24	; 36
    3a20:	84 ef       	ldi	r24, 0xF4	; 244
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodsi4>
    3a28:	ca 01       	movw	r24, r20
    3a2a:	b9 01       	movw	r22, r18
    3a2c:	2f ef       	ldi	r18, 0xFF	; 255
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e0       	ldi	r20, 0x00	; 0
    3a32:	50 e0       	ldi	r21, 0x00	; 0
    3a34:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <__mulsi3>
    3a38:	a6 01       	movw	r20, r12
    3a3a:	95 01       	movw	r18, r10
    3a3c:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodsi4>
    3a40:	8f ef       	ldi	r24, 0xFF	; 255
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	82 1b       	sub	r24, r18
    3a46:	93 0b       	sbc	r25, r19
    3a48:	18 16       	cp	r1, r24
    3a4a:	19 06       	cpc	r1, r25
    3a4c:	1c f4       	brge	.+6      	; 0x3a54 <_ZN14HardwareSerial5beginEl+0xb0>
    3a4e:	52 2e       	mov	r5, r18
    3a50:	50 94       	com	r5
    3a52:	02 c0       	rjmp	.+4      	; 0x3a58 <_ZN14HardwareSerial5beginEl+0xb4>
    3a54:	52 2e       	mov	r5, r18
    3a56:	53 94       	inc	r5
    3a58:	60 e0       	ldi	r22, 0x00	; 0
    3a5a:	79 e0       	ldi	r23, 0x09	; 9
    3a5c:	8d e3       	ldi	r24, 0x3D	; 61
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	a6 01       	movw	r20, r12
    3a62:	95 01       	movw	r18, r10
    3a64:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodsi4>
    3a68:	21 50       	subi	r18, 0x01	; 1
    3a6a:	30 40       	sbci	r19, 0x00	; 0
    3a6c:	40 40       	sbci	r20, 0x00	; 0
    3a6e:	50 40       	sbci	r21, 0x00	; 0
    3a70:	56 95       	lsr	r21
    3a72:	47 95       	ror	r20
    3a74:	37 95       	ror	r19
    3a76:	27 95       	ror	r18
    3a78:	2f 5f       	subi	r18, 0xFF	; 255
    3a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7c:	4f 4f       	sbci	r20, 0xFF	; 255
    3a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a80:	93 e0       	ldi	r25, 0x03	; 3
    3a82:	22 0f       	add	r18, r18
    3a84:	33 1f       	adc	r19, r19
    3a86:	44 1f       	adc	r20, r20
    3a88:	55 1f       	adc	r21, r21
    3a8a:	9a 95       	dec	r25
    3a8c:	d1 f7       	brne	.-12     	; 0x3a82 <_ZN14HardwareSerial5beginEl+0xde>
    3a8e:	60 e0       	ldi	r22, 0x00	; 0
    3a90:	74 e2       	ldi	r23, 0x24	; 36
    3a92:	84 ef       	ldi	r24, 0xF4	; 244
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodsi4>
    3a9a:	ca 01       	movw	r24, r20
    3a9c:	b9 01       	movw	r22, r18
    3a9e:	2f ef       	ldi	r18, 0xFF	; 255
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <__mulsi3>
    3aaa:	a6 01       	movw	r20, r12
    3aac:	95 01       	movw	r18, r10
    3aae:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodsi4>
    3ab2:	8f ef       	ldi	r24, 0xFF	; 255
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	82 1b       	sub	r24, r18
    3ab8:	93 0b       	sbc	r25, r19
    3aba:	18 16       	cp	r1, r24
    3abc:	19 06       	cpc	r1, r25
    3abe:	14 f4       	brge	.+4      	; 0x3ac4 <_ZN14HardwareSerial5beginEl+0x120>
    3ac0:	20 95       	com	r18
    3ac2:	01 c0       	rjmp	.+2      	; 0x3ac6 <_ZN14HardwareSerial5beginEl+0x122>
    3ac4:	2f 5f       	subi	r18, 0xFF	; 255
    3ac6:	25 15       	cp	r18, r5
    3ac8:	f0 f4       	brcc	.+60     	; 0x3b06 <_ZN14HardwareSerial5beginEl+0x162>
    3aca:	e8 85       	ldd	r30, Y+8	; 0x08
    3acc:	f9 85       	ldd	r31, Y+9	; 0x09
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	0a 88       	ldd	r0, Y+18	; 0x12
    3ad4:	02 c0       	rjmp	.+4      	; 0x3ada <_ZN14HardwareSerial5beginEl+0x136>
    3ad6:	88 0f       	add	r24, r24
    3ad8:	99 1f       	adc	r25, r25
    3ada:	0a 94       	dec	r0
    3adc:	e2 f7       	brpl	.-8      	; 0x3ad6 <_ZN14HardwareSerial5beginEl+0x132>
    3ade:	80 83       	st	Z, r24
    3ae0:	60 e0       	ldi	r22, 0x00	; 0
    3ae2:	79 e0       	ldi	r23, 0x09	; 9
    3ae4:	8d e3       	ldi	r24, 0x3D	; 61
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	a6 01       	movw	r20, r12
    3aea:	95 01       	movw	r18, r10
    3aec:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodsi4>
    3af0:	21 50       	subi	r18, 0x01	; 1
    3af2:	30 40       	sbci	r19, 0x00	; 0
    3af4:	40 40       	sbci	r20, 0x00	; 0
    3af6:	50 40       	sbci	r21, 0x00	; 0
    3af8:	56 95       	lsr	r21
    3afa:	47 95       	ror	r20
    3afc:	37 95       	ror	r19
    3afe:	27 95       	ror	r18
    3b00:	82 2f       	mov	r24, r18
    3b02:	23 2f       	mov	r18, r19
    3b04:	05 c0       	rjmp	.+10     	; 0x3b10 <_ZN14HardwareSerial5beginEl+0x16c>
    3b06:	e8 85       	ldd	r30, Y+8	; 0x08
    3b08:	f9 85       	ldd	r31, Y+9	; 0x09
    3b0a:	10 82       	st	Z, r1
    3b0c:	86 2d       	mov	r24, r6
    3b0e:	27 2d       	mov	r18, r7
    3b10:	ec 81       	ldd	r30, Y+4	; 0x04
    3b12:	fd 81       	ldd	r31, Y+5	; 0x05
    3b14:	20 83       	st	Z, r18
    3b16:	ee 81       	ldd	r30, Y+6	; 0x06
    3b18:	ff 81       	ldd	r31, Y+7	; 0x07
    3b1a:	80 83       	st	Z, r24
    3b1c:	ea 85       	ldd	r30, Y+10	; 0x0a
    3b1e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3b20:	20 81       	ld	r18, Z
    3b22:	41 e0       	ldi	r20, 0x01	; 1
    3b24:	50 e0       	ldi	r21, 0x00	; 0
    3b26:	ca 01       	movw	r24, r20
    3b28:	0e 84       	ldd	r0, Y+14	; 0x0e
    3b2a:	02 c0       	rjmp	.+4      	; 0x3b30 <_ZN14HardwareSerial5beginEl+0x18c>
    3b2c:	88 0f       	add	r24, r24
    3b2e:	99 1f       	adc	r25, r25
    3b30:	0a 94       	dec	r0
    3b32:	e2 f7       	brpl	.-8      	; 0x3b2c <_ZN14HardwareSerial5beginEl+0x188>
    3b34:	28 2b       	or	r18, r24
    3b36:	20 83       	st	Z, r18
    3b38:	ea 85       	ldd	r30, Y+10	; 0x0a
    3b3a:	fb 85       	ldd	r31, Y+11	; 0x0b
    3b3c:	20 81       	ld	r18, Z
    3b3e:	ca 01       	movw	r24, r20
    3b40:	0f 84       	ldd	r0, Y+15	; 0x0f
    3b42:	02 c0       	rjmp	.+4      	; 0x3b48 <_ZN14HardwareSerial5beginEl+0x1a4>
    3b44:	88 0f       	add	r24, r24
    3b46:	99 1f       	adc	r25, r25
    3b48:	0a 94       	dec	r0
    3b4a:	e2 f7       	brpl	.-8      	; 0x3b44 <_ZN14HardwareSerial5beginEl+0x1a0>
    3b4c:	28 2b       	or	r18, r24
    3b4e:	20 83       	st	Z, r18
    3b50:	ea 85       	ldd	r30, Y+10	; 0x0a
    3b52:	fb 85       	ldd	r31, Y+11	; 0x0b
    3b54:	80 81       	ld	r24, Z
    3b56:	08 88       	ldd	r0, Y+16	; 0x10
    3b58:	02 c0       	rjmp	.+4      	; 0x3b5e <_ZN14HardwareSerial5beginEl+0x1ba>
    3b5a:	44 0f       	add	r20, r20
    3b5c:	55 1f       	adc	r21, r21
    3b5e:	0a 94       	dec	r0
    3b60:	e2 f7       	brpl	.-8      	; 0x3b5a <_ZN14HardwareSerial5beginEl+0x1b6>
    3b62:	84 2b       	or	r24, r20
    3b64:	80 83       	st	Z, r24
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	1f 91       	pop	r17
    3b6c:	0f 91       	pop	r16
    3b6e:	ff 90       	pop	r15
    3b70:	ef 90       	pop	r14
    3b72:	df 90       	pop	r13
    3b74:	cf 90       	pop	r12
    3b76:	bf 90       	pop	r11
    3b78:	af 90       	pop	r10
    3b7a:	9f 90       	pop	r9
    3b7c:	8f 90       	pop	r8
    3b7e:	7f 90       	pop	r7
    3b80:	6f 90       	pop	r6
    3b82:	5f 90       	pop	r5
    3b84:	08 95       	ret

00003b86 <_ZN14HardwareSerial3endEv>:
    3b86:	fc 01       	movw	r30, r24
    3b88:	a2 85       	ldd	r26, Z+10	; 0x0a
    3b8a:	b3 85       	ldd	r27, Z+11	; 0x0b
    3b8c:	4c 91       	ld	r20, X
    3b8e:	21 e0       	ldi	r18, 0x01	; 1
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	c9 01       	movw	r24, r18
    3b94:	06 84       	ldd	r0, Z+14	; 0x0e
    3b96:	02 c0       	rjmp	.+4      	; 0x3b9c <_ZN14HardwareSerial3endEv+0x16>
    3b98:	88 0f       	add	r24, r24
    3b9a:	99 1f       	adc	r25, r25
    3b9c:	0a 94       	dec	r0
    3b9e:	e2 f7       	brpl	.-8      	; 0x3b98 <_ZN14HardwareSerial3endEv+0x12>
    3ba0:	80 95       	com	r24
    3ba2:	84 23       	and	r24, r20
    3ba4:	8c 93       	st	X, r24
    3ba6:	a2 85       	ldd	r26, Z+10	; 0x0a
    3ba8:	b3 85       	ldd	r27, Z+11	; 0x0b
    3baa:	4c 91       	ld	r20, X
    3bac:	c9 01       	movw	r24, r18
    3bae:	07 84       	ldd	r0, Z+15	; 0x0f
    3bb0:	02 c0       	rjmp	.+4      	; 0x3bb6 <_ZN14HardwareSerial3endEv+0x30>
    3bb2:	88 0f       	add	r24, r24
    3bb4:	99 1f       	adc	r25, r25
    3bb6:	0a 94       	dec	r0
    3bb8:	e2 f7       	brpl	.-8      	; 0x3bb2 <_ZN14HardwareSerial3endEv+0x2c>
    3bba:	80 95       	com	r24
    3bbc:	84 23       	and	r24, r20
    3bbe:	8c 93       	st	X, r24
    3bc0:	a2 85       	ldd	r26, Z+10	; 0x0a
    3bc2:	b3 85       	ldd	r27, Z+11	; 0x0b
    3bc4:	8c 91       	ld	r24, X
    3bc6:	00 88       	ldd	r0, Z+16	; 0x10
    3bc8:	02 c0       	rjmp	.+4      	; 0x3bce <_ZN14HardwareSerial3endEv+0x48>
    3bca:	22 0f       	add	r18, r18
    3bcc:	33 1f       	adc	r19, r19
    3bce:	0a 94       	dec	r0
    3bd0:	e2 f7       	brpl	.-8      	; 0x3bca <_ZN14HardwareSerial3endEv+0x44>
    3bd2:	20 95       	com	r18
    3bd4:	28 23       	and	r18, r24
    3bd6:	2c 93       	st	X, r18
    3bd8:	08 95       	ret

00003bda <_ZN14HardwareSerial9availableEv>:
    3bda:	dc 01       	movw	r26, r24
    3bdc:	12 96       	adiw	r26, 0x02	; 2
    3bde:	ed 91       	ld	r30, X+
    3be0:	fc 91       	ld	r31, X
    3be2:	13 97       	sbiw	r26, 0x03	; 3
    3be4:	e0 58       	subi	r30, 0x80	; 128
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	81 91       	ld	r24, Z+
    3bea:	91 91       	ld	r25, Z+
    3bec:	80 58       	subi	r24, 0x80	; 128
    3bee:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf0:	20 81       	ld	r18, Z
    3bf2:	31 81       	ldd	r19, Z+1	; 0x01
    3bf4:	82 1b       	sub	r24, r18
    3bf6:	93 0b       	sbc	r25, r19
    3bf8:	60 e8       	ldi	r22, 0x80	; 128
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divmodhi4>
    3c00:	08 95       	ret

00003c02 <_ZN14HardwareSerial4readEv>:
    3c02:	cf 93       	push	r28
    3c04:	df 93       	push	r29
    3c06:	dc 01       	movw	r26, r24
    3c08:	12 96       	adiw	r26, 0x02	; 2
    3c0a:	ed 91       	ld	r30, X+
    3c0c:	fc 91       	ld	r31, X
    3c0e:	13 97       	sbiw	r26, 0x03	; 3
    3c10:	ef 01       	movw	r28, r30
    3c12:	ce 57       	subi	r28, 0x7E	; 126
    3c14:	df 4f       	sbci	r29, 0xFF	; 255
    3c16:	48 81       	ld	r20, Y
    3c18:	59 81       	ldd	r21, Y+1	; 0x01
    3c1a:	e0 58       	subi	r30, 0x80	; 128
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	80 81       	ld	r24, Z
    3c20:	91 81       	ldd	r25, Z+1	; 0x01
    3c22:	e0 58       	subi	r30, 0x80	; 128
    3c24:	f0 40       	sbci	r31, 0x00	; 0
    3c26:	84 17       	cp	r24, r20
    3c28:	95 07       	cpc	r25, r21
    3c2a:	19 f4       	brne	.+6      	; 0x3c32 <_ZN14HardwareSerial4readEv+0x30>
    3c2c:	2f ef       	ldi	r18, 0xFF	; 255
    3c2e:	3f ef       	ldi	r19, 0xFF	; 255
    3c30:	0c c0       	rjmp	.+24     	; 0x3c4a <_ZN14HardwareSerial4readEv+0x48>
    3c32:	e4 0f       	add	r30, r20
    3c34:	f5 1f       	adc	r31, r21
    3c36:	20 81       	ld	r18, Z
    3c38:	ca 01       	movw	r24, r20
    3c3a:	01 96       	adiw	r24, 0x01	; 1
    3c3c:	60 e8       	ldi	r22, 0x80	; 128
    3c3e:	70 e0       	ldi	r23, 0x00	; 0
    3c40:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divmodhi4>
    3c44:	99 83       	std	Y+1, r25	; 0x01
    3c46:	88 83       	st	Y, r24
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	c9 01       	movw	r24, r18
    3c4c:	df 91       	pop	r29
    3c4e:	cf 91       	pop	r28
    3c50:	08 95       	ret

00003c52 <_ZN14HardwareSerial5flushEv>:
    3c52:	dc 01       	movw	r26, r24
    3c54:	12 96       	adiw	r26, 0x02	; 2
    3c56:	ed 91       	ld	r30, X+
    3c58:	fc 91       	ld	r31, X
    3c5a:	13 97       	sbiw	r26, 0x03	; 3
    3c5c:	ee 57       	subi	r30, 0x7E	; 126
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	80 81       	ld	r24, Z
    3c62:	91 81       	ldd	r25, Z+1	; 0x01
    3c64:	92 93       	st	-Z, r25
    3c66:	82 93       	st	-Z, r24
    3c68:	08 95       	ret

00003c6a <_ZN14HardwareSerial5writeEh>:
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	a0 85       	ldd	r26, Z+8	; 0x08
    3c6e:	b1 85       	ldd	r27, Z+9	; 0x09
    3c70:	21 89       	ldd	r18, Z+17	; 0x11
    3c72:	8c 91       	ld	r24, X
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	02 2e       	mov	r0, r18
    3c78:	02 c0       	rjmp	.+4      	; 0x3c7e <_ZN14HardwareSerial5writeEh+0x14>
    3c7a:	95 95       	asr	r25
    3c7c:	87 95       	ror	r24
    3c7e:	0a 94       	dec	r0
    3c80:	e2 f7       	brpl	.-8      	; 0x3c7a <_ZN14HardwareSerial5writeEh+0x10>
    3c82:	80 ff       	sbrs	r24, 0
    3c84:	f6 cf       	rjmp	.-20     	; 0x3c72 <_ZN14HardwareSerial5writeEh+0x8>
    3c86:	04 84       	ldd	r0, Z+12	; 0x0c
    3c88:	f5 85       	ldd	r31, Z+13	; 0x0d
    3c8a:	e0 2d       	mov	r30, r0
    3c8c:	60 83       	st	Z, r22
    3c8e:	08 95       	ret

00003c90 <_GLOBAL__I_rx_buffer>:
    3c90:	2b e7       	ldi	r18, 0x7B	; 123
    3c92:	33 e0       	ldi	r19, 0x03	; 3
    3c94:	30 93 15 11 	sts	0x1115, r19
    3c98:	20 93 14 11 	sts	0x1114, r18
    3c9c:	84 e0       	ldi	r24, 0x04	; 4
    3c9e:	9f e0       	ldi	r25, 0x0F	; 15
    3ca0:	90 93 17 11 	sts	0x1117, r25
    3ca4:	80 93 16 11 	sts	0x1116, r24
    3ca8:	85 ec       	ldi	r24, 0xC5	; 197
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	90 93 19 11 	sts	0x1119, r25
    3cb0:	80 93 18 11 	sts	0x1118, r24
    3cb4:	84 ec       	ldi	r24, 0xC4	; 196
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	90 93 1b 11 	sts	0x111B, r25
    3cbc:	80 93 1a 11 	sts	0x111A, r24
    3cc0:	80 ec       	ldi	r24, 0xC0	; 192
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	90 93 1d 11 	sts	0x111D, r25
    3cc8:	80 93 1c 11 	sts	0x111C, r24
    3ccc:	81 ec       	ldi	r24, 0xC1	; 193
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	90 93 1f 11 	sts	0x111F, r25
    3cd4:	80 93 1e 11 	sts	0x111E, r24
    3cd8:	86 ec       	ldi	r24, 0xC6	; 198
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	90 93 21 11 	sts	0x1121, r25
    3ce0:	80 93 20 11 	sts	0x1120, r24
    3ce4:	e4 e0       	ldi	r30, 0x04	; 4
    3ce6:	e0 93 22 11 	sts	0x1122, r30
    3cea:	73 e0       	ldi	r23, 0x03	; 3
    3cec:	70 93 23 11 	sts	0x1123, r23
    3cf0:	67 e0       	ldi	r22, 0x07	; 7
    3cf2:	60 93 24 11 	sts	0x1124, r22
    3cf6:	55 e0       	ldi	r21, 0x05	; 5
    3cf8:	50 93 25 11 	sts	0x1125, r21
    3cfc:	41 e0       	ldi	r20, 0x01	; 1
    3cfe:	40 93 26 11 	sts	0x1126, r20
    3d02:	30 93 28 11 	sts	0x1128, r19
    3d06:	20 93 27 11 	sts	0x1127, r18
    3d0a:	88 e8       	ldi	r24, 0x88	; 136
    3d0c:	9f e0       	ldi	r25, 0x0F	; 15
    3d0e:	90 93 2a 11 	sts	0x112A, r25
    3d12:	80 93 29 11 	sts	0x1129, r24
    3d16:	8d ec       	ldi	r24, 0xCD	; 205
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	90 93 2c 11 	sts	0x112C, r25
    3d1e:	80 93 2b 11 	sts	0x112B, r24
    3d22:	8c ec       	ldi	r24, 0xCC	; 204
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	90 93 2e 11 	sts	0x112E, r25
    3d2a:	80 93 2d 11 	sts	0x112D, r24
    3d2e:	88 ec       	ldi	r24, 0xC8	; 200
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	90 93 30 11 	sts	0x1130, r25
    3d36:	80 93 2f 11 	sts	0x112F, r24
    3d3a:	89 ec       	ldi	r24, 0xC9	; 201
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	90 93 32 11 	sts	0x1132, r25
    3d42:	80 93 31 11 	sts	0x1131, r24
    3d46:	8e ec       	ldi	r24, 0xCE	; 206
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	90 93 34 11 	sts	0x1134, r25
    3d4e:	80 93 33 11 	sts	0x1133, r24
    3d52:	e0 93 35 11 	sts	0x1135, r30
    3d56:	70 93 36 11 	sts	0x1136, r23
    3d5a:	60 93 37 11 	sts	0x1137, r22
    3d5e:	50 93 38 11 	sts	0x1138, r21
    3d62:	40 93 39 11 	sts	0x1139, r20
    3d66:	30 93 3b 11 	sts	0x113B, r19
    3d6a:	20 93 3a 11 	sts	0x113A, r18
    3d6e:	8c e0       	ldi	r24, 0x0C	; 12
    3d70:	90 e1       	ldi	r25, 0x10	; 16
    3d72:	90 93 3d 11 	sts	0x113D, r25
    3d76:	80 93 3c 11 	sts	0x113C, r24
    3d7a:	85 ed       	ldi	r24, 0xD5	; 213
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	90 93 3f 11 	sts	0x113F, r25
    3d82:	80 93 3e 11 	sts	0x113E, r24
    3d86:	84 ed       	ldi	r24, 0xD4	; 212
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	90 93 41 11 	sts	0x1141, r25
    3d8e:	80 93 40 11 	sts	0x1140, r24
    3d92:	80 ed       	ldi	r24, 0xD0	; 208
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	90 93 43 11 	sts	0x1143, r25
    3d9a:	80 93 42 11 	sts	0x1142, r24
    3d9e:	81 ed       	ldi	r24, 0xD1	; 209
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	90 93 45 11 	sts	0x1145, r25
    3da6:	80 93 44 11 	sts	0x1144, r24
    3daa:	86 ed       	ldi	r24, 0xD6	; 214
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	90 93 47 11 	sts	0x1147, r25
    3db2:	80 93 46 11 	sts	0x1146, r24
    3db6:	e0 93 48 11 	sts	0x1148, r30
    3dba:	70 93 49 11 	sts	0x1149, r23
    3dbe:	60 93 4a 11 	sts	0x114A, r22
    3dc2:	50 93 4b 11 	sts	0x114B, r21
    3dc6:	40 93 4c 11 	sts	0x114C, r20
    3dca:	30 93 4e 11 	sts	0x114E, r19
    3dce:	20 93 4d 11 	sts	0x114D, r18
    3dd2:	80 e9       	ldi	r24, 0x90	; 144
    3dd4:	90 e1       	ldi	r25, 0x10	; 16
    3dd6:	90 93 50 11 	sts	0x1150, r25
    3dda:	80 93 4f 11 	sts	0x114F, r24
    3dde:	85 e3       	ldi	r24, 0x35	; 53
    3de0:	91 e0       	ldi	r25, 0x01	; 1
    3de2:	90 93 52 11 	sts	0x1152, r25
    3de6:	80 93 51 11 	sts	0x1151, r24
    3dea:	84 e3       	ldi	r24, 0x34	; 52
    3dec:	91 e0       	ldi	r25, 0x01	; 1
    3dee:	90 93 54 11 	sts	0x1154, r25
    3df2:	80 93 53 11 	sts	0x1153, r24
    3df6:	80 e3       	ldi	r24, 0x30	; 48
    3df8:	91 e0       	ldi	r25, 0x01	; 1
    3dfa:	90 93 56 11 	sts	0x1156, r25
    3dfe:	80 93 55 11 	sts	0x1155, r24
    3e02:	81 e3       	ldi	r24, 0x31	; 49
    3e04:	91 e0       	ldi	r25, 0x01	; 1
    3e06:	90 93 58 11 	sts	0x1158, r25
    3e0a:	80 93 57 11 	sts	0x1157, r24
    3e0e:	86 e3       	ldi	r24, 0x36	; 54
    3e10:	91 e0       	ldi	r25, 0x01	; 1
    3e12:	90 93 5a 11 	sts	0x115A, r25
    3e16:	80 93 59 11 	sts	0x1159, r24
    3e1a:	e0 93 5b 11 	sts	0x115B, r30
    3e1e:	70 93 5c 11 	sts	0x115C, r23
    3e22:	60 93 5d 11 	sts	0x115D, r22
    3e26:	50 93 5e 11 	sts	0x115E, r21
    3e2a:	40 93 5f 11 	sts	0x115F, r20
    3e2e:	08 95       	ret

00003e30 <_ZN5Print5writeEPKc>:
    3e30:	0f 93       	push	r16
    3e32:	1f 93       	push	r17
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	8c 01       	movw	r16, r24
    3e3a:	eb 01       	movw	r28, r22
    3e3c:	09 c0       	rjmp	.+18     	; 0x3e50 <_ZN5Print5writeEPKc+0x20>
    3e3e:	21 96       	adiw	r28, 0x01	; 1
    3e40:	d8 01       	movw	r26, r16
    3e42:	ed 91       	ld	r30, X+
    3e44:	fc 91       	ld	r31, X
    3e46:	01 90       	ld	r0, Z+
    3e48:	f0 81       	ld	r31, Z
    3e4a:	e0 2d       	mov	r30, r0
    3e4c:	c8 01       	movw	r24, r16
    3e4e:	09 95       	icall
    3e50:	68 81       	ld	r22, Y
    3e52:	66 23       	and	r22, r22
    3e54:	a1 f7       	brne	.-24     	; 0x3e3e <_ZN5Print5writeEPKc+0xe>
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	0f 91       	pop	r16
    3e5e:	08 95       	ret

00003e60 <_ZN5Print5writeEPKhj>:
    3e60:	ef 92       	push	r14
    3e62:	ff 92       	push	r15
    3e64:	0f 93       	push	r16
    3e66:	1f 93       	push	r17
    3e68:	cf 93       	push	r28
    3e6a:	df 93       	push	r29
    3e6c:	8c 01       	movw	r16, r24
    3e6e:	7b 01       	movw	r14, r22
    3e70:	ea 01       	movw	r28, r20
    3e72:	0c c0       	rjmp	.+24     	; 0x3e8c <_ZN5Print5writeEPKhj+0x2c>
    3e74:	d7 01       	movw	r26, r14
    3e76:	6d 91       	ld	r22, X+
    3e78:	7d 01       	movw	r14, r26
    3e7a:	d8 01       	movw	r26, r16
    3e7c:	ed 91       	ld	r30, X+
    3e7e:	fc 91       	ld	r31, X
    3e80:	01 90       	ld	r0, Z+
    3e82:	f0 81       	ld	r31, Z
    3e84:	e0 2d       	mov	r30, r0
    3e86:	c8 01       	movw	r24, r16
    3e88:	09 95       	icall
    3e8a:	21 97       	sbiw	r28, 0x01	; 1
    3e8c:	20 97       	sbiw	r28, 0x00	; 0
    3e8e:	91 f7       	brne	.-28     	; 0x3e74 <_ZN5Print5writeEPKhj+0x14>
    3e90:	df 91       	pop	r29
    3e92:	cf 91       	pop	r28
    3e94:	1f 91       	pop	r17
    3e96:	0f 91       	pop	r16
    3e98:	ff 90       	pop	r15
    3e9a:	ef 90       	pop	r14
    3e9c:	08 95       	ret

00003e9e <_ZN5Print5printEPKc>:
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	ed 91       	ld	r30, X+
    3ea2:	fc 91       	ld	r31, X
    3ea4:	02 80       	ldd	r0, Z+2	; 0x02
    3ea6:	f3 81       	ldd	r31, Z+3	; 0x03
    3ea8:	e0 2d       	mov	r30, r0
    3eaa:	09 95       	icall
    3eac:	08 95       	ret

00003eae <_ZN5Print11printNumberEmh>:
    3eae:	2f 92       	push	r2
    3eb0:	3f 92       	push	r3
    3eb2:	4f 92       	push	r4
    3eb4:	5f 92       	push	r5
    3eb6:	6f 92       	push	r6
    3eb8:	7f 92       	push	r7
    3eba:	8f 92       	push	r8
    3ebc:	9f 92       	push	r9
    3ebe:	af 92       	push	r10
    3ec0:	bf 92       	push	r11
    3ec2:	cf 92       	push	r12
    3ec4:	df 92       	push	r13
    3ec6:	ef 92       	push	r14
    3ec8:	ff 92       	push	r15
    3eca:	0f 93       	push	r16
    3ecc:	1f 93       	push	r17
    3ece:	df 93       	push	r29
    3ed0:	cf 93       	push	r28
    3ed2:	cd b7       	in	r28, 0x3d	; 61
    3ed4:	de b7       	in	r29, 0x3e	; 62
    3ed6:	a0 97       	sbiw	r28, 0x20	; 32
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	de bf       	out	0x3e, r29	; 62
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	1c 01       	movw	r2, r24
    3ee4:	6a 01       	movw	r12, r20
    3ee6:	7b 01       	movw	r14, r22
    3ee8:	41 15       	cp	r20, r1
    3eea:	51 05       	cpc	r21, r1
    3eec:	61 05       	cpc	r22, r1
    3eee:	71 05       	cpc	r23, r1
    3ef0:	49 f4       	brne	.+18     	; 0x3f04 <_ZN5Print11printNumberEmh+0x56>
    3ef2:	40 e3       	ldi	r20, 0x30	; 48
    3ef4:	50 e0       	ldi	r21, 0x00	; 0
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	70 e0       	ldi	r23, 0x00	; 0
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    3f02:	54 c0       	rjmp	.+168    	; 0x3fac <_ZN5Print11printNumberEmh+0xfe>
    3f04:	88 24       	eor	r8, r8
    3f06:	99 24       	eor	r9, r9
    3f08:	54 01       	movw	r10, r8
    3f0a:	42 2e       	mov	r4, r18
    3f0c:	55 24       	eor	r5, r5
    3f0e:	66 24       	eor	r6, r6
    3f10:	77 24       	eor	r7, r7
    3f12:	01 e0       	ldi	r16, 0x01	; 1
    3f14:	10 e0       	ldi	r17, 0x00	; 0
    3f16:	0c 0f       	add	r16, r28
    3f18:	1d 1f       	adc	r17, r29
    3f1a:	08 0d       	add	r16, r8
    3f1c:	19 1d       	adc	r17, r9
    3f1e:	c7 01       	movw	r24, r14
    3f20:	b6 01       	movw	r22, r12
    3f22:	a3 01       	movw	r20, r6
    3f24:	92 01       	movw	r18, r4
    3f26:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodsi4>
    3f2a:	f8 01       	movw	r30, r16
    3f2c:	60 83       	st	Z, r22
    3f2e:	08 94       	sec
    3f30:	81 1c       	adc	r8, r1
    3f32:	91 1c       	adc	r9, r1
    3f34:	a1 1c       	adc	r10, r1
    3f36:	b1 1c       	adc	r11, r1
    3f38:	c7 01       	movw	r24, r14
    3f3a:	b6 01       	movw	r22, r12
    3f3c:	a3 01       	movw	r20, r6
    3f3e:	92 01       	movw	r18, r4
    3f40:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodsi4>
    3f44:	c9 01       	movw	r24, r18
    3f46:	da 01       	movw	r26, r20
    3f48:	6c 01       	movw	r12, r24
    3f4a:	7d 01       	movw	r14, r26
    3f4c:	c1 14       	cp	r12, r1
    3f4e:	d1 04       	cpc	r13, r1
    3f50:	e1 04       	cpc	r14, r1
    3f52:	f1 04       	cpc	r15, r1
    3f54:	f1 f6       	brne	.-68     	; 0x3f12 <_ZN5Print11printNumberEmh+0x64>
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	e8 2e       	mov	r14, r24
    3f5a:	f1 2c       	mov	r15, r1
    3f5c:	ec 0e       	add	r14, r28
    3f5e:	fd 1e       	adc	r15, r29
    3f60:	e8 0c       	add	r14, r8
    3f62:	f9 1c       	adc	r15, r9
    3f64:	3e 01       	movw	r6, r28
    3f66:	08 94       	sec
    3f68:	61 1c       	adc	r6, r1
    3f6a:	71 1c       	adc	r7, r1
    3f6c:	d5 01       	movw	r26, r10
    3f6e:	c4 01       	movw	r24, r8
    3f70:	01 97       	sbiw	r24, 0x01	; 1
    3f72:	a1 09       	sbc	r26, r1
    3f74:	b1 09       	sbc	r27, r1
    3f76:	6c 01       	movw	r12, r24
    3f78:	c8 18       	sub	r12, r8
    3f7a:	d9 08       	sbc	r13, r9
    3f7c:	14 c0       	rjmp	.+40     	; 0x3fa6 <_ZN5Print11printNumberEmh+0xf8>
    3f7e:	f6 01       	movw	r30, r12
    3f80:	ee 0d       	add	r30, r14
    3f82:	ff 1d       	adc	r31, r15
    3f84:	40 81       	ld	r20, Z
    3f86:	4a 30       	cpi	r20, 0x0A	; 10
    3f88:	10 f4       	brcc	.+4      	; 0x3f8e <_ZN5Print11printNumberEmh+0xe0>
    3f8a:	40 5d       	subi	r20, 0xD0	; 208
    3f8c:	01 c0       	rjmp	.+2      	; 0x3f90 <_ZN5Print11printNumberEmh+0xe2>
    3f8e:	49 5c       	subi	r20, 0xC9	; 201
    3f90:	50 e0       	ldi	r21, 0x00	; 0
    3f92:	60 e0       	ldi	r22, 0x00	; 0
    3f94:	70 e0       	ldi	r23, 0x00	; 0
    3f96:	c1 01       	movw	r24, r2
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    3fa0:	08 94       	sec
    3fa2:	e1 08       	sbc	r14, r1
    3fa4:	f1 08       	sbc	r15, r1
    3fa6:	6e 14       	cp	r6, r14
    3fa8:	7f 04       	cpc	r7, r15
    3faa:	49 f7       	brne	.-46     	; 0x3f7e <_ZN5Print11printNumberEmh+0xd0>
    3fac:	a0 96       	adiw	r28, 0x20	; 32
    3fae:	0f b6       	in	r0, 0x3f	; 63
    3fb0:	f8 94       	cli
    3fb2:	de bf       	out	0x3e, r29	; 62
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	cd bf       	out	0x3d, r28	; 61
    3fb8:	cf 91       	pop	r28
    3fba:	df 91       	pop	r29
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	ff 90       	pop	r15
    3fc2:	ef 90       	pop	r14
    3fc4:	df 90       	pop	r13
    3fc6:	cf 90       	pop	r12
    3fc8:	bf 90       	pop	r11
    3fca:	af 90       	pop	r10
    3fcc:	9f 90       	pop	r9
    3fce:	8f 90       	pop	r8
    3fd0:	7f 90       	pop	r7
    3fd2:	6f 90       	pop	r6
    3fd4:	5f 90       	pop	r5
    3fd6:	4f 90       	pop	r4
    3fd8:	3f 90       	pop	r3
    3fda:	2f 90       	pop	r2
    3fdc:	08 95       	ret

00003fde <_ZN5Print5printEmi>:
    3fde:	dc 01       	movw	r26, r24
    3fe0:	21 15       	cp	r18, r1
    3fe2:	31 05       	cpc	r19, r1
    3fe4:	41 f4       	brne	.+16     	; 0x3ff6 <_ZN5Print5printEmi+0x18>
    3fe6:	ed 91       	ld	r30, X+
    3fe8:	fc 91       	ld	r31, X
    3fea:	01 90       	ld	r0, Z+
    3fec:	f0 81       	ld	r31, Z
    3fee:	e0 2d       	mov	r30, r0
    3ff0:	64 2f       	mov	r22, r20
    3ff2:	09 95       	icall
    3ff4:	08 95       	ret
    3ff6:	0e 94 57 1f 	call	0x3eae	; 0x3eae <_ZN5Print11printNumberEmh>
    3ffa:	08 95       	ret

00003ffc <_ZN5Print5printEji>:
    3ffc:	ef 92       	push	r14
    3ffe:	ff 92       	push	r15
    4000:	0f 93       	push	r16
    4002:	1f 93       	push	r17
    4004:	9a 01       	movw	r18, r20
    4006:	7b 01       	movw	r14, r22
    4008:	00 e0       	ldi	r16, 0x00	; 0
    400a:	10 e0       	ldi	r17, 0x00	; 0
    400c:	b8 01       	movw	r22, r16
    400e:	a7 01       	movw	r20, r14
    4010:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZN5Print5printEmi>
    4014:	1f 91       	pop	r17
    4016:	0f 91       	pop	r16
    4018:	ff 90       	pop	r15
    401a:	ef 90       	pop	r14
    401c:	08 95       	ret

0000401e <_ZN5Print5printEhi>:
    401e:	ef 92       	push	r14
    4020:	ff 92       	push	r15
    4022:	0f 93       	push	r16
    4024:	1f 93       	push	r17
    4026:	9a 01       	movw	r18, r20
    4028:	e6 2e       	mov	r14, r22
    402a:	ff 24       	eor	r15, r15
    402c:	00 e0       	ldi	r16, 0x00	; 0
    402e:	10 e0       	ldi	r17, 0x00	; 0
    4030:	b8 01       	movw	r22, r16
    4032:	a7 01       	movw	r20, r14
    4034:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZN5Print5printEmi>
    4038:	1f 91       	pop	r17
    403a:	0f 91       	pop	r16
    403c:	ff 90       	pop	r15
    403e:	ef 90       	pop	r14
    4040:	08 95       	ret

00004042 <_ZN5Print5printEli>:
    4042:	ef 92       	push	r14
    4044:	ff 92       	push	r15
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	cf 93       	push	r28
    404c:	df 93       	push	r29
    404e:	ec 01       	movw	r28, r24
    4050:	7a 01       	movw	r14, r20
    4052:	8b 01       	movw	r16, r22
    4054:	21 15       	cp	r18, r1
    4056:	31 05       	cpc	r19, r1
    4058:	41 f4       	brne	.+16     	; 0x406a <_ZN5Print5printEli+0x28>
    405a:	e8 81       	ld	r30, Y
    405c:	f9 81       	ldd	r31, Y+1	; 0x01
    405e:	01 90       	ld	r0, Z+
    4060:	f0 81       	ld	r31, Z
    4062:	e0 2d       	mov	r30, r0
    4064:	64 2f       	mov	r22, r20
    4066:	09 95       	icall
    4068:	1b c0       	rjmp	.+54     	; 0x40a0 <_ZN5Print5printEli+0x5e>
    406a:	2a 30       	cpi	r18, 0x0A	; 10
    406c:	31 05       	cpc	r19, r1
    406e:	b1 f4       	brne	.+44     	; 0x409c <_ZN5Print5printEli+0x5a>
    4070:	77 ff       	sbrs	r23, 7
    4072:	10 c0       	rjmp	.+32     	; 0x4094 <_ZN5Print5printEli+0x52>
    4074:	4d e2       	ldi	r20, 0x2D	; 45
    4076:	50 e0       	ldi	r21, 0x00	; 0
    4078:	60 e0       	ldi	r22, 0x00	; 0
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    4084:	10 95       	com	r17
    4086:	00 95       	com	r16
    4088:	f0 94       	com	r15
    408a:	e0 94       	com	r14
    408c:	e1 1c       	adc	r14, r1
    408e:	f1 1c       	adc	r15, r1
    4090:	01 1d       	adc	r16, r1
    4092:	11 1d       	adc	r17, r1
    4094:	ce 01       	movw	r24, r28
    4096:	b8 01       	movw	r22, r16
    4098:	a7 01       	movw	r20, r14
    409a:	2a e0       	ldi	r18, 0x0A	; 10
    409c:	0e 94 57 1f 	call	0x3eae	; 0x3eae <_ZN5Print11printNumberEmh>
    40a0:	df 91       	pop	r29
    40a2:	cf 91       	pop	r28
    40a4:	1f 91       	pop	r17
    40a6:	0f 91       	pop	r16
    40a8:	ff 90       	pop	r15
    40aa:	ef 90       	pop	r14
    40ac:	08 95       	ret

000040ae <_ZN5Print5printEii>:
    40ae:	ef 92       	push	r14
    40b0:	ff 92       	push	r15
    40b2:	0f 93       	push	r16
    40b4:	1f 93       	push	r17
    40b6:	7b 01       	movw	r14, r22
    40b8:	9a 01       	movw	r18, r20
    40ba:	00 27       	eor	r16, r16
    40bc:	f7 fc       	sbrc	r15, 7
    40be:	00 95       	com	r16
    40c0:	10 2f       	mov	r17, r16
    40c2:	b8 01       	movw	r22, r16
    40c4:	a7 01       	movw	r20, r14
    40c6:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    40ca:	1f 91       	pop	r17
    40cc:	0f 91       	pop	r16
    40ce:	ff 90       	pop	r15
    40d0:	ef 90       	pop	r14
    40d2:	08 95       	ret

000040d4 <_ZN5Print5printEci>:
    40d4:	ef 92       	push	r14
    40d6:	ff 92       	push	r15
    40d8:	0f 93       	push	r16
    40da:	1f 93       	push	r17
    40dc:	9a 01       	movw	r18, r20
    40de:	e6 2e       	mov	r14, r22
    40e0:	ff 24       	eor	r15, r15
    40e2:	00 e0       	ldi	r16, 0x00	; 0
    40e4:	10 e0       	ldi	r17, 0x00	; 0
    40e6:	b8 01       	movw	r22, r16
    40e8:	a7 01       	movw	r20, r14
    40ea:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    40ee:	1f 91       	pop	r17
    40f0:	0f 91       	pop	r16
    40f2:	ff 90       	pop	r15
    40f4:	ef 90       	pop	r14
    40f6:	08 95       	ret

000040f8 <_ZN5Print7printlnEv>:
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	8c 01       	movw	r16, r24
    40fe:	4d e0       	ldi	r20, 0x0D	; 13
    4100:	50 e0       	ldi	r21, 0x00	; 0
    4102:	60 e0       	ldi	r22, 0x00	; 0
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    410e:	c8 01       	movw	r24, r16
    4110:	4a e0       	ldi	r20, 0x0A	; 10
    4112:	50 e0       	ldi	r21, 0x00	; 0
    4114:	60 e0       	ldi	r22, 0x00	; 0
    4116:	70 e0       	ldi	r23, 0x00	; 0
    4118:	20 e0       	ldi	r18, 0x00	; 0
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    4120:	1f 91       	pop	r17
    4122:	0f 91       	pop	r16
    4124:	08 95       	ret

00004126 <_ZN5Print7printlnEmi>:
    4126:	0f 93       	push	r16
    4128:	1f 93       	push	r17
    412a:	8c 01       	movw	r16, r24
    412c:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZN5Print5printEmi>
    4130:	c8 01       	movw	r24, r16
    4132:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN5Print7printlnEv>
    4136:	1f 91       	pop	r17
    4138:	0f 91       	pop	r16
    413a:	08 95       	ret

0000413c <_ZN5Print7printlnEji>:
    413c:	cf 92       	push	r12
    413e:	df 92       	push	r13
    4140:	ef 92       	push	r14
    4142:	ff 92       	push	r15
    4144:	0f 93       	push	r16
    4146:	1f 93       	push	r17
    4148:	8c 01       	movw	r16, r24
    414a:	9a 01       	movw	r18, r20
    414c:	6b 01       	movw	r12, r22
    414e:	ee 24       	eor	r14, r14
    4150:	ff 24       	eor	r15, r15
    4152:	b7 01       	movw	r22, r14
    4154:	a6 01       	movw	r20, r12
    4156:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZN5Print5printEmi>
    415a:	c8 01       	movw	r24, r16
    415c:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN5Print7printlnEv>
    4160:	1f 91       	pop	r17
    4162:	0f 91       	pop	r16
    4164:	ff 90       	pop	r15
    4166:	ef 90       	pop	r14
    4168:	df 90       	pop	r13
    416a:	cf 90       	pop	r12
    416c:	08 95       	ret

0000416e <_ZN5Print7printlnEhi>:
    416e:	cf 92       	push	r12
    4170:	df 92       	push	r13
    4172:	ef 92       	push	r14
    4174:	ff 92       	push	r15
    4176:	0f 93       	push	r16
    4178:	1f 93       	push	r17
    417a:	8c 01       	movw	r16, r24
    417c:	9a 01       	movw	r18, r20
    417e:	c6 2e       	mov	r12, r22
    4180:	dd 24       	eor	r13, r13
    4182:	ee 24       	eor	r14, r14
    4184:	ff 24       	eor	r15, r15
    4186:	b7 01       	movw	r22, r14
    4188:	a6 01       	movw	r20, r12
    418a:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZN5Print5printEmi>
    418e:	c8 01       	movw	r24, r16
    4190:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN5Print7printlnEv>
    4194:	1f 91       	pop	r17
    4196:	0f 91       	pop	r16
    4198:	ff 90       	pop	r15
    419a:	ef 90       	pop	r14
    419c:	df 90       	pop	r13
    419e:	cf 90       	pop	r12
    41a0:	08 95       	ret

000041a2 <_ZN5Print7printlnEPKc>:
    41a2:	0f 93       	push	r16
    41a4:	1f 93       	push	r17
    41a6:	8c 01       	movw	r16, r24
    41a8:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN5Print5printEPKc>
    41ac:	c8 01       	movw	r24, r16
    41ae:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN5Print7printlnEv>
    41b2:	1f 91       	pop	r17
    41b4:	0f 91       	pop	r16
    41b6:	08 95       	ret

000041b8 <_ZN5Print7printlnEli>:
    41b8:	0f 93       	push	r16
    41ba:	1f 93       	push	r17
    41bc:	8c 01       	movw	r16, r24
    41be:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    41c2:	c8 01       	movw	r24, r16
    41c4:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN5Print7printlnEv>
    41c8:	1f 91       	pop	r17
    41ca:	0f 91       	pop	r16
    41cc:	08 95       	ret

000041ce <_ZN5Print7printlnEii>:
    41ce:	cf 92       	push	r12
    41d0:	df 92       	push	r13
    41d2:	ef 92       	push	r14
    41d4:	ff 92       	push	r15
    41d6:	0f 93       	push	r16
    41d8:	1f 93       	push	r17
    41da:	8c 01       	movw	r16, r24
    41dc:	6b 01       	movw	r12, r22
    41de:	9a 01       	movw	r18, r20
    41e0:	ee 24       	eor	r14, r14
    41e2:	d7 fc       	sbrc	r13, 7
    41e4:	e0 94       	com	r14
    41e6:	fe 2c       	mov	r15, r14
    41e8:	b7 01       	movw	r22, r14
    41ea:	a6 01       	movw	r20, r12
    41ec:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    41f0:	c8 01       	movw	r24, r16
    41f2:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN5Print7printlnEv>
    41f6:	1f 91       	pop	r17
    41f8:	0f 91       	pop	r16
    41fa:	ff 90       	pop	r15
    41fc:	ef 90       	pop	r14
    41fe:	df 90       	pop	r13
    4200:	cf 90       	pop	r12
    4202:	08 95       	ret

00004204 <_ZN5Print7printlnEci>:
    4204:	cf 92       	push	r12
    4206:	df 92       	push	r13
    4208:	ef 92       	push	r14
    420a:	ff 92       	push	r15
    420c:	0f 93       	push	r16
    420e:	1f 93       	push	r17
    4210:	8c 01       	movw	r16, r24
    4212:	9a 01       	movw	r18, r20
    4214:	c6 2e       	mov	r12, r22
    4216:	dd 24       	eor	r13, r13
    4218:	ee 24       	eor	r14, r14
    421a:	ff 24       	eor	r15, r15
    421c:	b7 01       	movw	r22, r14
    421e:	a6 01       	movw	r20, r12
    4220:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    4224:	c8 01       	movw	r24, r16
    4226:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN5Print7printlnEv>
    422a:	1f 91       	pop	r17
    422c:	0f 91       	pop	r16
    422e:	ff 90       	pop	r15
    4230:	ef 90       	pop	r14
    4232:	df 90       	pop	r13
    4234:	cf 90       	pop	r12
    4236:	08 95       	ret

00004238 <_ZN5Print10printFloatEdh>:
    4238:	9f 92       	push	r9
    423a:	af 92       	push	r10
    423c:	bf 92       	push	r11
    423e:	cf 92       	push	r12
    4240:	df 92       	push	r13
    4242:	ef 92       	push	r14
    4244:	ff 92       	push	r15
    4246:	0f 93       	push	r16
    4248:	1f 93       	push	r17
    424a:	cf 93       	push	r28
    424c:	df 93       	push	r29
    424e:	ec 01       	movw	r28, r24
    4250:	7a 01       	movw	r14, r20
    4252:	8b 01       	movw	r16, r22
    4254:	92 2e       	mov	r9, r18
    4256:	cb 01       	movw	r24, r22
    4258:	ba 01       	movw	r22, r20
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	40 e0       	ldi	r20, 0x00	; 0
    4260:	50 e0       	ldi	r21, 0x00	; 0
    4262:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__ltsf2>
    4266:	88 23       	and	r24, r24
    4268:	6c f4       	brge	.+26     	; 0x4284 <_ZN5Print10printFloatEdh+0x4c>
    426a:	ce 01       	movw	r24, r28
    426c:	4d e2       	ldi	r20, 0x2D	; 45
    426e:	50 e0       	ldi	r21, 0x00	; 0
    4270:	60 e0       	ldi	r22, 0x00	; 0
    4272:	70 e0       	ldi	r23, 0x00	; 0
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    427c:	17 fb       	bst	r17, 7
    427e:	10 95       	com	r17
    4280:	17 f9       	bld	r17, 7
    4282:	10 95       	com	r17
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	40 e0       	ldi	r20, 0x00	; 0
    428a:	5f e3       	ldi	r21, 0x3F	; 63
    428c:	aa 24       	eor	r10, r10
    428e:	0b c0       	rjmp	.+22     	; 0x42a6 <_ZN5Print10printFloatEdh+0x6e>
    4290:	ca 01       	movw	r24, r20
    4292:	b9 01       	movw	r22, r18
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e2       	ldi	r20, 0x20	; 32
    429a:	51 e4       	ldi	r21, 0x41	; 65
    429c:	0e 94 90 29 	call	0x5320	; 0x5320 <__divsf3>
    42a0:	9b 01       	movw	r18, r22
    42a2:	ac 01       	movw	r20, r24
    42a4:	a3 94       	inc	r10
    42a6:	a9 14       	cp	r10, r9
    42a8:	98 f3       	brcs	.-26     	; 0x4290 <_ZN5Print10printFloatEdh+0x58>
    42aa:	c8 01       	movw	r24, r16
    42ac:	b7 01       	movw	r22, r14
    42ae:	0e 94 69 28 	call	0x50d2	; 0x50d2 <__addsf3>
    42b2:	5b 01       	movw	r10, r22
    42b4:	6c 01       	movw	r12, r24
    42b6:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__fixunssfsi>
    42ba:	7b 01       	movw	r14, r22
    42bc:	8c 01       	movw	r16, r24
    42be:	ce 01       	movw	r24, r28
    42c0:	b8 01       	movw	r22, r16
    42c2:	a7 01       	movw	r20, r14
    42c4:	2a e0       	ldi	r18, 0x0A	; 10
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZN5Print5printEmi>
    42cc:	99 20       	and	r9, r9
    42ce:	29 f0       	breq	.+10     	; 0x42da <_ZN5Print10printFloatEdh+0xa2>
    42d0:	ce 01       	movw	r24, r28
    42d2:	61 e8       	ldi	r22, 0x81	; 129
    42d4:	73 e0       	ldi	r23, 0x03	; 3
    42d6:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN5Print5printEPKc>
    42da:	c8 01       	movw	r24, r16
    42dc:	b7 01       	movw	r22, r14
    42de:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <__floatunsisf>
    42e2:	9b 01       	movw	r18, r22
    42e4:	ac 01       	movw	r20, r24
    42e6:	c6 01       	movw	r24, r12
    42e8:	b5 01       	movw	r22, r10
    42ea:	0e 94 38 28 	call	0x5070	; 0x5070 <__subsf3>
    42ee:	22 c0       	rjmp	.+68     	; 0x4334 <_ZN5Print10printFloatEdh+0xfc>
    42f0:	20 e0       	ldi	r18, 0x00	; 0
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	40 e2       	ldi	r20, 0x20	; 32
    42f6:	51 e4       	ldi	r21, 0x41	; 65
    42f8:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsf3>
    42fc:	7b 01       	movw	r14, r22
    42fe:	8c 01       	movw	r16, r24
    4300:	0e 94 2a 2b 	call	0x5654	; 0x5654 <__fixsfsi>
    4304:	5b 01       	movw	r10, r22
    4306:	6c 01       	movw	r12, r24
    4308:	cc 24       	eor	r12, r12
    430a:	b7 fc       	sbrc	r11, 7
    430c:	c0 94       	com	r12
    430e:	dc 2c       	mov	r13, r12
    4310:	ce 01       	movw	r24, r28
    4312:	b6 01       	movw	r22, r12
    4314:	a5 01       	movw	r20, r10
    4316:	2a e0       	ldi	r18, 0x0A	; 10
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	0e 94 21 20 	call	0x4042	; 0x4042 <_ZN5Print5printEli>
    431e:	c6 01       	movw	r24, r12
    4320:	b5 01       	movw	r22, r10
    4322:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__floatsisf>
    4326:	9b 01       	movw	r18, r22
    4328:	ac 01       	movw	r20, r24
    432a:	c8 01       	movw	r24, r16
    432c:	b7 01       	movw	r22, r14
    432e:	0e 94 38 28 	call	0x5070	; 0x5070 <__subsf3>
    4332:	9a 94       	dec	r9
    4334:	99 20       	and	r9, r9
    4336:	e1 f6       	brne	.-72     	; 0x42f0 <_ZN5Print10printFloatEdh+0xb8>
    4338:	df 91       	pop	r29
    433a:	cf 91       	pop	r28
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	ff 90       	pop	r15
    4342:	ef 90       	pop	r14
    4344:	df 90       	pop	r13
    4346:	cf 90       	pop	r12
    4348:	bf 90       	pop	r11
    434a:	af 90       	pop	r10
    434c:	9f 90       	pop	r9
    434e:	08 95       	ret

00004350 <_ZN5Print5printEdi>:
    4350:	0e 94 1c 21 	call	0x4238	; 0x4238 <_ZN5Print10printFloatEdh>
    4354:	08 95       	ret

00004356 <_ZN5Print7printlnEdi>:
    4356:	0f 93       	push	r16
    4358:	1f 93       	push	r17
    435a:	8c 01       	movw	r16, r24
    435c:	0e 94 1c 21 	call	0x4238	; 0x4238 <_ZN5Print10printFloatEdh>
    4360:	c8 01       	movw	r24, r16
    4362:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN5Print7printlnEv>
    4366:	1f 91       	pop	r17
    4368:	0f 91       	pop	r16
    436a:	08 95       	ret

0000436c <attachInterrupt>:
    436c:	88 30       	cpi	r24, 0x08	; 8
    436e:	08 f0       	brcs	.+2      	; 0x4372 <attachInterrupt+0x6>
    4370:	78 c0       	rjmp	.+240    	; 0x4462 <attachInterrupt+0xf6>
    4372:	e8 2f       	mov	r30, r24
    4374:	f0 e0       	ldi	r31, 0x00	; 0
    4376:	ee 0f       	add	r30, r30
    4378:	ff 1f       	adc	r31, r31
    437a:	e0 5a       	subi	r30, 0xA0	; 160
    437c:	fe 4e       	sbci	r31, 0xEE	; 238
    437e:	71 83       	std	Z+1, r23	; 0x01
    4380:	60 83       	st	Z, r22
    4382:	83 30       	cpi	r24, 0x03	; 3
    4384:	d9 f0       	breq	.+54     	; 0x43bc <attachInterrupt+0x50>
    4386:	84 30       	cpi	r24, 0x04	; 4
    4388:	30 f4       	brcc	.+12     	; 0x4396 <attachInterrupt+0x2a>
    438a:	81 30       	cpi	r24, 0x01	; 1
    438c:	09 f4       	brne	.+2      	; 0x4390 <attachInterrupt+0x24>
    438e:	44 c0       	rjmp	.+136    	; 0x4418 <attachInterrupt+0xac>
    4390:	82 30       	cpi	r24, 0x02	; 2
    4392:	60 f4       	brcc	.+24     	; 0x43ac <attachInterrupt+0x40>
    4394:	39 c0       	rjmp	.+114    	; 0x4408 <attachInterrupt+0x9c>
    4396:	85 30       	cpi	r24, 0x05	; 5
    4398:	51 f1       	breq	.+84     	; 0x43ee <attachInterrupt+0x82>
    439a:	85 30       	cpi	r24, 0x05	; 5
    439c:	d8 f0       	brcs	.+54     	; 0x43d4 <attachInterrupt+0x68>
    439e:	86 30       	cpi	r24, 0x06	; 6
    43a0:	09 f4       	brne	.+2      	; 0x43a4 <attachInterrupt+0x38>
    43a2:	46 c0       	rjmp	.+140    	; 0x4430 <attachInterrupt+0xc4>
    43a4:	87 30       	cpi	r24, 0x07	; 7
    43a6:	09 f0       	breq	.+2      	; 0x43aa <attachInterrupt+0x3e>
    43a8:	5c c0       	rjmp	.+184    	; 0x4462 <attachInterrupt+0xf6>
    43aa:	4f c0       	rjmp	.+158    	; 0x444a <attachInterrupt+0xde>
    43ac:	80 91 69 00 	lds	r24, 0x0069
    43b0:	8c 7f       	andi	r24, 0xFC	; 252
    43b2:	84 2b       	or	r24, r20
    43b4:	80 93 69 00 	sts	0x0069, r24
    43b8:	e8 9a       	sbi	0x1d, 0	; 29
    43ba:	08 95       	ret
    43bc:	80 91 69 00 	lds	r24, 0x0069
    43c0:	44 0f       	add	r20, r20
    43c2:	55 1f       	adc	r21, r21
    43c4:	44 0f       	add	r20, r20
    43c6:	55 1f       	adc	r21, r21
    43c8:	83 7f       	andi	r24, 0xF3	; 243
    43ca:	84 2b       	or	r24, r20
    43cc:	80 93 69 00 	sts	0x0069, r24
    43d0:	e9 9a       	sbi	0x1d, 1	; 29
    43d2:	08 95       	ret
    43d4:	80 91 69 00 	lds	r24, 0x0069
    43d8:	74 e0       	ldi	r23, 0x04	; 4
    43da:	44 0f       	add	r20, r20
    43dc:	55 1f       	adc	r21, r21
    43de:	7a 95       	dec	r23
    43e0:	e1 f7       	brne	.-8      	; 0x43da <attachInterrupt+0x6e>
    43e2:	8f 7c       	andi	r24, 0xCF	; 207
    43e4:	84 2b       	or	r24, r20
    43e6:	80 93 69 00 	sts	0x0069, r24
    43ea:	ea 9a       	sbi	0x1d, 2	; 29
    43ec:	08 95       	ret
    43ee:	80 91 69 00 	lds	r24, 0x0069
    43f2:	66 e0       	ldi	r22, 0x06	; 6
    43f4:	44 0f       	add	r20, r20
    43f6:	55 1f       	adc	r21, r21
    43f8:	6a 95       	dec	r22
    43fa:	e1 f7       	brne	.-8      	; 0x43f4 <attachInterrupt+0x88>
    43fc:	8f 73       	andi	r24, 0x3F	; 63
    43fe:	84 2b       	or	r24, r20
    4400:	80 93 69 00 	sts	0x0069, r24
    4404:	eb 9a       	sbi	0x1d, 3	; 29
    4406:	08 95       	ret
    4408:	80 91 6a 00 	lds	r24, 0x006A
    440c:	8c 7f       	andi	r24, 0xFC	; 252
    440e:	84 2b       	or	r24, r20
    4410:	80 93 6a 00 	sts	0x006A, r24
    4414:	ec 9a       	sbi	0x1d, 4	; 29
    4416:	08 95       	ret
    4418:	80 91 6a 00 	lds	r24, 0x006A
    441c:	44 0f       	add	r20, r20
    441e:	55 1f       	adc	r21, r21
    4420:	44 0f       	add	r20, r20
    4422:	55 1f       	adc	r21, r21
    4424:	83 7f       	andi	r24, 0xF3	; 243
    4426:	84 2b       	or	r24, r20
    4428:	80 93 6a 00 	sts	0x006A, r24
    442c:	ed 9a       	sbi	0x1d, 5	; 29
    442e:	08 95       	ret
    4430:	80 91 6a 00 	lds	r24, 0x006A
    4434:	24 e0       	ldi	r18, 0x04	; 4
    4436:	44 0f       	add	r20, r20
    4438:	55 1f       	adc	r21, r21
    443a:	2a 95       	dec	r18
    443c:	e1 f7       	brne	.-8      	; 0x4436 <attachInterrupt+0xca>
    443e:	8f 7c       	andi	r24, 0xCF	; 207
    4440:	84 2b       	or	r24, r20
    4442:	80 93 6a 00 	sts	0x006A, r24
    4446:	ee 9a       	sbi	0x1d, 6	; 29
    4448:	08 95       	ret
    444a:	80 91 6a 00 	lds	r24, 0x006A
    444e:	96 e0       	ldi	r25, 0x06	; 6
    4450:	44 0f       	add	r20, r20
    4452:	55 1f       	adc	r21, r21
    4454:	9a 95       	dec	r25
    4456:	e1 f7       	brne	.-8      	; 0x4450 <attachInterrupt+0xe4>
    4458:	8f 73       	andi	r24, 0x3F	; 63
    445a:	84 2b       	or	r24, r20
    445c:	80 93 6a 00 	sts	0x006A, r24
    4460:	ef 9a       	sbi	0x1d, 7	; 29
    4462:	08 95       	ret

00004464 <detachInterrupt>:
    4464:	88 30       	cpi	r24, 0x08	; 8
    4466:	48 f5       	brcc	.+82     	; 0x44ba <detachInterrupt+0x56>
    4468:	83 30       	cpi	r24, 0x03	; 3
    446a:	91 f0       	breq	.+36     	; 0x4490 <detachInterrupt+0x2c>
    446c:	84 30       	cpi	r24, 0x04	; 4
    446e:	28 f4       	brcc	.+10     	; 0x447a <detachInterrupt+0x16>
    4470:	81 30       	cpi	r24, 0x01	; 1
    4472:	b1 f0       	breq	.+44     	; 0x44a0 <detachInterrupt+0x3c>
    4474:	82 30       	cpi	r24, 0x02	; 2
    4476:	50 f4       	brcc	.+20     	; 0x448c <detachInterrupt+0x28>
    4478:	11 c0       	rjmp	.+34     	; 0x449c <detachInterrupt+0x38>
    447a:	85 30       	cpi	r24, 0x05	; 5
    447c:	69 f0       	breq	.+26     	; 0x4498 <detachInterrupt+0x34>
    447e:	85 30       	cpi	r24, 0x05	; 5
    4480:	48 f0       	brcs	.+18     	; 0x4494 <detachInterrupt+0x30>
    4482:	86 30       	cpi	r24, 0x06	; 6
    4484:	79 f0       	breq	.+30     	; 0x44a4 <detachInterrupt+0x40>
    4486:	87 30       	cpi	r24, 0x07	; 7
    4488:	81 f4       	brne	.+32     	; 0x44aa <detachInterrupt+0x46>
    448a:	0e c0       	rjmp	.+28     	; 0x44a8 <detachInterrupt+0x44>
    448c:	e8 98       	cbi	0x1d, 0	; 29
    448e:	0d c0       	rjmp	.+26     	; 0x44aa <detachInterrupt+0x46>
    4490:	e9 98       	cbi	0x1d, 1	; 29
    4492:	0b c0       	rjmp	.+22     	; 0x44aa <detachInterrupt+0x46>
    4494:	ea 98       	cbi	0x1d, 2	; 29
    4496:	09 c0       	rjmp	.+18     	; 0x44aa <detachInterrupt+0x46>
    4498:	eb 98       	cbi	0x1d, 3	; 29
    449a:	07 c0       	rjmp	.+14     	; 0x44aa <detachInterrupt+0x46>
    449c:	ec 98       	cbi	0x1d, 4	; 29
    449e:	05 c0       	rjmp	.+10     	; 0x44aa <detachInterrupt+0x46>
    44a0:	ed 98       	cbi	0x1d, 5	; 29
    44a2:	03 c0       	rjmp	.+6      	; 0x44aa <detachInterrupt+0x46>
    44a4:	ee 98       	cbi	0x1d, 6	; 29
    44a6:	01 c0       	rjmp	.+2      	; 0x44aa <detachInterrupt+0x46>
    44a8:	ef 98       	cbi	0x1d, 7	; 29
    44aa:	e8 2f       	mov	r30, r24
    44ac:	f0 e0       	ldi	r31, 0x00	; 0
    44ae:	ee 0f       	add	r30, r30
    44b0:	ff 1f       	adc	r31, r31
    44b2:	e0 5a       	subi	r30, 0xA0	; 160
    44b4:	fe 4e       	sbci	r31, 0xEE	; 238
    44b6:	11 82       	std	Z+1, r1	; 0x01
    44b8:	10 82       	st	Z, r1
    44ba:	08 95       	ret

000044bc <__vector_1>:
    44bc:	1f 92       	push	r1
    44be:	0f 92       	push	r0
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	0f 92       	push	r0
    44c4:	0b b6       	in	r0, 0x3b	; 59
    44c6:	0f 92       	push	r0
    44c8:	11 24       	eor	r1, r1
    44ca:	2f 93       	push	r18
    44cc:	3f 93       	push	r19
    44ce:	4f 93       	push	r20
    44d0:	5f 93       	push	r21
    44d2:	6f 93       	push	r22
    44d4:	7f 93       	push	r23
    44d6:	8f 93       	push	r24
    44d8:	9f 93       	push	r25
    44da:	af 93       	push	r26
    44dc:	bf 93       	push	r27
    44de:	ef 93       	push	r30
    44e0:	ff 93       	push	r31
    44e2:	80 91 64 11 	lds	r24, 0x1164
    44e6:	90 91 65 11 	lds	r25, 0x1165
    44ea:	89 2b       	or	r24, r25
    44ec:	29 f0       	breq	.+10     	; 0x44f8 <__vector_1+0x3c>
    44ee:	e0 91 64 11 	lds	r30, 0x1164
    44f2:	f0 91 65 11 	lds	r31, 0x1165
    44f6:	09 95       	icall
    44f8:	ff 91       	pop	r31
    44fa:	ef 91       	pop	r30
    44fc:	bf 91       	pop	r27
    44fe:	af 91       	pop	r26
    4500:	9f 91       	pop	r25
    4502:	8f 91       	pop	r24
    4504:	7f 91       	pop	r23
    4506:	6f 91       	pop	r22
    4508:	5f 91       	pop	r21
    450a:	4f 91       	pop	r20
    450c:	3f 91       	pop	r19
    450e:	2f 91       	pop	r18
    4510:	0f 90       	pop	r0
    4512:	0b be       	out	0x3b, r0	; 59
    4514:	0f 90       	pop	r0
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	0f 90       	pop	r0
    451a:	1f 90       	pop	r1
    451c:	18 95       	reti

0000451e <__vector_2>:
    451e:	1f 92       	push	r1
    4520:	0f 92       	push	r0
    4522:	0f b6       	in	r0, 0x3f	; 63
    4524:	0f 92       	push	r0
    4526:	0b b6       	in	r0, 0x3b	; 59
    4528:	0f 92       	push	r0
    452a:	11 24       	eor	r1, r1
    452c:	2f 93       	push	r18
    452e:	3f 93       	push	r19
    4530:	4f 93       	push	r20
    4532:	5f 93       	push	r21
    4534:	6f 93       	push	r22
    4536:	7f 93       	push	r23
    4538:	8f 93       	push	r24
    453a:	9f 93       	push	r25
    453c:	af 93       	push	r26
    453e:	bf 93       	push	r27
    4540:	ef 93       	push	r30
    4542:	ff 93       	push	r31
    4544:	80 91 66 11 	lds	r24, 0x1166
    4548:	90 91 67 11 	lds	r25, 0x1167
    454c:	89 2b       	or	r24, r25
    454e:	29 f0       	breq	.+10     	; 0x455a <__vector_2+0x3c>
    4550:	e0 91 66 11 	lds	r30, 0x1166
    4554:	f0 91 67 11 	lds	r31, 0x1167
    4558:	09 95       	icall
    455a:	ff 91       	pop	r31
    455c:	ef 91       	pop	r30
    455e:	bf 91       	pop	r27
    4560:	af 91       	pop	r26
    4562:	9f 91       	pop	r25
    4564:	8f 91       	pop	r24
    4566:	7f 91       	pop	r23
    4568:	6f 91       	pop	r22
    456a:	5f 91       	pop	r21
    456c:	4f 91       	pop	r20
    456e:	3f 91       	pop	r19
    4570:	2f 91       	pop	r18
    4572:	0f 90       	pop	r0
    4574:	0b be       	out	0x3b, r0	; 59
    4576:	0f 90       	pop	r0
    4578:	0f be       	out	0x3f, r0	; 63
    457a:	0f 90       	pop	r0
    457c:	1f 90       	pop	r1
    457e:	18 95       	reti

00004580 <__vector_3>:
    4580:	1f 92       	push	r1
    4582:	0f 92       	push	r0
    4584:	0f b6       	in	r0, 0x3f	; 63
    4586:	0f 92       	push	r0
    4588:	0b b6       	in	r0, 0x3b	; 59
    458a:	0f 92       	push	r0
    458c:	11 24       	eor	r1, r1
    458e:	2f 93       	push	r18
    4590:	3f 93       	push	r19
    4592:	4f 93       	push	r20
    4594:	5f 93       	push	r21
    4596:	6f 93       	push	r22
    4598:	7f 93       	push	r23
    459a:	8f 93       	push	r24
    459c:	9f 93       	push	r25
    459e:	af 93       	push	r26
    45a0:	bf 93       	push	r27
    45a2:	ef 93       	push	r30
    45a4:	ff 93       	push	r31
    45a6:	80 91 68 11 	lds	r24, 0x1168
    45aa:	90 91 69 11 	lds	r25, 0x1169
    45ae:	89 2b       	or	r24, r25
    45b0:	29 f0       	breq	.+10     	; 0x45bc <__vector_3+0x3c>
    45b2:	e0 91 68 11 	lds	r30, 0x1168
    45b6:	f0 91 69 11 	lds	r31, 0x1169
    45ba:	09 95       	icall
    45bc:	ff 91       	pop	r31
    45be:	ef 91       	pop	r30
    45c0:	bf 91       	pop	r27
    45c2:	af 91       	pop	r26
    45c4:	9f 91       	pop	r25
    45c6:	8f 91       	pop	r24
    45c8:	7f 91       	pop	r23
    45ca:	6f 91       	pop	r22
    45cc:	5f 91       	pop	r21
    45ce:	4f 91       	pop	r20
    45d0:	3f 91       	pop	r19
    45d2:	2f 91       	pop	r18
    45d4:	0f 90       	pop	r0
    45d6:	0b be       	out	0x3b, r0	; 59
    45d8:	0f 90       	pop	r0
    45da:	0f be       	out	0x3f, r0	; 63
    45dc:	0f 90       	pop	r0
    45de:	1f 90       	pop	r1
    45e0:	18 95       	reti

000045e2 <__vector_4>:
    45e2:	1f 92       	push	r1
    45e4:	0f 92       	push	r0
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	0f 92       	push	r0
    45ea:	0b b6       	in	r0, 0x3b	; 59
    45ec:	0f 92       	push	r0
    45ee:	11 24       	eor	r1, r1
    45f0:	2f 93       	push	r18
    45f2:	3f 93       	push	r19
    45f4:	4f 93       	push	r20
    45f6:	5f 93       	push	r21
    45f8:	6f 93       	push	r22
    45fa:	7f 93       	push	r23
    45fc:	8f 93       	push	r24
    45fe:	9f 93       	push	r25
    4600:	af 93       	push	r26
    4602:	bf 93       	push	r27
    4604:	ef 93       	push	r30
    4606:	ff 93       	push	r31
    4608:	80 91 6a 11 	lds	r24, 0x116A
    460c:	90 91 6b 11 	lds	r25, 0x116B
    4610:	89 2b       	or	r24, r25
    4612:	29 f0       	breq	.+10     	; 0x461e <__vector_4+0x3c>
    4614:	e0 91 6a 11 	lds	r30, 0x116A
    4618:	f0 91 6b 11 	lds	r31, 0x116B
    461c:	09 95       	icall
    461e:	ff 91       	pop	r31
    4620:	ef 91       	pop	r30
    4622:	bf 91       	pop	r27
    4624:	af 91       	pop	r26
    4626:	9f 91       	pop	r25
    4628:	8f 91       	pop	r24
    462a:	7f 91       	pop	r23
    462c:	6f 91       	pop	r22
    462e:	5f 91       	pop	r21
    4630:	4f 91       	pop	r20
    4632:	3f 91       	pop	r19
    4634:	2f 91       	pop	r18
    4636:	0f 90       	pop	r0
    4638:	0b be       	out	0x3b, r0	; 59
    463a:	0f 90       	pop	r0
    463c:	0f be       	out	0x3f, r0	; 63
    463e:	0f 90       	pop	r0
    4640:	1f 90       	pop	r1
    4642:	18 95       	reti

00004644 <__vector_5>:
    4644:	1f 92       	push	r1
    4646:	0f 92       	push	r0
    4648:	0f b6       	in	r0, 0x3f	; 63
    464a:	0f 92       	push	r0
    464c:	0b b6       	in	r0, 0x3b	; 59
    464e:	0f 92       	push	r0
    4650:	11 24       	eor	r1, r1
    4652:	2f 93       	push	r18
    4654:	3f 93       	push	r19
    4656:	4f 93       	push	r20
    4658:	5f 93       	push	r21
    465a:	6f 93       	push	r22
    465c:	7f 93       	push	r23
    465e:	8f 93       	push	r24
    4660:	9f 93       	push	r25
    4662:	af 93       	push	r26
    4664:	bf 93       	push	r27
    4666:	ef 93       	push	r30
    4668:	ff 93       	push	r31
    466a:	80 91 60 11 	lds	r24, 0x1160
    466e:	90 91 61 11 	lds	r25, 0x1161
    4672:	89 2b       	or	r24, r25
    4674:	29 f0       	breq	.+10     	; 0x4680 <__vector_5+0x3c>
    4676:	e0 91 60 11 	lds	r30, 0x1160
    467a:	f0 91 61 11 	lds	r31, 0x1161
    467e:	09 95       	icall
    4680:	ff 91       	pop	r31
    4682:	ef 91       	pop	r30
    4684:	bf 91       	pop	r27
    4686:	af 91       	pop	r26
    4688:	9f 91       	pop	r25
    468a:	8f 91       	pop	r24
    468c:	7f 91       	pop	r23
    468e:	6f 91       	pop	r22
    4690:	5f 91       	pop	r21
    4692:	4f 91       	pop	r20
    4694:	3f 91       	pop	r19
    4696:	2f 91       	pop	r18
    4698:	0f 90       	pop	r0
    469a:	0b be       	out	0x3b, r0	; 59
    469c:	0f 90       	pop	r0
    469e:	0f be       	out	0x3f, r0	; 63
    46a0:	0f 90       	pop	r0
    46a2:	1f 90       	pop	r1
    46a4:	18 95       	reti

000046a6 <__vector_6>:
    46a6:	1f 92       	push	r1
    46a8:	0f 92       	push	r0
    46aa:	0f b6       	in	r0, 0x3f	; 63
    46ac:	0f 92       	push	r0
    46ae:	0b b6       	in	r0, 0x3b	; 59
    46b0:	0f 92       	push	r0
    46b2:	11 24       	eor	r1, r1
    46b4:	2f 93       	push	r18
    46b6:	3f 93       	push	r19
    46b8:	4f 93       	push	r20
    46ba:	5f 93       	push	r21
    46bc:	6f 93       	push	r22
    46be:	7f 93       	push	r23
    46c0:	8f 93       	push	r24
    46c2:	9f 93       	push	r25
    46c4:	af 93       	push	r26
    46c6:	bf 93       	push	r27
    46c8:	ef 93       	push	r30
    46ca:	ff 93       	push	r31
    46cc:	80 91 62 11 	lds	r24, 0x1162
    46d0:	90 91 63 11 	lds	r25, 0x1163
    46d4:	89 2b       	or	r24, r25
    46d6:	29 f0       	breq	.+10     	; 0x46e2 <__vector_6+0x3c>
    46d8:	e0 91 62 11 	lds	r30, 0x1162
    46dc:	f0 91 63 11 	lds	r31, 0x1163
    46e0:	09 95       	icall
    46e2:	ff 91       	pop	r31
    46e4:	ef 91       	pop	r30
    46e6:	bf 91       	pop	r27
    46e8:	af 91       	pop	r26
    46ea:	9f 91       	pop	r25
    46ec:	8f 91       	pop	r24
    46ee:	7f 91       	pop	r23
    46f0:	6f 91       	pop	r22
    46f2:	5f 91       	pop	r21
    46f4:	4f 91       	pop	r20
    46f6:	3f 91       	pop	r19
    46f8:	2f 91       	pop	r18
    46fa:	0f 90       	pop	r0
    46fc:	0b be       	out	0x3b, r0	; 59
    46fe:	0f 90       	pop	r0
    4700:	0f be       	out	0x3f, r0	; 63
    4702:	0f 90       	pop	r0
    4704:	1f 90       	pop	r1
    4706:	18 95       	reti

00004708 <__vector_7>:
    4708:	1f 92       	push	r1
    470a:	0f 92       	push	r0
    470c:	0f b6       	in	r0, 0x3f	; 63
    470e:	0f 92       	push	r0
    4710:	0b b6       	in	r0, 0x3b	; 59
    4712:	0f 92       	push	r0
    4714:	11 24       	eor	r1, r1
    4716:	2f 93       	push	r18
    4718:	3f 93       	push	r19
    471a:	4f 93       	push	r20
    471c:	5f 93       	push	r21
    471e:	6f 93       	push	r22
    4720:	7f 93       	push	r23
    4722:	8f 93       	push	r24
    4724:	9f 93       	push	r25
    4726:	af 93       	push	r26
    4728:	bf 93       	push	r27
    472a:	ef 93       	push	r30
    472c:	ff 93       	push	r31
    472e:	80 91 6c 11 	lds	r24, 0x116C
    4732:	90 91 6d 11 	lds	r25, 0x116D
    4736:	89 2b       	or	r24, r25
    4738:	29 f0       	breq	.+10     	; 0x4744 <__vector_7+0x3c>
    473a:	e0 91 6c 11 	lds	r30, 0x116C
    473e:	f0 91 6d 11 	lds	r31, 0x116D
    4742:	09 95       	icall
    4744:	ff 91       	pop	r31
    4746:	ef 91       	pop	r30
    4748:	bf 91       	pop	r27
    474a:	af 91       	pop	r26
    474c:	9f 91       	pop	r25
    474e:	8f 91       	pop	r24
    4750:	7f 91       	pop	r23
    4752:	6f 91       	pop	r22
    4754:	5f 91       	pop	r21
    4756:	4f 91       	pop	r20
    4758:	3f 91       	pop	r19
    475a:	2f 91       	pop	r18
    475c:	0f 90       	pop	r0
    475e:	0b be       	out	0x3b, r0	; 59
    4760:	0f 90       	pop	r0
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	0f 90       	pop	r0
    4766:	1f 90       	pop	r1
    4768:	18 95       	reti

0000476a <__vector_8>:
    476a:	1f 92       	push	r1
    476c:	0f 92       	push	r0
    476e:	0f b6       	in	r0, 0x3f	; 63
    4770:	0f 92       	push	r0
    4772:	0b b6       	in	r0, 0x3b	; 59
    4774:	0f 92       	push	r0
    4776:	11 24       	eor	r1, r1
    4778:	2f 93       	push	r18
    477a:	3f 93       	push	r19
    477c:	4f 93       	push	r20
    477e:	5f 93       	push	r21
    4780:	6f 93       	push	r22
    4782:	7f 93       	push	r23
    4784:	8f 93       	push	r24
    4786:	9f 93       	push	r25
    4788:	af 93       	push	r26
    478a:	bf 93       	push	r27
    478c:	ef 93       	push	r30
    478e:	ff 93       	push	r31
    4790:	80 91 6e 11 	lds	r24, 0x116E
    4794:	90 91 6f 11 	lds	r25, 0x116F
    4798:	89 2b       	or	r24, r25
    479a:	29 f0       	breq	.+10     	; 0x47a6 <__vector_8+0x3c>
    479c:	e0 91 6e 11 	lds	r30, 0x116E
    47a0:	f0 91 6f 11 	lds	r31, 0x116F
    47a4:	09 95       	icall
    47a6:	ff 91       	pop	r31
    47a8:	ef 91       	pop	r30
    47aa:	bf 91       	pop	r27
    47ac:	af 91       	pop	r26
    47ae:	9f 91       	pop	r25
    47b0:	8f 91       	pop	r24
    47b2:	7f 91       	pop	r23
    47b4:	6f 91       	pop	r22
    47b6:	5f 91       	pop	r21
    47b8:	4f 91       	pop	r20
    47ba:	3f 91       	pop	r19
    47bc:	2f 91       	pop	r18
    47be:	0f 90       	pop	r0
    47c0:	0b be       	out	0x3b, r0	; 59
    47c2:	0f 90       	pop	r0
    47c4:	0f be       	out	0x3f, r0	; 63
    47c6:	0f 90       	pop	r0
    47c8:	1f 90       	pop	r1
    47ca:	18 95       	reti

000047cc <__vector_23>:
    47cc:	1f 92       	push	r1
    47ce:	0f 92       	push	r0
    47d0:	0f b6       	in	r0, 0x3f	; 63
    47d2:	0f 92       	push	r0
    47d4:	11 24       	eor	r1, r1
    47d6:	2f 93       	push	r18
    47d8:	3f 93       	push	r19
    47da:	8f 93       	push	r24
    47dc:	9f 93       	push	r25
    47de:	af 93       	push	r26
    47e0:	bf 93       	push	r27
    47e2:	80 91 74 11 	lds	r24, 0x1174
    47e6:	90 91 75 11 	lds	r25, 0x1175
    47ea:	a0 91 76 11 	lds	r26, 0x1176
    47ee:	b0 91 77 11 	lds	r27, 0x1177
    47f2:	30 91 78 11 	lds	r19, 0x1178
    47f6:	01 96       	adiw	r24, 0x01	; 1
    47f8:	a1 1d       	adc	r26, r1
    47fa:	b1 1d       	adc	r27, r1
    47fc:	23 2f       	mov	r18, r19
    47fe:	2d 5f       	subi	r18, 0xFD	; 253
    4800:	2d 37       	cpi	r18, 0x7D	; 125
    4802:	20 f0       	brcs	.+8      	; 0x480c <__vector_23+0x40>
    4804:	2d 57       	subi	r18, 0x7D	; 125
    4806:	01 96       	adiw	r24, 0x01	; 1
    4808:	a1 1d       	adc	r26, r1
    480a:	b1 1d       	adc	r27, r1
    480c:	20 93 78 11 	sts	0x1178, r18
    4810:	80 93 74 11 	sts	0x1174, r24
    4814:	90 93 75 11 	sts	0x1175, r25
    4818:	a0 93 76 11 	sts	0x1176, r26
    481c:	b0 93 77 11 	sts	0x1177, r27
    4820:	80 91 70 11 	lds	r24, 0x1170
    4824:	90 91 71 11 	lds	r25, 0x1171
    4828:	a0 91 72 11 	lds	r26, 0x1172
    482c:	b0 91 73 11 	lds	r27, 0x1173
    4830:	01 96       	adiw	r24, 0x01	; 1
    4832:	a1 1d       	adc	r26, r1
    4834:	b1 1d       	adc	r27, r1
    4836:	80 93 70 11 	sts	0x1170, r24
    483a:	90 93 71 11 	sts	0x1171, r25
    483e:	a0 93 72 11 	sts	0x1172, r26
    4842:	b0 93 73 11 	sts	0x1173, r27
    4846:	bf 91       	pop	r27
    4848:	af 91       	pop	r26
    484a:	9f 91       	pop	r25
    484c:	8f 91       	pop	r24
    484e:	3f 91       	pop	r19
    4850:	2f 91       	pop	r18
    4852:	0f 90       	pop	r0
    4854:	0f be       	out	0x3f, r0	; 63
    4856:	0f 90       	pop	r0
    4858:	1f 90       	pop	r1
    485a:	18 95       	reti

0000485c <millis>:
    485c:	8f b7       	in	r24, 0x3f	; 63
    485e:	f8 94       	cli
    4860:	20 91 74 11 	lds	r18, 0x1174
    4864:	30 91 75 11 	lds	r19, 0x1175
    4868:	40 91 76 11 	lds	r20, 0x1176
    486c:	50 91 77 11 	lds	r21, 0x1177
    4870:	8f bf       	out	0x3f, r24	; 63
    4872:	b9 01       	movw	r22, r18
    4874:	ca 01       	movw	r24, r20
    4876:	08 95       	ret

00004878 <micros>:
    4878:	9f b7       	in	r25, 0x3f	; 63
    487a:	f8 94       	cli
    487c:	20 91 70 11 	lds	r18, 0x1170
    4880:	30 91 71 11 	lds	r19, 0x1171
    4884:	40 91 72 11 	lds	r20, 0x1172
    4888:	50 91 73 11 	lds	r21, 0x1173
    488c:	86 b5       	in	r24, 0x26	; 38
    488e:	a8 9b       	sbis	0x15, 0	; 21
    4890:	06 c0       	rjmp	.+12     	; 0x489e <micros+0x26>
    4892:	8f 3f       	cpi	r24, 0xFF	; 255
    4894:	21 f0       	breq	.+8      	; 0x489e <micros+0x26>
    4896:	2f 5f       	subi	r18, 0xFF	; 255
    4898:	3f 4f       	sbci	r19, 0xFF	; 255
    489a:	4f 4f       	sbci	r20, 0xFF	; 255
    489c:	5f 4f       	sbci	r21, 0xFF	; 255
    489e:	9f bf       	out	0x3f, r25	; 63
    48a0:	54 2f       	mov	r21, r20
    48a2:	43 2f       	mov	r20, r19
    48a4:	32 2f       	mov	r19, r18
    48a6:	22 27       	eor	r18, r18
    48a8:	28 0f       	add	r18, r24
    48aa:	31 1d       	adc	r19, r1
    48ac:	41 1d       	adc	r20, r1
    48ae:	51 1d       	adc	r21, r1
    48b0:	82 e0       	ldi	r24, 0x02	; 2
    48b2:	22 0f       	add	r18, r18
    48b4:	33 1f       	adc	r19, r19
    48b6:	44 1f       	adc	r20, r20
    48b8:	55 1f       	adc	r21, r21
    48ba:	8a 95       	dec	r24
    48bc:	d1 f7       	brne	.-12     	; 0x48b2 <micros+0x3a>
    48be:	b9 01       	movw	r22, r18
    48c0:	ca 01       	movw	r24, r20
    48c2:	08 95       	ret

000048c4 <delay>:
    48c4:	ef 92       	push	r14
    48c6:	ff 92       	push	r15
    48c8:	0f 93       	push	r16
    48ca:	1f 93       	push	r17
    48cc:	7b 01       	movw	r14, r22
    48ce:	8c 01       	movw	r16, r24
    48d0:	8f b7       	in	r24, 0x3f	; 63
    48d2:	f8 94       	cli
    48d4:	40 91 74 11 	lds	r20, 0x1174
    48d8:	50 91 75 11 	lds	r21, 0x1175
    48dc:	60 91 76 11 	lds	r22, 0x1176
    48e0:	70 91 77 11 	lds	r23, 0x1177
    48e4:	8f bf       	out	0x3f, r24	; 63
    48e6:	2f b7       	in	r18, 0x3f	; 63
    48e8:	f8 94       	cli
    48ea:	80 91 74 11 	lds	r24, 0x1174
    48ee:	90 91 75 11 	lds	r25, 0x1175
    48f2:	a0 91 76 11 	lds	r26, 0x1176
    48f6:	b0 91 77 11 	lds	r27, 0x1177
    48fa:	2f bf       	out	0x3f, r18	; 63
    48fc:	84 1b       	sub	r24, r20
    48fe:	95 0b       	sbc	r25, r21
    4900:	a6 0b       	sbc	r26, r22
    4902:	b7 0b       	sbc	r27, r23
    4904:	e8 16       	cp	r14, r24
    4906:	f9 06       	cpc	r15, r25
    4908:	0a 07       	cpc	r16, r26
    490a:	1b 07       	cpc	r17, r27
    490c:	60 f7       	brcc	.-40     	; 0x48e6 <delay+0x22>
    490e:	1f 91       	pop	r17
    4910:	0f 91       	pop	r16
    4912:	ff 90       	pop	r15
    4914:	ef 90       	pop	r14
    4916:	08 95       	ret

00004918 <delayMicroseconds>:
    4918:	01 97       	sbiw	r24, 0x01	; 1
    491a:	39 f0       	breq	.+14     	; 0x492a <delayMicroseconds+0x12>
    491c:	88 0f       	add	r24, r24
    491e:	99 1f       	adc	r25, r25
    4920:	88 0f       	add	r24, r24
    4922:	99 1f       	adc	r25, r25
    4924:	02 97       	sbiw	r24, 0x02	; 2
    4926:	01 97       	sbiw	r24, 0x01	; 1
    4928:	f1 f7       	brne	.-4      	; 0x4926 <delayMicroseconds+0xe>
    492a:	08 95       	ret

0000492c <init>:
    492c:	78 94       	sei
    492e:	84 b5       	in	r24, 0x24	; 36
    4930:	82 60       	ori	r24, 0x02	; 2
    4932:	84 bd       	out	0x24, r24	; 36
    4934:	84 b5       	in	r24, 0x24	; 36
    4936:	81 60       	ori	r24, 0x01	; 1
    4938:	84 bd       	out	0x24, r24	; 36
    493a:	85 b5       	in	r24, 0x25	; 37
    493c:	82 60       	ori	r24, 0x02	; 2
    493e:	85 bd       	out	0x25, r24	; 37
    4940:	85 b5       	in	r24, 0x25	; 37
    4942:	81 60       	ori	r24, 0x01	; 1
    4944:	85 bd       	out	0x25, r24	; 37
    4946:	ee e6       	ldi	r30, 0x6E	; 110
    4948:	f0 e0       	ldi	r31, 0x00	; 0
    494a:	80 81       	ld	r24, Z
    494c:	81 60       	ori	r24, 0x01	; 1
    494e:	80 83       	st	Z, r24
    4950:	e1 eb       	ldi	r30, 0xB1	; 177
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	84 60       	ori	r24, 0x04	; 4
    4958:	80 83       	st	Z, r24
    495a:	e0 eb       	ldi	r30, 0xB0	; 176
    495c:	f0 e0       	ldi	r31, 0x00	; 0
    495e:	80 81       	ld	r24, Z
    4960:	81 60       	ori	r24, 0x01	; 1
    4962:	80 83       	st	Z, r24
    4964:	e1 e9       	ldi	r30, 0x91	; 145
    4966:	f0 e0       	ldi	r31, 0x00	; 0
    4968:	80 81       	ld	r24, Z
    496a:	82 60       	ori	r24, 0x02	; 2
    496c:	80 83       	st	Z, r24
    496e:	80 81       	ld	r24, Z
    4970:	81 60       	ori	r24, 0x01	; 1
    4972:	80 83       	st	Z, r24
    4974:	e1 ea       	ldi	r30, 0xA1	; 161
    4976:	f0 e0       	ldi	r31, 0x00	; 0
    4978:	80 81       	ld	r24, Z
    497a:	82 60       	ori	r24, 0x02	; 2
    497c:	80 83       	st	Z, r24
    497e:	80 81       	ld	r24, Z
    4980:	81 60       	ori	r24, 0x01	; 1
    4982:	80 83       	st	Z, r24
    4984:	e1 e2       	ldi	r30, 0x21	; 33
    4986:	f1 e0       	ldi	r31, 0x01	; 1
    4988:	80 81       	ld	r24, Z
    498a:	82 60       	ori	r24, 0x02	; 2
    498c:	80 83       	st	Z, r24
    498e:	80 81       	ld	r24, Z
    4990:	81 60       	ori	r24, 0x01	; 1
    4992:	80 83       	st	Z, r24
    4994:	e0 e9       	ldi	r30, 0x90	; 144
    4996:	f0 e0       	ldi	r31, 0x00	; 0
    4998:	80 81       	ld	r24, Z
    499a:	81 60       	ori	r24, 0x01	; 1
    499c:	80 83       	st	Z, r24
    499e:	e0 ea       	ldi	r30, 0xA0	; 160
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	80 81       	ld	r24, Z
    49a4:	81 60       	ori	r24, 0x01	; 1
    49a6:	80 83       	st	Z, r24
    49a8:	e0 e2       	ldi	r30, 0x20	; 32
    49aa:	f1 e0       	ldi	r31, 0x01	; 1
    49ac:	80 81       	ld	r24, Z
    49ae:	81 60       	ori	r24, 0x01	; 1
    49b0:	80 83       	st	Z, r24
    49b2:	ea e7       	ldi	r30, 0x7A	; 122
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	80 81       	ld	r24, Z
    49b8:	84 60       	ori	r24, 0x04	; 4
    49ba:	80 83       	st	Z, r24
    49bc:	80 81       	ld	r24, Z
    49be:	82 60       	ori	r24, 0x02	; 2
    49c0:	80 83       	st	Z, r24
    49c2:	80 81       	ld	r24, Z
    49c4:	81 60       	ori	r24, 0x01	; 1
    49c6:	80 83       	st	Z, r24
    49c8:	80 81       	ld	r24, Z
    49ca:	80 68       	ori	r24, 0x80	; 128
    49cc:	80 83       	st	Z, r24
    49ce:	10 92 c1 00 	sts	0x00C1, r1
    49d2:	08 95       	ret

000049d4 <__cxa_pure_virtual>:
    49d4:	8d e0       	ldi	r24, 0x0D	; 13
    49d6:	61 e0       	ldi	r22, 0x01	; 1
    49d8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
    49dc:	f8 94       	cli
    49de:	ff cf       	rjmp	.-2      	; 0x49de <__cxa_pure_virtual+0xa>

000049e0 <analogReference>:
    49e0:	80 93 8d 03 	sts	0x038D, r24
    49e4:	08 95       	ret

000049e6 <analogRead>:
    49e6:	38 2f       	mov	r19, r24
    49e8:	37 70       	andi	r19, 0x07	; 7
    49ea:	20 91 8d 03 	lds	r18, 0x038D
    49ee:	22 95       	swap	r18
    49f0:	22 0f       	add	r18, r18
    49f2:	22 0f       	add	r18, r18
    49f4:	20 7c       	andi	r18, 0xC0	; 192
    49f6:	23 2b       	or	r18, r19
    49f8:	20 93 7c 00 	sts	0x007C, r18
    49fc:	20 91 7b 00 	lds	r18, 0x007B
    4a00:	86 95       	lsr	r24
    4a02:	86 95       	lsr	r24
    4a04:	86 95       	lsr	r24
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	81 70       	andi	r24, 0x01	; 1
    4a0a:	90 70       	andi	r25, 0x00	; 0
    4a0c:	33 e0       	ldi	r19, 0x03	; 3
    4a0e:	88 0f       	add	r24, r24
    4a10:	99 1f       	adc	r25, r25
    4a12:	3a 95       	dec	r19
    4a14:	e1 f7       	brne	.-8      	; 0x4a0e <analogRead+0x28>
    4a16:	27 7f       	andi	r18, 0xF7	; 247
    4a18:	28 2b       	or	r18, r24
    4a1a:	20 93 7b 00 	sts	0x007B, r18
    4a1e:	80 91 7a 00 	lds	r24, 0x007A
    4a22:	80 64       	ori	r24, 0x40	; 64
    4a24:	80 93 7a 00 	sts	0x007A, r24
    4a28:	80 91 7a 00 	lds	r24, 0x007A
    4a2c:	86 fd       	sbrc	r24, 6
    4a2e:	fc cf       	rjmp	.-8      	; 0x4a28 <analogRead+0x42>
    4a30:	20 91 78 00 	lds	r18, 0x0078
    4a34:	40 91 79 00 	lds	r20, 0x0079
    4a38:	94 2f       	mov	r25, r20
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	30 e0       	ldi	r19, 0x00	; 0
    4a3e:	28 2b       	or	r18, r24
    4a40:	39 2b       	or	r19, r25
    4a42:	c9 01       	movw	r24, r18
    4a44:	08 95       	ret

00004a46 <analogWrite>:
    4a46:	1f 93       	push	r17
    4a48:	cf 93       	push	r28
    4a4a:	df 93       	push	r29
    4a4c:	18 2f       	mov	r17, r24
    4a4e:	eb 01       	movw	r28, r22
    4a50:	61 e0       	ldi	r22, 0x01	; 1
    4a52:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <pinMode>
    4a56:	e1 2f       	mov	r30, r17
    4a58:	f0 e0       	ldi	r31, 0x00	; 0
    4a5a:	e2 54       	subi	r30, 0x42	; 66
    4a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a5e:	84 91       	lpm	r24, Z+
    4a60:	83 30       	cpi	r24, 0x03	; 3
    4a62:	09 f4       	brne	.+2      	; 0x4a66 <analogWrite+0x20>
    4a64:	96 c0       	rjmp	.+300    	; 0x4b92 <analogWrite+0x14c>
    4a66:	84 30       	cpi	r24, 0x04	; 4
    4a68:	09 f4       	brne	.+2      	; 0x4a6c <analogWrite+0x26>
    4a6a:	93 c0       	rjmp	.+294    	; 0x4b92 <analogWrite+0x14c>
    4a6c:	81 30       	cpi	r24, 0x01	; 1
    4a6e:	41 f4       	brne	.+16     	; 0x4a80 <analogWrite+0x3a>
    4a70:	20 97       	sbiw	r28, 0x00	; 0
    4a72:	09 f4       	brne	.+2      	; 0x4a76 <analogWrite+0x30>
    4a74:	87 c0       	rjmp	.+270    	; 0x4b84 <analogWrite+0x13e>
    4a76:	84 b5       	in	r24, 0x24	; 36
    4a78:	80 68       	ori	r24, 0x80	; 128
    4a7a:	84 bd       	out	0x24, r24	; 36
    4a7c:	c7 bd       	out	0x27, r28	; 39
    4a7e:	89 c0       	rjmp	.+274    	; 0x4b92 <analogWrite+0x14c>
    4a80:	82 30       	cpi	r24, 0x02	; 2
    4a82:	41 f4       	brne	.+16     	; 0x4a94 <analogWrite+0x4e>
    4a84:	20 97       	sbiw	r28, 0x00	; 0
    4a86:	09 f4       	brne	.+2      	; 0x4a8a <analogWrite+0x44>
    4a88:	7d c0       	rjmp	.+250    	; 0x4b84 <analogWrite+0x13e>
    4a8a:	84 b5       	in	r24, 0x24	; 36
    4a8c:	80 62       	ori	r24, 0x20	; 32
    4a8e:	84 bd       	out	0x24, r24	; 36
    4a90:	c8 bd       	out	0x28, r28	; 40
    4a92:	7f c0       	rjmp	.+254    	; 0x4b92 <analogWrite+0x14c>
    4a94:	86 30       	cpi	r24, 0x06	; 6
    4a96:	41 f4       	brne	.+16     	; 0x4aa8 <analogWrite+0x62>
    4a98:	80 91 b0 00 	lds	r24, 0x00B0
    4a9c:	80 68       	ori	r24, 0x80	; 128
    4a9e:	80 93 b0 00 	sts	0x00B0, r24
    4aa2:	c0 93 b3 00 	sts	0x00B3, r28
    4aa6:	75 c0       	rjmp	.+234    	; 0x4b92 <analogWrite+0x14c>
    4aa8:	87 30       	cpi	r24, 0x07	; 7
    4aaa:	41 f4       	brne	.+16     	; 0x4abc <analogWrite+0x76>
    4aac:	80 91 b0 00 	lds	r24, 0x00B0
    4ab0:	80 62       	ori	r24, 0x20	; 32
    4ab2:	80 93 b0 00 	sts	0x00B0, r24
    4ab6:	c0 93 b4 00 	sts	0x00B4, r28
    4aba:	6b c0       	rjmp	.+214    	; 0x4b92 <analogWrite+0x14c>
    4abc:	88 30       	cpi	r24, 0x08	; 8
    4abe:	51 f4       	brne	.+20     	; 0x4ad4 <analogWrite+0x8e>
    4ac0:	80 91 90 00 	lds	r24, 0x0090
    4ac4:	80 68       	ori	r24, 0x80	; 128
    4ac6:	80 93 90 00 	sts	0x0090, r24
    4aca:	d0 93 99 00 	sts	0x0099, r29
    4ace:	c0 93 98 00 	sts	0x0098, r28
    4ad2:	5f c0       	rjmp	.+190    	; 0x4b92 <analogWrite+0x14c>
    4ad4:	89 30       	cpi	r24, 0x09	; 9
    4ad6:	51 f4       	brne	.+20     	; 0x4aec <analogWrite+0xa6>
    4ad8:	80 91 90 00 	lds	r24, 0x0090
    4adc:	80 62       	ori	r24, 0x20	; 32
    4ade:	80 93 90 00 	sts	0x0090, r24
    4ae2:	d0 93 9b 00 	sts	0x009B, r29
    4ae6:	c0 93 9a 00 	sts	0x009A, r28
    4aea:	53 c0       	rjmp	.+166    	; 0x4b92 <analogWrite+0x14c>
    4aec:	8a 30       	cpi	r24, 0x0A	; 10
    4aee:	51 f4       	brne	.+20     	; 0x4b04 <analogWrite+0xbe>
    4af0:	80 91 90 00 	lds	r24, 0x0090
    4af4:	88 60       	ori	r24, 0x08	; 8
    4af6:	80 93 90 00 	sts	0x0090, r24
    4afa:	d0 93 9d 00 	sts	0x009D, r29
    4afe:	c0 93 9c 00 	sts	0x009C, r28
    4b02:	47 c0       	rjmp	.+142    	; 0x4b92 <analogWrite+0x14c>
    4b04:	8b 30       	cpi	r24, 0x0B	; 11
    4b06:	51 f4       	brne	.+20     	; 0x4b1c <analogWrite+0xd6>
    4b08:	80 91 a0 00 	lds	r24, 0x00A0
    4b0c:	80 68       	ori	r24, 0x80	; 128
    4b0e:	80 93 a0 00 	sts	0x00A0, r24
    4b12:	d0 93 a9 00 	sts	0x00A9, r29
    4b16:	c0 93 a8 00 	sts	0x00A8, r28
    4b1a:	3b c0       	rjmp	.+118    	; 0x4b92 <analogWrite+0x14c>
    4b1c:	84 91       	lpm	r24, Z+
    4b1e:	8c 30       	cpi	r24, 0x0C	; 12
    4b20:	51 f4       	brne	.+20     	; 0x4b36 <analogWrite+0xf0>
    4b22:	80 91 a0 00 	lds	r24, 0x00A0
    4b26:	80 62       	ori	r24, 0x20	; 32
    4b28:	80 93 a0 00 	sts	0x00A0, r24
    4b2c:	d0 93 ab 00 	sts	0x00AB, r29
    4b30:	c0 93 aa 00 	sts	0x00AA, r28
    4b34:	2e c0       	rjmp	.+92     	; 0x4b92 <analogWrite+0x14c>
    4b36:	8d 30       	cpi	r24, 0x0D	; 13
    4b38:	51 f4       	brne	.+20     	; 0x4b4e <analogWrite+0x108>
    4b3a:	80 91 a0 00 	lds	r24, 0x00A0
    4b3e:	88 60       	ori	r24, 0x08	; 8
    4b40:	80 93 a0 00 	sts	0x00A0, r24
    4b44:	d0 93 ad 00 	sts	0x00AD, r29
    4b48:	c0 93 ac 00 	sts	0x00AC, r28
    4b4c:	22 c0       	rjmp	.+68     	; 0x4b92 <analogWrite+0x14c>
    4b4e:	8e 30       	cpi	r24, 0x0E	; 14
    4b50:	51 f4       	brne	.+20     	; 0x4b66 <analogWrite+0x120>
    4b52:	80 91 20 01 	lds	r24, 0x0120
    4b56:	80 68       	ori	r24, 0x80	; 128
    4b58:	80 93 20 01 	sts	0x0120, r24
    4b5c:	d0 93 29 01 	sts	0x0129, r29
    4b60:	c0 93 28 01 	sts	0x0128, r28
    4b64:	16 c0       	rjmp	.+44     	; 0x4b92 <analogWrite+0x14c>
    4b66:	8f 30       	cpi	r24, 0x0F	; 15
    4b68:	51 f4       	brne	.+20     	; 0x4b7e <analogWrite+0x138>
    4b6a:	80 91 20 01 	lds	r24, 0x0120
    4b6e:	80 62       	ori	r24, 0x20	; 32
    4b70:	80 93 20 01 	sts	0x0120, r24
    4b74:	d0 93 2b 01 	sts	0x012B, r29
    4b78:	c0 93 2a 01 	sts	0x012A, r28
    4b7c:	0a c0       	rjmp	.+20     	; 0x4b92 <analogWrite+0x14c>
    4b7e:	c0 38       	cpi	r28, 0x80	; 128
    4b80:	d1 05       	cpc	r29, r1
    4b82:	1c f4       	brge	.+6      	; 0x4b8a <analogWrite+0x144>
    4b84:	81 2f       	mov	r24, r17
    4b86:	60 e0       	ldi	r22, 0x00	; 0
    4b88:	02 c0       	rjmp	.+4      	; 0x4b8e <analogWrite+0x148>
    4b8a:	81 2f       	mov	r24, r17
    4b8c:	61 e0       	ldi	r22, 0x01	; 1
    4b8e:	0e 94 ed 25 	call	0x4bda	; 0x4bda <digitalWrite>
    4b92:	df 91       	pop	r29
    4b94:	cf 91       	pop	r28
    4b96:	1f 91       	pop	r17
    4b98:	08 95       	ret

00004b9a <pinMode>:
    4b9a:	28 2f       	mov	r18, r24
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	c9 01       	movw	r24, r18
    4ba0:	88 58       	subi	r24, 0x88	; 136
    4ba2:	9e 4f       	sbci	r25, 0xFE	; 254
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	94 91       	lpm	r25, Z+
    4ba8:	2e 5c       	subi	r18, 0xCE	; 206
    4baa:	3e 4f       	sbci	r19, 0xFE	; 254
    4bac:	f9 01       	movw	r30, r18
    4bae:	84 91       	lpm	r24, Z+
    4bb0:	88 23       	and	r24, r24
    4bb2:	91 f0       	breq	.+36     	; 0x4bd8 <pinMode+0x3e>
    4bb4:	e8 2f       	mov	r30, r24
    4bb6:	f0 e0       	ldi	r31, 0x00	; 0
    4bb8:	ee 0f       	add	r30, r30
    4bba:	ff 1f       	adc	r31, r31
    4bbc:	ec 51       	subi	r30, 0x1C	; 28
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	a5 91       	lpm	r26, Z+
    4bc2:	b4 91       	lpm	r27, Z+
    4bc4:	66 23       	and	r22, r22
    4bc6:	29 f4       	brne	.+10     	; 0x4bd2 <pinMode+0x38>
    4bc8:	8c 91       	ld	r24, X
    4bca:	90 95       	com	r25
    4bcc:	89 23       	and	r24, r25
    4bce:	8c 93       	st	X, r24
    4bd0:	08 95       	ret
    4bd2:	8c 91       	ld	r24, X
    4bd4:	89 2b       	or	r24, r25
    4bd6:	8c 93       	st	X, r24
    4bd8:	08 95       	ret

00004bda <digitalWrite>:
    4bda:	48 2f       	mov	r20, r24
    4bdc:	50 e0       	ldi	r21, 0x00	; 0
    4bde:	ca 01       	movw	r24, r20
    4be0:	82 54       	subi	r24, 0x42	; 66
    4be2:	9e 4f       	sbci	r25, 0xFE	; 254
    4be4:	fc 01       	movw	r30, r24
    4be6:	24 91       	lpm	r18, Z+
    4be8:	ca 01       	movw	r24, r20
    4bea:	88 58       	subi	r24, 0x88	; 136
    4bec:	9e 4f       	sbci	r25, 0xFE	; 254
    4bee:	fc 01       	movw	r30, r24
    4bf0:	94 91       	lpm	r25, Z+
    4bf2:	4e 5c       	subi	r20, 0xCE	; 206
    4bf4:	5e 4f       	sbci	r21, 0xFE	; 254
    4bf6:	fa 01       	movw	r30, r20
    4bf8:	34 91       	lpm	r19, Z+
    4bfa:	33 23       	and	r19, r19
    4bfc:	09 f4       	brne	.+2      	; 0x4c00 <digitalWrite+0x26>
    4bfe:	55 c0       	rjmp	.+170    	; 0x4caa <digitalWrite+0xd0>
    4c00:	22 23       	and	r18, r18
    4c02:	09 f4       	brne	.+2      	; 0x4c06 <digitalWrite+0x2c>
    4c04:	40 c0       	rjmp	.+128    	; 0x4c86 <digitalWrite+0xac>
    4c06:	21 30       	cpi	r18, 0x01	; 1
    4c08:	19 f4       	brne	.+6      	; 0x4c10 <digitalWrite+0x36>
    4c0a:	84 b5       	in	r24, 0x24	; 36
    4c0c:	8f 77       	andi	r24, 0x7F	; 127
    4c0e:	04 c0       	rjmp	.+8      	; 0x4c18 <digitalWrite+0x3e>
    4c10:	22 30       	cpi	r18, 0x02	; 2
    4c12:	21 f4       	brne	.+8      	; 0x4c1c <digitalWrite+0x42>
    4c14:	84 b5       	in	r24, 0x24	; 36
    4c16:	8f 7d       	andi	r24, 0xDF	; 223
    4c18:	84 bd       	out	0x24, r24	; 36
    4c1a:	35 c0       	rjmp	.+106    	; 0x4c86 <digitalWrite+0xac>
    4c1c:	26 30       	cpi	r18, 0x06	; 6
    4c1e:	21 f4       	brne	.+8      	; 0x4c28 <digitalWrite+0x4e>
    4c20:	80 91 b0 00 	lds	r24, 0x00B0
    4c24:	8f 77       	andi	r24, 0x7F	; 127
    4c26:	05 c0       	rjmp	.+10     	; 0x4c32 <digitalWrite+0x58>
    4c28:	27 30       	cpi	r18, 0x07	; 7
    4c2a:	31 f4       	brne	.+12     	; 0x4c38 <digitalWrite+0x5e>
    4c2c:	80 91 b0 00 	lds	r24, 0x00B0
    4c30:	8f 7d       	andi	r24, 0xDF	; 223
    4c32:	80 93 b0 00 	sts	0x00B0, r24
    4c36:	27 c0       	rjmp	.+78     	; 0x4c86 <digitalWrite+0xac>
    4c38:	28 30       	cpi	r18, 0x08	; 8
    4c3a:	21 f4       	brne	.+8      	; 0x4c44 <digitalWrite+0x6a>
    4c3c:	80 91 90 00 	lds	r24, 0x0090
    4c40:	8f 77       	andi	r24, 0x7F	; 127
    4c42:	0b c0       	rjmp	.+22     	; 0x4c5a <digitalWrite+0x80>
    4c44:	29 30       	cpi	r18, 0x09	; 9
    4c46:	21 f4       	brne	.+8      	; 0x4c50 <digitalWrite+0x76>
    4c48:	80 91 90 00 	lds	r24, 0x0090
    4c4c:	8f 7d       	andi	r24, 0xDF	; 223
    4c4e:	05 c0       	rjmp	.+10     	; 0x4c5a <digitalWrite+0x80>
    4c50:	2a 30       	cpi	r18, 0x0A	; 10
    4c52:	31 f4       	brne	.+12     	; 0x4c60 <digitalWrite+0x86>
    4c54:	80 91 90 00 	lds	r24, 0x0090
    4c58:	87 7f       	andi	r24, 0xF7	; 247
    4c5a:	80 93 90 00 	sts	0x0090, r24
    4c5e:	13 c0       	rjmp	.+38     	; 0x4c86 <digitalWrite+0xac>
    4c60:	2b 30       	cpi	r18, 0x0B	; 11
    4c62:	21 f4       	brne	.+8      	; 0x4c6c <digitalWrite+0x92>
    4c64:	80 91 a0 00 	lds	r24, 0x00A0
    4c68:	8f 77       	andi	r24, 0x7F	; 127
    4c6a:	0b c0       	rjmp	.+22     	; 0x4c82 <digitalWrite+0xa8>
    4c6c:	2c 30       	cpi	r18, 0x0C	; 12
    4c6e:	21 f4       	brne	.+8      	; 0x4c78 <digitalWrite+0x9e>
    4c70:	80 91 a0 00 	lds	r24, 0x00A0
    4c74:	8f 7d       	andi	r24, 0xDF	; 223
    4c76:	05 c0       	rjmp	.+10     	; 0x4c82 <digitalWrite+0xa8>
    4c78:	2d 30       	cpi	r18, 0x0D	; 13
    4c7a:	29 f4       	brne	.+10     	; 0x4c86 <digitalWrite+0xac>
    4c7c:	80 91 a0 00 	lds	r24, 0x00A0
    4c80:	87 7f       	andi	r24, 0xF7	; 247
    4c82:	80 93 a0 00 	sts	0x00A0, r24
    4c86:	e3 2f       	mov	r30, r19
    4c88:	f0 e0       	ldi	r31, 0x00	; 0
    4c8a:	ee 0f       	add	r30, r30
    4c8c:	ff 1f       	adc	r31, r31
    4c8e:	e2 50       	subi	r30, 0x02	; 2
    4c90:	ff 4f       	sbci	r31, 0xFF	; 255
    4c92:	a5 91       	lpm	r26, Z+
    4c94:	b4 91       	lpm	r27, Z+
    4c96:	66 23       	and	r22, r22
    4c98:	29 f4       	brne	.+10     	; 0x4ca4 <digitalWrite+0xca>
    4c9a:	8c 91       	ld	r24, X
    4c9c:	90 95       	com	r25
    4c9e:	89 23       	and	r24, r25
    4ca0:	8c 93       	st	X, r24
    4ca2:	08 95       	ret
    4ca4:	8c 91       	ld	r24, X
    4ca6:	89 2b       	or	r24, r25
    4ca8:	8c 93       	st	X, r24
    4caa:	08 95       	ret

00004cac <digitalRead>:
    4cac:	68 2f       	mov	r22, r24
    4cae:	70 e0       	ldi	r23, 0x00	; 0
    4cb0:	cb 01       	movw	r24, r22
    4cb2:	82 54       	subi	r24, 0x42	; 66
    4cb4:	9e 4f       	sbci	r25, 0xFE	; 254
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	24 91       	lpm	r18, Z+
    4cba:	cb 01       	movw	r24, r22
    4cbc:	88 58       	subi	r24, 0x88	; 136
    4cbe:	9e 4f       	sbci	r25, 0xFE	; 254
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	44 91       	lpm	r20, Z+
    4cc4:	6e 5c       	subi	r22, 0xCE	; 206
    4cc6:	7e 4f       	sbci	r23, 0xFE	; 254
    4cc8:	fb 01       	movw	r30, r22
    4cca:	94 91       	lpm	r25, Z+
    4ccc:	99 23       	and	r25, r25
    4cce:	19 f4       	brne	.+6      	; 0x4cd6 <digitalRead+0x2a>
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	53 c0       	rjmp	.+166    	; 0x4d7c <digitalRead+0xd0>
    4cd6:	22 23       	and	r18, r18
    4cd8:	09 f4       	brne	.+2      	; 0x4cdc <digitalRead+0x30>
    4cda:	40 c0       	rjmp	.+128    	; 0x4d5c <digitalRead+0xb0>
    4cdc:	21 30       	cpi	r18, 0x01	; 1
    4cde:	19 f4       	brne	.+6      	; 0x4ce6 <digitalRead+0x3a>
    4ce0:	84 b5       	in	r24, 0x24	; 36
    4ce2:	8f 77       	andi	r24, 0x7F	; 127
    4ce4:	04 c0       	rjmp	.+8      	; 0x4cee <digitalRead+0x42>
    4ce6:	22 30       	cpi	r18, 0x02	; 2
    4ce8:	21 f4       	brne	.+8      	; 0x4cf2 <digitalRead+0x46>
    4cea:	84 b5       	in	r24, 0x24	; 36
    4cec:	8f 7d       	andi	r24, 0xDF	; 223
    4cee:	84 bd       	out	0x24, r24	; 36
    4cf0:	35 c0       	rjmp	.+106    	; 0x4d5c <digitalRead+0xb0>
    4cf2:	26 30       	cpi	r18, 0x06	; 6
    4cf4:	21 f4       	brne	.+8      	; 0x4cfe <digitalRead+0x52>
    4cf6:	80 91 b0 00 	lds	r24, 0x00B0
    4cfa:	8f 77       	andi	r24, 0x7F	; 127
    4cfc:	05 c0       	rjmp	.+10     	; 0x4d08 <digitalRead+0x5c>
    4cfe:	27 30       	cpi	r18, 0x07	; 7
    4d00:	31 f4       	brne	.+12     	; 0x4d0e <digitalRead+0x62>
    4d02:	80 91 b0 00 	lds	r24, 0x00B0
    4d06:	8f 7d       	andi	r24, 0xDF	; 223
    4d08:	80 93 b0 00 	sts	0x00B0, r24
    4d0c:	27 c0       	rjmp	.+78     	; 0x4d5c <digitalRead+0xb0>
    4d0e:	28 30       	cpi	r18, 0x08	; 8
    4d10:	21 f4       	brne	.+8      	; 0x4d1a <digitalRead+0x6e>
    4d12:	80 91 90 00 	lds	r24, 0x0090
    4d16:	8f 77       	andi	r24, 0x7F	; 127
    4d18:	0b c0       	rjmp	.+22     	; 0x4d30 <digitalRead+0x84>
    4d1a:	29 30       	cpi	r18, 0x09	; 9
    4d1c:	21 f4       	brne	.+8      	; 0x4d26 <digitalRead+0x7a>
    4d1e:	80 91 90 00 	lds	r24, 0x0090
    4d22:	8f 7d       	andi	r24, 0xDF	; 223
    4d24:	05 c0       	rjmp	.+10     	; 0x4d30 <digitalRead+0x84>
    4d26:	2a 30       	cpi	r18, 0x0A	; 10
    4d28:	31 f4       	brne	.+12     	; 0x4d36 <digitalRead+0x8a>
    4d2a:	80 91 90 00 	lds	r24, 0x0090
    4d2e:	87 7f       	andi	r24, 0xF7	; 247
    4d30:	80 93 90 00 	sts	0x0090, r24
    4d34:	13 c0       	rjmp	.+38     	; 0x4d5c <digitalRead+0xb0>
    4d36:	2b 30       	cpi	r18, 0x0B	; 11
    4d38:	21 f4       	brne	.+8      	; 0x4d42 <digitalRead+0x96>
    4d3a:	80 91 a0 00 	lds	r24, 0x00A0
    4d3e:	8f 77       	andi	r24, 0x7F	; 127
    4d40:	0b c0       	rjmp	.+22     	; 0x4d58 <digitalRead+0xac>
    4d42:	2c 30       	cpi	r18, 0x0C	; 12
    4d44:	21 f4       	brne	.+8      	; 0x4d4e <digitalRead+0xa2>
    4d46:	80 91 a0 00 	lds	r24, 0x00A0
    4d4a:	8f 7d       	andi	r24, 0xDF	; 223
    4d4c:	05 c0       	rjmp	.+10     	; 0x4d58 <digitalRead+0xac>
    4d4e:	2d 30       	cpi	r18, 0x0D	; 13
    4d50:	29 f4       	brne	.+10     	; 0x4d5c <digitalRead+0xb0>
    4d52:	80 91 a0 00 	lds	r24, 0x00A0
    4d56:	87 7f       	andi	r24, 0xF7	; 247
    4d58:	80 93 a0 00 	sts	0x00A0, r24
    4d5c:	89 2f       	mov	r24, r25
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	88 0f       	add	r24, r24
    4d62:	99 1f       	adc	r25, r25
    4d64:	88 5e       	subi	r24, 0xE8	; 232
    4d66:	9e 4f       	sbci	r25, 0xFE	; 254
    4d68:	fc 01       	movw	r30, r24
    4d6a:	a5 91       	lpm	r26, Z+
    4d6c:	b4 91       	lpm	r27, Z+
    4d6e:	8c 91       	ld	r24, X
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	84 23       	and	r24, r20
    4d76:	11 f0       	breq	.+4      	; 0x4d7c <digitalRead+0xd0>
    4d78:	21 e0       	ldi	r18, 0x01	; 1
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	c9 01       	movw	r24, r18
    4d7e:	08 95       	ret

00004d80 <__fixunssfsi>:
    4d80:	ef 92       	push	r14
    4d82:	ff 92       	push	r15
    4d84:	0f 93       	push	r16
    4d86:	1f 93       	push	r17
    4d88:	7b 01       	movw	r14, r22
    4d8a:	8c 01       	movw	r16, r24
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	40 e0       	ldi	r20, 0x00	; 0
    4d92:	5f e4       	ldi	r21, 0x4F	; 79
    4d94:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <__gesf2>
    4d98:	88 23       	and	r24, r24
    4d9a:	8c f0       	brlt	.+34     	; 0x4dbe <__fixunssfsi+0x3e>
    4d9c:	c8 01       	movw	r24, r16
    4d9e:	b7 01       	movw	r22, r14
    4da0:	20 e0       	ldi	r18, 0x00	; 0
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	40 e0       	ldi	r20, 0x00	; 0
    4da6:	5f e4       	ldi	r21, 0x4F	; 79
    4da8:	0e 94 38 28 	call	0x5070	; 0x5070 <__subsf3>
    4dac:	0e 94 2a 2b 	call	0x5654	; 0x5654 <__fixsfsi>
    4db0:	9b 01       	movw	r18, r22
    4db2:	ac 01       	movw	r20, r24
    4db4:	20 50       	subi	r18, 0x00	; 0
    4db6:	30 40       	sbci	r19, 0x00	; 0
    4db8:	40 40       	sbci	r20, 0x00	; 0
    4dba:	50 48       	sbci	r21, 0x80	; 128
    4dbc:	06 c0       	rjmp	.+12     	; 0x4dca <__fixunssfsi+0x4a>
    4dbe:	c8 01       	movw	r24, r16
    4dc0:	b7 01       	movw	r22, r14
    4dc2:	0e 94 2a 2b 	call	0x5654	; 0x5654 <__fixsfsi>
    4dc6:	9b 01       	movw	r18, r22
    4dc8:	ac 01       	movw	r20, r24
    4dca:	b9 01       	movw	r22, r18
    4dcc:	ca 01       	movw	r24, r20
    4dce:	1f 91       	pop	r17
    4dd0:	0f 91       	pop	r16
    4dd2:	ff 90       	pop	r15
    4dd4:	ef 90       	pop	r14
    4dd6:	08 95       	ret

00004dd8 <_fpadd_parts>:
    4dd8:	a0 e0       	ldi	r26, 0x00	; 0
    4dda:	b0 e0       	ldi	r27, 0x00	; 0
    4ddc:	e2 ef       	ldi	r30, 0xF2	; 242
    4dde:	f6 e2       	ldi	r31, 0x26	; 38
    4de0:	0c 94 54 2e 	jmp	0x5ca8	; 0x5ca8 <__prologue_saves__>
    4de4:	dc 01       	movw	r26, r24
    4de6:	2b 01       	movw	r4, r22
    4de8:	fa 01       	movw	r30, r20
    4dea:	9c 91       	ld	r25, X
    4dec:	92 30       	cpi	r25, 0x02	; 2
    4dee:	08 f4       	brcc	.+2      	; 0x4df2 <_fpadd_parts+0x1a>
    4df0:	39 c1       	rjmp	.+626    	; 0x5064 <_fpadd_parts+0x28c>
    4df2:	eb 01       	movw	r28, r22
    4df4:	88 81       	ld	r24, Y
    4df6:	82 30       	cpi	r24, 0x02	; 2
    4df8:	08 f4       	brcc	.+2      	; 0x4dfc <_fpadd_parts+0x24>
    4dfa:	33 c1       	rjmp	.+614    	; 0x5062 <_fpadd_parts+0x28a>
    4dfc:	94 30       	cpi	r25, 0x04	; 4
    4dfe:	69 f4       	brne	.+26     	; 0x4e1a <_fpadd_parts+0x42>
    4e00:	84 30       	cpi	r24, 0x04	; 4
    4e02:	09 f0       	breq	.+2      	; 0x4e06 <_fpadd_parts+0x2e>
    4e04:	2f c1       	rjmp	.+606    	; 0x5064 <_fpadd_parts+0x28c>
    4e06:	11 96       	adiw	r26, 0x01	; 1
    4e08:	9c 91       	ld	r25, X
    4e0a:	11 97       	sbiw	r26, 0x01	; 1
    4e0c:	89 81       	ldd	r24, Y+1	; 0x01
    4e0e:	98 17       	cp	r25, r24
    4e10:	09 f4       	brne	.+2      	; 0x4e14 <_fpadd_parts+0x3c>
    4e12:	28 c1       	rjmp	.+592    	; 0x5064 <_fpadd_parts+0x28c>
    4e14:	ae e8       	ldi	r26, 0x8E	; 142
    4e16:	b3 e0       	ldi	r27, 0x03	; 3
    4e18:	25 c1       	rjmp	.+586    	; 0x5064 <_fpadd_parts+0x28c>
    4e1a:	84 30       	cpi	r24, 0x04	; 4
    4e1c:	09 f4       	brne	.+2      	; 0x4e20 <_fpadd_parts+0x48>
    4e1e:	21 c1       	rjmp	.+578    	; 0x5062 <_fpadd_parts+0x28a>
    4e20:	82 30       	cpi	r24, 0x02	; 2
    4e22:	a9 f4       	brne	.+42     	; 0x4e4e <_fpadd_parts+0x76>
    4e24:	92 30       	cpi	r25, 0x02	; 2
    4e26:	09 f0       	breq	.+2      	; 0x4e2a <_fpadd_parts+0x52>
    4e28:	1d c1       	rjmp	.+570    	; 0x5064 <_fpadd_parts+0x28c>
    4e2a:	9a 01       	movw	r18, r20
    4e2c:	ad 01       	movw	r20, r26
    4e2e:	88 e0       	ldi	r24, 0x08	; 8
    4e30:	ea 01       	movw	r28, r20
    4e32:	09 90       	ld	r0, Y+
    4e34:	ae 01       	movw	r20, r28
    4e36:	e9 01       	movw	r28, r18
    4e38:	09 92       	st	Y+, r0
    4e3a:	9e 01       	movw	r18, r28
    4e3c:	81 50       	subi	r24, 0x01	; 1
    4e3e:	c1 f7       	brne	.-16     	; 0x4e30 <_fpadd_parts+0x58>
    4e40:	e2 01       	movw	r28, r4
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
    4e44:	11 96       	adiw	r26, 0x01	; 1
    4e46:	9c 91       	ld	r25, X
    4e48:	89 23       	and	r24, r25
    4e4a:	81 83       	std	Z+1, r24	; 0x01
    4e4c:	08 c1       	rjmp	.+528    	; 0x505e <_fpadd_parts+0x286>
    4e4e:	92 30       	cpi	r25, 0x02	; 2
    4e50:	09 f4       	brne	.+2      	; 0x4e54 <_fpadd_parts+0x7c>
    4e52:	07 c1       	rjmp	.+526    	; 0x5062 <_fpadd_parts+0x28a>
    4e54:	12 96       	adiw	r26, 0x02	; 2
    4e56:	2d 90       	ld	r2, X+
    4e58:	3c 90       	ld	r3, X
    4e5a:	13 97       	sbiw	r26, 0x03	; 3
    4e5c:	eb 01       	movw	r28, r22
    4e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e60:	9b 81       	ldd	r25, Y+3	; 0x03
    4e62:	14 96       	adiw	r26, 0x04	; 4
    4e64:	ad 90       	ld	r10, X+
    4e66:	bd 90       	ld	r11, X+
    4e68:	cd 90       	ld	r12, X+
    4e6a:	dc 90       	ld	r13, X
    4e6c:	17 97       	sbiw	r26, 0x07	; 7
    4e6e:	ec 80       	ldd	r14, Y+4	; 0x04
    4e70:	fd 80       	ldd	r15, Y+5	; 0x05
    4e72:	0e 81       	ldd	r16, Y+6	; 0x06
    4e74:	1f 81       	ldd	r17, Y+7	; 0x07
    4e76:	91 01       	movw	r18, r2
    4e78:	28 1b       	sub	r18, r24
    4e7a:	39 0b       	sbc	r19, r25
    4e7c:	b9 01       	movw	r22, r18
    4e7e:	37 ff       	sbrs	r19, 7
    4e80:	04 c0       	rjmp	.+8      	; 0x4e8a <_fpadd_parts+0xb2>
    4e82:	66 27       	eor	r22, r22
    4e84:	77 27       	eor	r23, r23
    4e86:	62 1b       	sub	r22, r18
    4e88:	73 0b       	sbc	r23, r19
    4e8a:	60 32       	cpi	r22, 0x20	; 32
    4e8c:	71 05       	cpc	r23, r1
    4e8e:	0c f0       	brlt	.+2      	; 0x4e92 <_fpadd_parts+0xba>
    4e90:	61 c0       	rjmp	.+194    	; 0x4f54 <_fpadd_parts+0x17c>
    4e92:	12 16       	cp	r1, r18
    4e94:	13 06       	cpc	r1, r19
    4e96:	6c f5       	brge	.+90     	; 0x4ef2 <_fpadd_parts+0x11a>
    4e98:	37 01       	movw	r6, r14
    4e9a:	48 01       	movw	r8, r16
    4e9c:	06 2e       	mov	r0, r22
    4e9e:	04 c0       	rjmp	.+8      	; 0x4ea8 <_fpadd_parts+0xd0>
    4ea0:	96 94       	lsr	r9
    4ea2:	87 94       	ror	r8
    4ea4:	77 94       	ror	r7
    4ea6:	67 94       	ror	r6
    4ea8:	0a 94       	dec	r0
    4eaa:	d2 f7       	brpl	.-12     	; 0x4ea0 <_fpadd_parts+0xc8>
    4eac:	21 e0       	ldi	r18, 0x01	; 1
    4eae:	30 e0       	ldi	r19, 0x00	; 0
    4eb0:	40 e0       	ldi	r20, 0x00	; 0
    4eb2:	50 e0       	ldi	r21, 0x00	; 0
    4eb4:	04 c0       	rjmp	.+8      	; 0x4ebe <_fpadd_parts+0xe6>
    4eb6:	22 0f       	add	r18, r18
    4eb8:	33 1f       	adc	r19, r19
    4eba:	44 1f       	adc	r20, r20
    4ebc:	55 1f       	adc	r21, r21
    4ebe:	6a 95       	dec	r22
    4ec0:	d2 f7       	brpl	.-12     	; 0x4eb6 <_fpadd_parts+0xde>
    4ec2:	21 50       	subi	r18, 0x01	; 1
    4ec4:	30 40       	sbci	r19, 0x00	; 0
    4ec6:	40 40       	sbci	r20, 0x00	; 0
    4ec8:	50 40       	sbci	r21, 0x00	; 0
    4eca:	2e 21       	and	r18, r14
    4ecc:	3f 21       	and	r19, r15
    4ece:	40 23       	and	r20, r16
    4ed0:	51 23       	and	r21, r17
    4ed2:	21 15       	cp	r18, r1
    4ed4:	31 05       	cpc	r19, r1
    4ed6:	41 05       	cpc	r20, r1
    4ed8:	51 05       	cpc	r21, r1
    4eda:	21 f0       	breq	.+8      	; 0x4ee4 <_fpadd_parts+0x10c>
    4edc:	21 e0       	ldi	r18, 0x01	; 1
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	40 e0       	ldi	r20, 0x00	; 0
    4ee2:	50 e0       	ldi	r21, 0x00	; 0
    4ee4:	79 01       	movw	r14, r18
    4ee6:	8a 01       	movw	r16, r20
    4ee8:	e6 28       	or	r14, r6
    4eea:	f7 28       	or	r15, r7
    4eec:	08 29       	or	r16, r8
    4eee:	19 29       	or	r17, r9
    4ef0:	3c c0       	rjmp	.+120    	; 0x4f6a <_fpadd_parts+0x192>
    4ef2:	23 2b       	or	r18, r19
    4ef4:	d1 f1       	breq	.+116    	; 0x4f6a <_fpadd_parts+0x192>
    4ef6:	26 0e       	add	r2, r22
    4ef8:	37 1e       	adc	r3, r23
    4efa:	35 01       	movw	r6, r10
    4efc:	46 01       	movw	r8, r12
    4efe:	06 2e       	mov	r0, r22
    4f00:	04 c0       	rjmp	.+8      	; 0x4f0a <_fpadd_parts+0x132>
    4f02:	96 94       	lsr	r9
    4f04:	87 94       	ror	r8
    4f06:	77 94       	ror	r7
    4f08:	67 94       	ror	r6
    4f0a:	0a 94       	dec	r0
    4f0c:	d2 f7       	brpl	.-12     	; 0x4f02 <_fpadd_parts+0x12a>
    4f0e:	21 e0       	ldi	r18, 0x01	; 1
    4f10:	30 e0       	ldi	r19, 0x00	; 0
    4f12:	40 e0       	ldi	r20, 0x00	; 0
    4f14:	50 e0       	ldi	r21, 0x00	; 0
    4f16:	04 c0       	rjmp	.+8      	; 0x4f20 <_fpadd_parts+0x148>
    4f18:	22 0f       	add	r18, r18
    4f1a:	33 1f       	adc	r19, r19
    4f1c:	44 1f       	adc	r20, r20
    4f1e:	55 1f       	adc	r21, r21
    4f20:	6a 95       	dec	r22
    4f22:	d2 f7       	brpl	.-12     	; 0x4f18 <_fpadd_parts+0x140>
    4f24:	21 50       	subi	r18, 0x01	; 1
    4f26:	30 40       	sbci	r19, 0x00	; 0
    4f28:	40 40       	sbci	r20, 0x00	; 0
    4f2a:	50 40       	sbci	r21, 0x00	; 0
    4f2c:	2a 21       	and	r18, r10
    4f2e:	3b 21       	and	r19, r11
    4f30:	4c 21       	and	r20, r12
    4f32:	5d 21       	and	r21, r13
    4f34:	21 15       	cp	r18, r1
    4f36:	31 05       	cpc	r19, r1
    4f38:	41 05       	cpc	r20, r1
    4f3a:	51 05       	cpc	r21, r1
    4f3c:	21 f0       	breq	.+8      	; 0x4f46 <_fpadd_parts+0x16e>
    4f3e:	21 e0       	ldi	r18, 0x01	; 1
    4f40:	30 e0       	ldi	r19, 0x00	; 0
    4f42:	40 e0       	ldi	r20, 0x00	; 0
    4f44:	50 e0       	ldi	r21, 0x00	; 0
    4f46:	59 01       	movw	r10, r18
    4f48:	6a 01       	movw	r12, r20
    4f4a:	a6 28       	or	r10, r6
    4f4c:	b7 28       	or	r11, r7
    4f4e:	c8 28       	or	r12, r8
    4f50:	d9 28       	or	r13, r9
    4f52:	0b c0       	rjmp	.+22     	; 0x4f6a <_fpadd_parts+0x192>
    4f54:	82 15       	cp	r24, r2
    4f56:	93 05       	cpc	r25, r3
    4f58:	2c f0       	brlt	.+10     	; 0x4f64 <_fpadd_parts+0x18c>
    4f5a:	1c 01       	movw	r2, r24
    4f5c:	aa 24       	eor	r10, r10
    4f5e:	bb 24       	eor	r11, r11
    4f60:	65 01       	movw	r12, r10
    4f62:	03 c0       	rjmp	.+6      	; 0x4f6a <_fpadd_parts+0x192>
    4f64:	ee 24       	eor	r14, r14
    4f66:	ff 24       	eor	r15, r15
    4f68:	87 01       	movw	r16, r14
    4f6a:	11 96       	adiw	r26, 0x01	; 1
    4f6c:	9c 91       	ld	r25, X
    4f6e:	d2 01       	movw	r26, r4
    4f70:	11 96       	adiw	r26, 0x01	; 1
    4f72:	8c 91       	ld	r24, X
    4f74:	98 17       	cp	r25, r24
    4f76:	09 f4       	brne	.+2      	; 0x4f7a <_fpadd_parts+0x1a2>
    4f78:	45 c0       	rjmp	.+138    	; 0x5004 <_fpadd_parts+0x22c>
    4f7a:	99 23       	and	r25, r25
    4f7c:	39 f0       	breq	.+14     	; 0x4f8c <_fpadd_parts+0x1b4>
    4f7e:	a8 01       	movw	r20, r16
    4f80:	97 01       	movw	r18, r14
    4f82:	2a 19       	sub	r18, r10
    4f84:	3b 09       	sbc	r19, r11
    4f86:	4c 09       	sbc	r20, r12
    4f88:	5d 09       	sbc	r21, r13
    4f8a:	06 c0       	rjmp	.+12     	; 0x4f98 <_fpadd_parts+0x1c0>
    4f8c:	a6 01       	movw	r20, r12
    4f8e:	95 01       	movw	r18, r10
    4f90:	2e 19       	sub	r18, r14
    4f92:	3f 09       	sbc	r19, r15
    4f94:	40 0b       	sbc	r20, r16
    4f96:	51 0b       	sbc	r21, r17
    4f98:	57 fd       	sbrc	r21, 7
    4f9a:	08 c0       	rjmp	.+16     	; 0x4fac <_fpadd_parts+0x1d4>
    4f9c:	11 82       	std	Z+1, r1	; 0x01
    4f9e:	33 82       	std	Z+3, r3	; 0x03
    4fa0:	22 82       	std	Z+2, r2	; 0x02
    4fa2:	24 83       	std	Z+4, r18	; 0x04
    4fa4:	35 83       	std	Z+5, r19	; 0x05
    4fa6:	46 83       	std	Z+6, r20	; 0x06
    4fa8:	57 83       	std	Z+7, r21	; 0x07
    4faa:	1d c0       	rjmp	.+58     	; 0x4fe6 <_fpadd_parts+0x20e>
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	81 83       	std	Z+1, r24	; 0x01
    4fb0:	33 82       	std	Z+3, r3	; 0x03
    4fb2:	22 82       	std	Z+2, r2	; 0x02
    4fb4:	88 27       	eor	r24, r24
    4fb6:	99 27       	eor	r25, r25
    4fb8:	dc 01       	movw	r26, r24
    4fba:	82 1b       	sub	r24, r18
    4fbc:	93 0b       	sbc	r25, r19
    4fbe:	a4 0b       	sbc	r26, r20
    4fc0:	b5 0b       	sbc	r27, r21
    4fc2:	84 83       	std	Z+4, r24	; 0x04
    4fc4:	95 83       	std	Z+5, r25	; 0x05
    4fc6:	a6 83       	std	Z+6, r26	; 0x06
    4fc8:	b7 83       	std	Z+7, r27	; 0x07
    4fca:	0d c0       	rjmp	.+26     	; 0x4fe6 <_fpadd_parts+0x20e>
    4fcc:	22 0f       	add	r18, r18
    4fce:	33 1f       	adc	r19, r19
    4fd0:	44 1f       	adc	r20, r20
    4fd2:	55 1f       	adc	r21, r21
    4fd4:	24 83       	std	Z+4, r18	; 0x04
    4fd6:	35 83       	std	Z+5, r19	; 0x05
    4fd8:	46 83       	std	Z+6, r20	; 0x06
    4fda:	57 83       	std	Z+7, r21	; 0x07
    4fdc:	82 81       	ldd	r24, Z+2	; 0x02
    4fde:	93 81       	ldd	r25, Z+3	; 0x03
    4fe0:	01 97       	sbiw	r24, 0x01	; 1
    4fe2:	93 83       	std	Z+3, r25	; 0x03
    4fe4:	82 83       	std	Z+2, r24	; 0x02
    4fe6:	24 81       	ldd	r18, Z+4	; 0x04
    4fe8:	35 81       	ldd	r19, Z+5	; 0x05
    4fea:	46 81       	ldd	r20, Z+6	; 0x06
    4fec:	57 81       	ldd	r21, Z+7	; 0x07
    4fee:	da 01       	movw	r26, r20
    4ff0:	c9 01       	movw	r24, r18
    4ff2:	01 97       	sbiw	r24, 0x01	; 1
    4ff4:	a1 09       	sbc	r26, r1
    4ff6:	b1 09       	sbc	r27, r1
    4ff8:	8f 5f       	subi	r24, 0xFF	; 255
    4ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    4ffc:	af 4f       	sbci	r26, 0xFF	; 255
    4ffe:	bf 43       	sbci	r27, 0x3F	; 63
    5000:	28 f3       	brcs	.-54     	; 0x4fcc <_fpadd_parts+0x1f4>
    5002:	0b c0       	rjmp	.+22     	; 0x501a <_fpadd_parts+0x242>
    5004:	91 83       	std	Z+1, r25	; 0x01
    5006:	33 82       	std	Z+3, r3	; 0x03
    5008:	22 82       	std	Z+2, r2	; 0x02
    500a:	ea 0c       	add	r14, r10
    500c:	fb 1c       	adc	r15, r11
    500e:	0c 1d       	adc	r16, r12
    5010:	1d 1d       	adc	r17, r13
    5012:	e4 82       	std	Z+4, r14	; 0x04
    5014:	f5 82       	std	Z+5, r15	; 0x05
    5016:	06 83       	std	Z+6, r16	; 0x06
    5018:	17 83       	std	Z+7, r17	; 0x07
    501a:	83 e0       	ldi	r24, 0x03	; 3
    501c:	80 83       	st	Z, r24
    501e:	24 81       	ldd	r18, Z+4	; 0x04
    5020:	35 81       	ldd	r19, Z+5	; 0x05
    5022:	46 81       	ldd	r20, Z+6	; 0x06
    5024:	57 81       	ldd	r21, Z+7	; 0x07
    5026:	57 ff       	sbrs	r21, 7
    5028:	1a c0       	rjmp	.+52     	; 0x505e <_fpadd_parts+0x286>
    502a:	c9 01       	movw	r24, r18
    502c:	aa 27       	eor	r26, r26
    502e:	97 fd       	sbrc	r25, 7
    5030:	a0 95       	com	r26
    5032:	ba 2f       	mov	r27, r26
    5034:	81 70       	andi	r24, 0x01	; 1
    5036:	90 70       	andi	r25, 0x00	; 0
    5038:	a0 70       	andi	r26, 0x00	; 0
    503a:	b0 70       	andi	r27, 0x00	; 0
    503c:	56 95       	lsr	r21
    503e:	47 95       	ror	r20
    5040:	37 95       	ror	r19
    5042:	27 95       	ror	r18
    5044:	82 2b       	or	r24, r18
    5046:	93 2b       	or	r25, r19
    5048:	a4 2b       	or	r26, r20
    504a:	b5 2b       	or	r27, r21
    504c:	84 83       	std	Z+4, r24	; 0x04
    504e:	95 83       	std	Z+5, r25	; 0x05
    5050:	a6 83       	std	Z+6, r26	; 0x06
    5052:	b7 83       	std	Z+7, r27	; 0x07
    5054:	82 81       	ldd	r24, Z+2	; 0x02
    5056:	93 81       	ldd	r25, Z+3	; 0x03
    5058:	01 96       	adiw	r24, 0x01	; 1
    505a:	93 83       	std	Z+3, r25	; 0x03
    505c:	82 83       	std	Z+2, r24	; 0x02
    505e:	df 01       	movw	r26, r30
    5060:	01 c0       	rjmp	.+2      	; 0x5064 <_fpadd_parts+0x28c>
    5062:	d2 01       	movw	r26, r4
    5064:	cd 01       	movw	r24, r26
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
    506a:	e2 e1       	ldi	r30, 0x12	; 18
    506c:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__epilogue_restores__>

00005070 <__subsf3>:
    5070:	a0 e2       	ldi	r26, 0x20	; 32
    5072:	b0 e0       	ldi	r27, 0x00	; 0
    5074:	ee e3       	ldi	r30, 0x3E	; 62
    5076:	f8 e2       	ldi	r31, 0x28	; 40
    5078:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <__prologue_saves__+0x18>
    507c:	69 83       	std	Y+1, r22	; 0x01
    507e:	7a 83       	std	Y+2, r23	; 0x02
    5080:	8b 83       	std	Y+3, r24	; 0x03
    5082:	9c 83       	std	Y+4, r25	; 0x04
    5084:	2d 83       	std	Y+5, r18	; 0x05
    5086:	3e 83       	std	Y+6, r19	; 0x06
    5088:	4f 83       	std	Y+7, r20	; 0x07
    508a:	58 87       	std	Y+8, r21	; 0x08
    508c:	e9 e0       	ldi	r30, 0x09	; 9
    508e:	ee 2e       	mov	r14, r30
    5090:	f1 2c       	mov	r15, r1
    5092:	ec 0e       	add	r14, r28
    5094:	fd 1e       	adc	r15, r29
    5096:	ce 01       	movw	r24, r28
    5098:	01 96       	adiw	r24, 0x01	; 1
    509a:	b7 01       	movw	r22, r14
    509c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    50a0:	8e 01       	movw	r16, r28
    50a2:	0f 5e       	subi	r16, 0xEF	; 239
    50a4:	1f 4f       	sbci	r17, 0xFF	; 255
    50a6:	ce 01       	movw	r24, r28
    50a8:	05 96       	adiw	r24, 0x05	; 5
    50aa:	b8 01       	movw	r22, r16
    50ac:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    50b0:	8a 89       	ldd	r24, Y+18	; 0x12
    50b2:	91 e0       	ldi	r25, 0x01	; 1
    50b4:	89 27       	eor	r24, r25
    50b6:	8a 8b       	std	Y+18, r24	; 0x12
    50b8:	c7 01       	movw	r24, r14
    50ba:	b8 01       	movw	r22, r16
    50bc:	ae 01       	movw	r20, r28
    50be:	47 5e       	subi	r20, 0xE7	; 231
    50c0:	5f 4f       	sbci	r21, 0xFF	; 255
    50c2:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <_fpadd_parts>
    50c6:	0e 94 46 2c 	call	0x588c	; 0x588c <__pack_f>
    50ca:	a0 96       	adiw	r28, 0x20	; 32
    50cc:	e6 e0       	ldi	r30, 0x06	; 6
    50ce:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__epilogue_restores__+0x18>

000050d2 <__addsf3>:
    50d2:	a0 e2       	ldi	r26, 0x20	; 32
    50d4:	b0 e0       	ldi	r27, 0x00	; 0
    50d6:	ef e6       	ldi	r30, 0x6F	; 111
    50d8:	f8 e2       	ldi	r31, 0x28	; 40
    50da:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <__prologue_saves__+0x18>
    50de:	69 83       	std	Y+1, r22	; 0x01
    50e0:	7a 83       	std	Y+2, r23	; 0x02
    50e2:	8b 83       	std	Y+3, r24	; 0x03
    50e4:	9c 83       	std	Y+4, r25	; 0x04
    50e6:	2d 83       	std	Y+5, r18	; 0x05
    50e8:	3e 83       	std	Y+6, r19	; 0x06
    50ea:	4f 83       	std	Y+7, r20	; 0x07
    50ec:	58 87       	std	Y+8, r21	; 0x08
    50ee:	f9 e0       	ldi	r31, 0x09	; 9
    50f0:	ef 2e       	mov	r14, r31
    50f2:	f1 2c       	mov	r15, r1
    50f4:	ec 0e       	add	r14, r28
    50f6:	fd 1e       	adc	r15, r29
    50f8:	ce 01       	movw	r24, r28
    50fa:	01 96       	adiw	r24, 0x01	; 1
    50fc:	b7 01       	movw	r22, r14
    50fe:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5102:	8e 01       	movw	r16, r28
    5104:	0f 5e       	subi	r16, 0xEF	; 239
    5106:	1f 4f       	sbci	r17, 0xFF	; 255
    5108:	ce 01       	movw	r24, r28
    510a:	05 96       	adiw	r24, 0x05	; 5
    510c:	b8 01       	movw	r22, r16
    510e:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5112:	c7 01       	movw	r24, r14
    5114:	b8 01       	movw	r22, r16
    5116:	ae 01       	movw	r20, r28
    5118:	47 5e       	subi	r20, 0xE7	; 231
    511a:	5f 4f       	sbci	r21, 0xFF	; 255
    511c:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <_fpadd_parts>
    5120:	0e 94 46 2c 	call	0x588c	; 0x588c <__pack_f>
    5124:	a0 96       	adiw	r28, 0x20	; 32
    5126:	e6 e0       	ldi	r30, 0x06	; 6
    5128:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__epilogue_restores__+0x18>

0000512c <__mulsf3>:
    512c:	a0 e2       	ldi	r26, 0x20	; 32
    512e:	b0 e0       	ldi	r27, 0x00	; 0
    5130:	ec e9       	ldi	r30, 0x9C	; 156
    5132:	f8 e2       	ldi	r31, 0x28	; 40
    5134:	0c 94 54 2e 	jmp	0x5ca8	; 0x5ca8 <__prologue_saves__>
    5138:	69 83       	std	Y+1, r22	; 0x01
    513a:	7a 83       	std	Y+2, r23	; 0x02
    513c:	8b 83       	std	Y+3, r24	; 0x03
    513e:	9c 83       	std	Y+4, r25	; 0x04
    5140:	2d 83       	std	Y+5, r18	; 0x05
    5142:	3e 83       	std	Y+6, r19	; 0x06
    5144:	4f 83       	std	Y+7, r20	; 0x07
    5146:	58 87       	std	Y+8, r21	; 0x08
    5148:	ce 01       	movw	r24, r28
    514a:	01 96       	adiw	r24, 0x01	; 1
    514c:	be 01       	movw	r22, r28
    514e:	67 5f       	subi	r22, 0xF7	; 247
    5150:	7f 4f       	sbci	r23, 0xFF	; 255
    5152:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5156:	ce 01       	movw	r24, r28
    5158:	05 96       	adiw	r24, 0x05	; 5
    515a:	be 01       	movw	r22, r28
    515c:	6f 5e       	subi	r22, 0xEF	; 239
    515e:	7f 4f       	sbci	r23, 0xFF	; 255
    5160:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5164:	99 85       	ldd	r25, Y+9	; 0x09
    5166:	92 30       	cpi	r25, 0x02	; 2
    5168:	88 f0       	brcs	.+34     	; 0x518c <__mulsf3+0x60>
    516a:	89 89       	ldd	r24, Y+17	; 0x11
    516c:	82 30       	cpi	r24, 0x02	; 2
    516e:	c8 f0       	brcs	.+50     	; 0x51a2 <__mulsf3+0x76>
    5170:	94 30       	cpi	r25, 0x04	; 4
    5172:	19 f4       	brne	.+6      	; 0x517a <__mulsf3+0x4e>
    5174:	82 30       	cpi	r24, 0x02	; 2
    5176:	51 f4       	brne	.+20     	; 0x518c <__mulsf3+0x60>
    5178:	04 c0       	rjmp	.+8      	; 0x5182 <__mulsf3+0x56>
    517a:	84 30       	cpi	r24, 0x04	; 4
    517c:	29 f4       	brne	.+10     	; 0x5188 <__mulsf3+0x5c>
    517e:	92 30       	cpi	r25, 0x02	; 2
    5180:	81 f4       	brne	.+32     	; 0x51a2 <__mulsf3+0x76>
    5182:	8e e8       	ldi	r24, 0x8E	; 142
    5184:	93 e0       	ldi	r25, 0x03	; 3
    5186:	c6 c0       	rjmp	.+396    	; 0x5314 <__mulsf3+0x1e8>
    5188:	92 30       	cpi	r25, 0x02	; 2
    518a:	49 f4       	brne	.+18     	; 0x519e <__mulsf3+0x72>
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5190:	8a 89       	ldd	r24, Y+18	; 0x12
    5192:	98 13       	cpse	r25, r24
    5194:	21 e0       	ldi	r18, 0x01	; 1
    5196:	2a 87       	std	Y+10, r18	; 0x0a
    5198:	ce 01       	movw	r24, r28
    519a:	09 96       	adiw	r24, 0x09	; 9
    519c:	bb c0       	rjmp	.+374    	; 0x5314 <__mulsf3+0x1e8>
    519e:	82 30       	cpi	r24, 0x02	; 2
    51a0:	49 f4       	brne	.+18     	; 0x51b4 <__mulsf3+0x88>
    51a2:	20 e0       	ldi	r18, 0x00	; 0
    51a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a6:	8a 89       	ldd	r24, Y+18	; 0x12
    51a8:	98 13       	cpse	r25, r24
    51aa:	21 e0       	ldi	r18, 0x01	; 1
    51ac:	2a 8b       	std	Y+18, r18	; 0x12
    51ae:	ce 01       	movw	r24, r28
    51b0:	41 96       	adiw	r24, 0x11	; 17
    51b2:	b0 c0       	rjmp	.+352    	; 0x5314 <__mulsf3+0x1e8>
    51b4:	2d 84       	ldd	r2, Y+13	; 0x0d
    51b6:	3e 84       	ldd	r3, Y+14	; 0x0e
    51b8:	4f 84       	ldd	r4, Y+15	; 0x0f
    51ba:	58 88       	ldd	r5, Y+16	; 0x10
    51bc:	6d 88       	ldd	r6, Y+21	; 0x15
    51be:	7e 88       	ldd	r7, Y+22	; 0x16
    51c0:	8f 88       	ldd	r8, Y+23	; 0x17
    51c2:	98 8c       	ldd	r9, Y+24	; 0x18
    51c4:	ee 24       	eor	r14, r14
    51c6:	ff 24       	eor	r15, r15
    51c8:	87 01       	movw	r16, r14
    51ca:	aa 24       	eor	r10, r10
    51cc:	bb 24       	eor	r11, r11
    51ce:	65 01       	movw	r12, r10
    51d0:	40 e0       	ldi	r20, 0x00	; 0
    51d2:	50 e0       	ldi	r21, 0x00	; 0
    51d4:	60 e0       	ldi	r22, 0x00	; 0
    51d6:	70 e0       	ldi	r23, 0x00	; 0
    51d8:	e0 e0       	ldi	r30, 0x00	; 0
    51da:	f0 e0       	ldi	r31, 0x00	; 0
    51dc:	c1 01       	movw	r24, r2
    51de:	81 70       	andi	r24, 0x01	; 1
    51e0:	90 70       	andi	r25, 0x00	; 0
    51e2:	89 2b       	or	r24, r25
    51e4:	e9 f0       	breq	.+58     	; 0x5220 <__mulsf3+0xf4>
    51e6:	e6 0c       	add	r14, r6
    51e8:	f7 1c       	adc	r15, r7
    51ea:	08 1d       	adc	r16, r8
    51ec:	19 1d       	adc	r17, r9
    51ee:	9a 01       	movw	r18, r20
    51f0:	ab 01       	movw	r20, r22
    51f2:	2a 0d       	add	r18, r10
    51f4:	3b 1d       	adc	r19, r11
    51f6:	4c 1d       	adc	r20, r12
    51f8:	5d 1d       	adc	r21, r13
    51fa:	80 e0       	ldi	r24, 0x00	; 0
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	a0 e0       	ldi	r26, 0x00	; 0
    5200:	b0 e0       	ldi	r27, 0x00	; 0
    5202:	e6 14       	cp	r14, r6
    5204:	f7 04       	cpc	r15, r7
    5206:	08 05       	cpc	r16, r8
    5208:	19 05       	cpc	r17, r9
    520a:	20 f4       	brcc	.+8      	; 0x5214 <__mulsf3+0xe8>
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	a0 e0       	ldi	r26, 0x00	; 0
    5212:	b0 e0       	ldi	r27, 0x00	; 0
    5214:	ba 01       	movw	r22, r20
    5216:	a9 01       	movw	r20, r18
    5218:	48 0f       	add	r20, r24
    521a:	59 1f       	adc	r21, r25
    521c:	6a 1f       	adc	r22, r26
    521e:	7b 1f       	adc	r23, r27
    5220:	aa 0c       	add	r10, r10
    5222:	bb 1c       	adc	r11, r11
    5224:	cc 1c       	adc	r12, r12
    5226:	dd 1c       	adc	r13, r13
    5228:	97 fe       	sbrs	r9, 7
    522a:	08 c0       	rjmp	.+16     	; 0x523c <__mulsf3+0x110>
    522c:	81 e0       	ldi	r24, 0x01	; 1
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	a0 e0       	ldi	r26, 0x00	; 0
    5232:	b0 e0       	ldi	r27, 0x00	; 0
    5234:	a8 2a       	or	r10, r24
    5236:	b9 2a       	or	r11, r25
    5238:	ca 2a       	or	r12, r26
    523a:	db 2a       	or	r13, r27
    523c:	31 96       	adiw	r30, 0x01	; 1
    523e:	e0 32       	cpi	r30, 0x20	; 32
    5240:	f1 05       	cpc	r31, r1
    5242:	49 f0       	breq	.+18     	; 0x5256 <__mulsf3+0x12a>
    5244:	66 0c       	add	r6, r6
    5246:	77 1c       	adc	r7, r7
    5248:	88 1c       	adc	r8, r8
    524a:	99 1c       	adc	r9, r9
    524c:	56 94       	lsr	r5
    524e:	47 94       	ror	r4
    5250:	37 94       	ror	r3
    5252:	27 94       	ror	r2
    5254:	c3 cf       	rjmp	.-122    	; 0x51dc <__mulsf3+0xb0>
    5256:	fa 85       	ldd	r31, Y+10	; 0x0a
    5258:	ea 89       	ldd	r30, Y+18	; 0x12
    525a:	2b 89       	ldd	r18, Y+19	; 0x13
    525c:	3c 89       	ldd	r19, Y+20	; 0x14
    525e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5260:	9c 85       	ldd	r25, Y+12	; 0x0c
    5262:	28 0f       	add	r18, r24
    5264:	39 1f       	adc	r19, r25
    5266:	2e 5f       	subi	r18, 0xFE	; 254
    5268:	3f 4f       	sbci	r19, 0xFF	; 255
    526a:	17 c0       	rjmp	.+46     	; 0x529a <__mulsf3+0x16e>
    526c:	ca 01       	movw	r24, r20
    526e:	81 70       	andi	r24, 0x01	; 1
    5270:	90 70       	andi	r25, 0x00	; 0
    5272:	89 2b       	or	r24, r25
    5274:	61 f0       	breq	.+24     	; 0x528e <__mulsf3+0x162>
    5276:	16 95       	lsr	r17
    5278:	07 95       	ror	r16
    527a:	f7 94       	ror	r15
    527c:	e7 94       	ror	r14
    527e:	80 e0       	ldi	r24, 0x00	; 0
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	a0 e0       	ldi	r26, 0x00	; 0
    5284:	b0 e8       	ldi	r27, 0x80	; 128
    5286:	e8 2a       	or	r14, r24
    5288:	f9 2a       	or	r15, r25
    528a:	0a 2b       	or	r16, r26
    528c:	1b 2b       	or	r17, r27
    528e:	76 95       	lsr	r23
    5290:	67 95       	ror	r22
    5292:	57 95       	ror	r21
    5294:	47 95       	ror	r20
    5296:	2f 5f       	subi	r18, 0xFF	; 255
    5298:	3f 4f       	sbci	r19, 0xFF	; 255
    529a:	77 fd       	sbrc	r23, 7
    529c:	e7 cf       	rjmp	.-50     	; 0x526c <__mulsf3+0x140>
    529e:	0c c0       	rjmp	.+24     	; 0x52b8 <__mulsf3+0x18c>
    52a0:	44 0f       	add	r20, r20
    52a2:	55 1f       	adc	r21, r21
    52a4:	66 1f       	adc	r22, r22
    52a6:	77 1f       	adc	r23, r23
    52a8:	17 fd       	sbrc	r17, 7
    52aa:	41 60       	ori	r20, 0x01	; 1
    52ac:	ee 0c       	add	r14, r14
    52ae:	ff 1c       	adc	r15, r15
    52b0:	00 1f       	adc	r16, r16
    52b2:	11 1f       	adc	r17, r17
    52b4:	21 50       	subi	r18, 0x01	; 1
    52b6:	30 40       	sbci	r19, 0x00	; 0
    52b8:	40 30       	cpi	r20, 0x00	; 0
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	59 07       	cpc	r21, r25
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	69 07       	cpc	r22, r25
    52c2:	90 e4       	ldi	r25, 0x40	; 64
    52c4:	79 07       	cpc	r23, r25
    52c6:	60 f3       	brcs	.-40     	; 0x52a0 <__mulsf3+0x174>
    52c8:	2b 8f       	std	Y+27, r18	; 0x1b
    52ca:	3c 8f       	std	Y+28, r19	; 0x1c
    52cc:	db 01       	movw	r26, r22
    52ce:	ca 01       	movw	r24, r20
    52d0:	8f 77       	andi	r24, 0x7F	; 127
    52d2:	90 70       	andi	r25, 0x00	; 0
    52d4:	a0 70       	andi	r26, 0x00	; 0
    52d6:	b0 70       	andi	r27, 0x00	; 0
    52d8:	80 34       	cpi	r24, 0x40	; 64
    52da:	91 05       	cpc	r25, r1
    52dc:	a1 05       	cpc	r26, r1
    52de:	b1 05       	cpc	r27, r1
    52e0:	61 f4       	brne	.+24     	; 0x52fa <__mulsf3+0x1ce>
    52e2:	47 fd       	sbrc	r20, 7
    52e4:	0a c0       	rjmp	.+20     	; 0x52fa <__mulsf3+0x1ce>
    52e6:	e1 14       	cp	r14, r1
    52e8:	f1 04       	cpc	r15, r1
    52ea:	01 05       	cpc	r16, r1
    52ec:	11 05       	cpc	r17, r1
    52ee:	29 f0       	breq	.+10     	; 0x52fa <__mulsf3+0x1ce>
    52f0:	40 5c       	subi	r20, 0xC0	; 192
    52f2:	5f 4f       	sbci	r21, 0xFF	; 255
    52f4:	6f 4f       	sbci	r22, 0xFF	; 255
    52f6:	7f 4f       	sbci	r23, 0xFF	; 255
    52f8:	40 78       	andi	r20, 0x80	; 128
    52fa:	1a 8e       	std	Y+26, r1	; 0x1a
    52fc:	fe 17       	cp	r31, r30
    52fe:	11 f0       	breq	.+4      	; 0x5304 <__mulsf3+0x1d8>
    5300:	81 e0       	ldi	r24, 0x01	; 1
    5302:	8a 8f       	std	Y+26, r24	; 0x1a
    5304:	4d 8f       	std	Y+29, r20	; 0x1d
    5306:	5e 8f       	std	Y+30, r21	; 0x1e
    5308:	6f 8f       	std	Y+31, r22	; 0x1f
    530a:	78 a3       	std	Y+32, r23	; 0x20
    530c:	83 e0       	ldi	r24, 0x03	; 3
    530e:	89 8f       	std	Y+25, r24	; 0x19
    5310:	ce 01       	movw	r24, r28
    5312:	49 96       	adiw	r24, 0x19	; 25
    5314:	0e 94 46 2c 	call	0x588c	; 0x588c <__pack_f>
    5318:	a0 96       	adiw	r28, 0x20	; 32
    531a:	e2 e1       	ldi	r30, 0x12	; 18
    531c:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__epilogue_restores__>

00005320 <__divsf3>:
    5320:	a8 e1       	ldi	r26, 0x18	; 24
    5322:	b0 e0       	ldi	r27, 0x00	; 0
    5324:	e6 e9       	ldi	r30, 0x96	; 150
    5326:	f9 e2       	ldi	r31, 0x29	; 41
    5328:	0c 94 5c 2e 	jmp	0x5cb8	; 0x5cb8 <__prologue_saves__+0x10>
    532c:	69 83       	std	Y+1, r22	; 0x01
    532e:	7a 83       	std	Y+2, r23	; 0x02
    5330:	8b 83       	std	Y+3, r24	; 0x03
    5332:	9c 83       	std	Y+4, r25	; 0x04
    5334:	2d 83       	std	Y+5, r18	; 0x05
    5336:	3e 83       	std	Y+6, r19	; 0x06
    5338:	4f 83       	std	Y+7, r20	; 0x07
    533a:	58 87       	std	Y+8, r21	; 0x08
    533c:	b9 e0       	ldi	r27, 0x09	; 9
    533e:	eb 2e       	mov	r14, r27
    5340:	f1 2c       	mov	r15, r1
    5342:	ec 0e       	add	r14, r28
    5344:	fd 1e       	adc	r15, r29
    5346:	ce 01       	movw	r24, r28
    5348:	01 96       	adiw	r24, 0x01	; 1
    534a:	b7 01       	movw	r22, r14
    534c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5350:	8e 01       	movw	r16, r28
    5352:	0f 5e       	subi	r16, 0xEF	; 239
    5354:	1f 4f       	sbci	r17, 0xFF	; 255
    5356:	ce 01       	movw	r24, r28
    5358:	05 96       	adiw	r24, 0x05	; 5
    535a:	b8 01       	movw	r22, r16
    535c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5360:	29 85       	ldd	r18, Y+9	; 0x09
    5362:	22 30       	cpi	r18, 0x02	; 2
    5364:	08 f4       	brcc	.+2      	; 0x5368 <__divsf3+0x48>
    5366:	7e c0       	rjmp	.+252    	; 0x5464 <__divsf3+0x144>
    5368:	39 89       	ldd	r19, Y+17	; 0x11
    536a:	32 30       	cpi	r19, 0x02	; 2
    536c:	10 f4       	brcc	.+4      	; 0x5372 <__divsf3+0x52>
    536e:	b8 01       	movw	r22, r16
    5370:	7c c0       	rjmp	.+248    	; 0x546a <__divsf3+0x14a>
    5372:	8a 85       	ldd	r24, Y+10	; 0x0a
    5374:	9a 89       	ldd	r25, Y+18	; 0x12
    5376:	89 27       	eor	r24, r25
    5378:	8a 87       	std	Y+10, r24	; 0x0a
    537a:	24 30       	cpi	r18, 0x04	; 4
    537c:	11 f0       	breq	.+4      	; 0x5382 <__divsf3+0x62>
    537e:	22 30       	cpi	r18, 0x02	; 2
    5380:	31 f4       	brne	.+12     	; 0x538e <__divsf3+0x6e>
    5382:	23 17       	cp	r18, r19
    5384:	09 f0       	breq	.+2      	; 0x5388 <__divsf3+0x68>
    5386:	6e c0       	rjmp	.+220    	; 0x5464 <__divsf3+0x144>
    5388:	6e e8       	ldi	r22, 0x8E	; 142
    538a:	73 e0       	ldi	r23, 0x03	; 3
    538c:	6e c0       	rjmp	.+220    	; 0x546a <__divsf3+0x14a>
    538e:	34 30       	cpi	r19, 0x04	; 4
    5390:	39 f4       	brne	.+14     	; 0x53a0 <__divsf3+0x80>
    5392:	1d 86       	std	Y+13, r1	; 0x0d
    5394:	1e 86       	std	Y+14, r1	; 0x0e
    5396:	1f 86       	std	Y+15, r1	; 0x0f
    5398:	18 8a       	std	Y+16, r1	; 0x10
    539a:	1c 86       	std	Y+12, r1	; 0x0c
    539c:	1b 86       	std	Y+11, r1	; 0x0b
    539e:	04 c0       	rjmp	.+8      	; 0x53a8 <__divsf3+0x88>
    53a0:	32 30       	cpi	r19, 0x02	; 2
    53a2:	21 f4       	brne	.+8      	; 0x53ac <__divsf3+0x8c>
    53a4:	84 e0       	ldi	r24, 0x04	; 4
    53a6:	89 87       	std	Y+9, r24	; 0x09
    53a8:	b7 01       	movw	r22, r14
    53aa:	5f c0       	rjmp	.+190    	; 0x546a <__divsf3+0x14a>
    53ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    53ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    53b0:	8b 89       	ldd	r24, Y+19	; 0x13
    53b2:	9c 89       	ldd	r25, Y+20	; 0x14
    53b4:	28 1b       	sub	r18, r24
    53b6:	39 0b       	sbc	r19, r25
    53b8:	3c 87       	std	Y+12, r19	; 0x0c
    53ba:	2b 87       	std	Y+11, r18	; 0x0b
    53bc:	ed 84       	ldd	r14, Y+13	; 0x0d
    53be:	fe 84       	ldd	r15, Y+14	; 0x0e
    53c0:	0f 85       	ldd	r16, Y+15	; 0x0f
    53c2:	18 89       	ldd	r17, Y+16	; 0x10
    53c4:	ad 88       	ldd	r10, Y+21	; 0x15
    53c6:	be 88       	ldd	r11, Y+22	; 0x16
    53c8:	cf 88       	ldd	r12, Y+23	; 0x17
    53ca:	d8 8c       	ldd	r13, Y+24	; 0x18
    53cc:	ea 14       	cp	r14, r10
    53ce:	fb 04       	cpc	r15, r11
    53d0:	0c 05       	cpc	r16, r12
    53d2:	1d 05       	cpc	r17, r13
    53d4:	40 f4       	brcc	.+16     	; 0x53e6 <__divsf3+0xc6>
    53d6:	ee 0c       	add	r14, r14
    53d8:	ff 1c       	adc	r15, r15
    53da:	00 1f       	adc	r16, r16
    53dc:	11 1f       	adc	r17, r17
    53de:	21 50       	subi	r18, 0x01	; 1
    53e0:	30 40       	sbci	r19, 0x00	; 0
    53e2:	3c 87       	std	Y+12, r19	; 0x0c
    53e4:	2b 87       	std	Y+11, r18	; 0x0b
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	40 e0       	ldi	r20, 0x00	; 0
    53ec:	50 e0       	ldi	r21, 0x00	; 0
    53ee:	80 e0       	ldi	r24, 0x00	; 0
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	a0 e0       	ldi	r26, 0x00	; 0
    53f4:	b0 e4       	ldi	r27, 0x40	; 64
    53f6:	60 e0       	ldi	r22, 0x00	; 0
    53f8:	70 e0       	ldi	r23, 0x00	; 0
    53fa:	ea 14       	cp	r14, r10
    53fc:	fb 04       	cpc	r15, r11
    53fe:	0c 05       	cpc	r16, r12
    5400:	1d 05       	cpc	r17, r13
    5402:	40 f0       	brcs	.+16     	; 0x5414 <__divsf3+0xf4>
    5404:	28 2b       	or	r18, r24
    5406:	39 2b       	or	r19, r25
    5408:	4a 2b       	or	r20, r26
    540a:	5b 2b       	or	r21, r27
    540c:	ea 18       	sub	r14, r10
    540e:	fb 08       	sbc	r15, r11
    5410:	0c 09       	sbc	r16, r12
    5412:	1d 09       	sbc	r17, r13
    5414:	b6 95       	lsr	r27
    5416:	a7 95       	ror	r26
    5418:	97 95       	ror	r25
    541a:	87 95       	ror	r24
    541c:	ee 0c       	add	r14, r14
    541e:	ff 1c       	adc	r15, r15
    5420:	00 1f       	adc	r16, r16
    5422:	11 1f       	adc	r17, r17
    5424:	6f 5f       	subi	r22, 0xFF	; 255
    5426:	7f 4f       	sbci	r23, 0xFF	; 255
    5428:	6f 31       	cpi	r22, 0x1F	; 31
    542a:	71 05       	cpc	r23, r1
    542c:	31 f7       	brne	.-52     	; 0x53fa <__divsf3+0xda>
    542e:	da 01       	movw	r26, r20
    5430:	c9 01       	movw	r24, r18
    5432:	8f 77       	andi	r24, 0x7F	; 127
    5434:	90 70       	andi	r25, 0x00	; 0
    5436:	a0 70       	andi	r26, 0x00	; 0
    5438:	b0 70       	andi	r27, 0x00	; 0
    543a:	80 34       	cpi	r24, 0x40	; 64
    543c:	91 05       	cpc	r25, r1
    543e:	a1 05       	cpc	r26, r1
    5440:	b1 05       	cpc	r27, r1
    5442:	61 f4       	brne	.+24     	; 0x545c <__divsf3+0x13c>
    5444:	27 fd       	sbrc	r18, 7
    5446:	0a c0       	rjmp	.+20     	; 0x545c <__divsf3+0x13c>
    5448:	e1 14       	cp	r14, r1
    544a:	f1 04       	cpc	r15, r1
    544c:	01 05       	cpc	r16, r1
    544e:	11 05       	cpc	r17, r1
    5450:	29 f0       	breq	.+10     	; 0x545c <__divsf3+0x13c>
    5452:	20 5c       	subi	r18, 0xC0	; 192
    5454:	3f 4f       	sbci	r19, 0xFF	; 255
    5456:	4f 4f       	sbci	r20, 0xFF	; 255
    5458:	5f 4f       	sbci	r21, 0xFF	; 255
    545a:	20 78       	andi	r18, 0x80	; 128
    545c:	2d 87       	std	Y+13, r18	; 0x0d
    545e:	3e 87       	std	Y+14, r19	; 0x0e
    5460:	4f 87       	std	Y+15, r20	; 0x0f
    5462:	58 8b       	std	Y+16, r21	; 0x10
    5464:	be 01       	movw	r22, r28
    5466:	67 5f       	subi	r22, 0xF7	; 247
    5468:	7f 4f       	sbci	r23, 0xFF	; 255
    546a:	cb 01       	movw	r24, r22
    546c:	0e 94 46 2c 	call	0x588c	; 0x588c <__pack_f>
    5470:	68 96       	adiw	r28, 0x18	; 24
    5472:	ea e0       	ldi	r30, 0x0A	; 10
    5474:	0c 94 78 2e 	jmp	0x5cf0	; 0x5cf0 <__epilogue_restores__+0x10>

00005478 <__gtsf2>:
    5478:	a8 e1       	ldi	r26, 0x18	; 24
    547a:	b0 e0       	ldi	r27, 0x00	; 0
    547c:	e2 e4       	ldi	r30, 0x42	; 66
    547e:	fa e2       	ldi	r31, 0x2A	; 42
    5480:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <__prologue_saves__+0x18>
    5484:	69 83       	std	Y+1, r22	; 0x01
    5486:	7a 83       	std	Y+2, r23	; 0x02
    5488:	8b 83       	std	Y+3, r24	; 0x03
    548a:	9c 83       	std	Y+4, r25	; 0x04
    548c:	2d 83       	std	Y+5, r18	; 0x05
    548e:	3e 83       	std	Y+6, r19	; 0x06
    5490:	4f 83       	std	Y+7, r20	; 0x07
    5492:	58 87       	std	Y+8, r21	; 0x08
    5494:	89 e0       	ldi	r24, 0x09	; 9
    5496:	e8 2e       	mov	r14, r24
    5498:	f1 2c       	mov	r15, r1
    549a:	ec 0e       	add	r14, r28
    549c:	fd 1e       	adc	r15, r29
    549e:	ce 01       	movw	r24, r28
    54a0:	01 96       	adiw	r24, 0x01	; 1
    54a2:	b7 01       	movw	r22, r14
    54a4:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    54a8:	8e 01       	movw	r16, r28
    54aa:	0f 5e       	subi	r16, 0xEF	; 239
    54ac:	1f 4f       	sbci	r17, 0xFF	; 255
    54ae:	ce 01       	movw	r24, r28
    54b0:	05 96       	adiw	r24, 0x05	; 5
    54b2:	b8 01       	movw	r22, r16
    54b4:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    54b8:	89 85       	ldd	r24, Y+9	; 0x09
    54ba:	82 30       	cpi	r24, 0x02	; 2
    54bc:	40 f0       	brcs	.+16     	; 0x54ce <__gtsf2+0x56>
    54be:	89 89       	ldd	r24, Y+17	; 0x11
    54c0:	82 30       	cpi	r24, 0x02	; 2
    54c2:	28 f0       	brcs	.+10     	; 0x54ce <__gtsf2+0x56>
    54c4:	c7 01       	movw	r24, r14
    54c6:	b8 01       	movw	r22, r16
    54c8:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <__fpcmp_parts_f>
    54cc:	01 c0       	rjmp	.+2      	; 0x54d0 <__gtsf2+0x58>
    54ce:	8f ef       	ldi	r24, 0xFF	; 255
    54d0:	68 96       	adiw	r28, 0x18	; 24
    54d2:	e6 e0       	ldi	r30, 0x06	; 6
    54d4:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__epilogue_restores__+0x18>

000054d8 <__gesf2>:
    54d8:	a8 e1       	ldi	r26, 0x18	; 24
    54da:	b0 e0       	ldi	r27, 0x00	; 0
    54dc:	e2 e7       	ldi	r30, 0x72	; 114
    54de:	fa e2       	ldi	r31, 0x2A	; 42
    54e0:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <__prologue_saves__+0x18>
    54e4:	69 83       	std	Y+1, r22	; 0x01
    54e6:	7a 83       	std	Y+2, r23	; 0x02
    54e8:	8b 83       	std	Y+3, r24	; 0x03
    54ea:	9c 83       	std	Y+4, r25	; 0x04
    54ec:	2d 83       	std	Y+5, r18	; 0x05
    54ee:	3e 83       	std	Y+6, r19	; 0x06
    54f0:	4f 83       	std	Y+7, r20	; 0x07
    54f2:	58 87       	std	Y+8, r21	; 0x08
    54f4:	89 e0       	ldi	r24, 0x09	; 9
    54f6:	e8 2e       	mov	r14, r24
    54f8:	f1 2c       	mov	r15, r1
    54fa:	ec 0e       	add	r14, r28
    54fc:	fd 1e       	adc	r15, r29
    54fe:	ce 01       	movw	r24, r28
    5500:	01 96       	adiw	r24, 0x01	; 1
    5502:	b7 01       	movw	r22, r14
    5504:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5508:	8e 01       	movw	r16, r28
    550a:	0f 5e       	subi	r16, 0xEF	; 239
    550c:	1f 4f       	sbci	r17, 0xFF	; 255
    550e:	ce 01       	movw	r24, r28
    5510:	05 96       	adiw	r24, 0x05	; 5
    5512:	b8 01       	movw	r22, r16
    5514:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5518:	89 85       	ldd	r24, Y+9	; 0x09
    551a:	82 30       	cpi	r24, 0x02	; 2
    551c:	40 f0       	brcs	.+16     	; 0x552e <__gesf2+0x56>
    551e:	89 89       	ldd	r24, Y+17	; 0x11
    5520:	82 30       	cpi	r24, 0x02	; 2
    5522:	28 f0       	brcs	.+10     	; 0x552e <__gesf2+0x56>
    5524:	c7 01       	movw	r24, r14
    5526:	b8 01       	movw	r22, r16
    5528:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <__fpcmp_parts_f>
    552c:	01 c0       	rjmp	.+2      	; 0x5530 <__gesf2+0x58>
    552e:	8f ef       	ldi	r24, 0xFF	; 255
    5530:	68 96       	adiw	r28, 0x18	; 24
    5532:	e6 e0       	ldi	r30, 0x06	; 6
    5534:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__epilogue_restores__+0x18>

00005538 <__ltsf2>:
    5538:	a8 e1       	ldi	r26, 0x18	; 24
    553a:	b0 e0       	ldi	r27, 0x00	; 0
    553c:	e2 ea       	ldi	r30, 0xA2	; 162
    553e:	fa e2       	ldi	r31, 0x2A	; 42
    5540:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <__prologue_saves__+0x18>
    5544:	69 83       	std	Y+1, r22	; 0x01
    5546:	7a 83       	std	Y+2, r23	; 0x02
    5548:	8b 83       	std	Y+3, r24	; 0x03
    554a:	9c 83       	std	Y+4, r25	; 0x04
    554c:	2d 83       	std	Y+5, r18	; 0x05
    554e:	3e 83       	std	Y+6, r19	; 0x06
    5550:	4f 83       	std	Y+7, r20	; 0x07
    5552:	58 87       	std	Y+8, r21	; 0x08
    5554:	89 e0       	ldi	r24, 0x09	; 9
    5556:	e8 2e       	mov	r14, r24
    5558:	f1 2c       	mov	r15, r1
    555a:	ec 0e       	add	r14, r28
    555c:	fd 1e       	adc	r15, r29
    555e:	ce 01       	movw	r24, r28
    5560:	01 96       	adiw	r24, 0x01	; 1
    5562:	b7 01       	movw	r22, r14
    5564:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5568:	8e 01       	movw	r16, r28
    556a:	0f 5e       	subi	r16, 0xEF	; 239
    556c:	1f 4f       	sbci	r17, 0xFF	; 255
    556e:	ce 01       	movw	r24, r28
    5570:	05 96       	adiw	r24, 0x05	; 5
    5572:	b8 01       	movw	r22, r16
    5574:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5578:	89 85       	ldd	r24, Y+9	; 0x09
    557a:	82 30       	cpi	r24, 0x02	; 2
    557c:	40 f0       	brcs	.+16     	; 0x558e <__ltsf2+0x56>
    557e:	89 89       	ldd	r24, Y+17	; 0x11
    5580:	82 30       	cpi	r24, 0x02	; 2
    5582:	28 f0       	brcs	.+10     	; 0x558e <__ltsf2+0x56>
    5584:	c7 01       	movw	r24, r14
    5586:	b8 01       	movw	r22, r16
    5588:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <__fpcmp_parts_f>
    558c:	01 c0       	rjmp	.+2      	; 0x5590 <__ltsf2+0x58>
    558e:	81 e0       	ldi	r24, 0x01	; 1
    5590:	68 96       	adiw	r28, 0x18	; 24
    5592:	e6 e0       	ldi	r30, 0x06	; 6
    5594:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__epilogue_restores__+0x18>

00005598 <__floatsisf>:
    5598:	a8 e0       	ldi	r26, 0x08	; 8
    559a:	b0 e0       	ldi	r27, 0x00	; 0
    559c:	e2 ed       	ldi	r30, 0xD2	; 210
    559e:	fa e2       	ldi	r31, 0x2A	; 42
    55a0:	0c 94 5d 2e 	jmp	0x5cba	; 0x5cba <__prologue_saves__+0x12>
    55a4:	9b 01       	movw	r18, r22
    55a6:	ac 01       	movw	r20, r24
    55a8:	83 e0       	ldi	r24, 0x03	; 3
    55aa:	89 83       	std	Y+1, r24	; 0x01
    55ac:	da 01       	movw	r26, r20
    55ae:	c9 01       	movw	r24, r18
    55b0:	88 27       	eor	r24, r24
    55b2:	b7 fd       	sbrc	r27, 7
    55b4:	83 95       	inc	r24
    55b6:	99 27       	eor	r25, r25
    55b8:	aa 27       	eor	r26, r26
    55ba:	bb 27       	eor	r27, r27
    55bc:	b8 2e       	mov	r11, r24
    55be:	21 15       	cp	r18, r1
    55c0:	31 05       	cpc	r19, r1
    55c2:	41 05       	cpc	r20, r1
    55c4:	51 05       	cpc	r21, r1
    55c6:	19 f4       	brne	.+6      	; 0x55ce <__floatsisf+0x36>
    55c8:	82 e0       	ldi	r24, 0x02	; 2
    55ca:	89 83       	std	Y+1, r24	; 0x01
    55cc:	3a c0       	rjmp	.+116    	; 0x5642 <__floatsisf+0xaa>
    55ce:	88 23       	and	r24, r24
    55d0:	a9 f0       	breq	.+42     	; 0x55fc <__floatsisf+0x64>
    55d2:	20 30       	cpi	r18, 0x00	; 0
    55d4:	80 e0       	ldi	r24, 0x00	; 0
    55d6:	38 07       	cpc	r19, r24
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	48 07       	cpc	r20, r24
    55dc:	80 e8       	ldi	r24, 0x80	; 128
    55de:	58 07       	cpc	r21, r24
    55e0:	29 f4       	brne	.+10     	; 0x55ec <__floatsisf+0x54>
    55e2:	60 e0       	ldi	r22, 0x00	; 0
    55e4:	70 e0       	ldi	r23, 0x00	; 0
    55e6:	80 e0       	ldi	r24, 0x00	; 0
    55e8:	9f ec       	ldi	r25, 0xCF	; 207
    55ea:	30 c0       	rjmp	.+96     	; 0x564c <__floatsisf+0xb4>
    55ec:	ee 24       	eor	r14, r14
    55ee:	ff 24       	eor	r15, r15
    55f0:	87 01       	movw	r16, r14
    55f2:	e2 1a       	sub	r14, r18
    55f4:	f3 0a       	sbc	r15, r19
    55f6:	04 0b       	sbc	r16, r20
    55f8:	15 0b       	sbc	r17, r21
    55fa:	02 c0       	rjmp	.+4      	; 0x5600 <__floatsisf+0x68>
    55fc:	79 01       	movw	r14, r18
    55fe:	8a 01       	movw	r16, r20
    5600:	8e e1       	ldi	r24, 0x1E	; 30
    5602:	c8 2e       	mov	r12, r24
    5604:	d1 2c       	mov	r13, r1
    5606:	dc 82       	std	Y+4, r13	; 0x04
    5608:	cb 82       	std	Y+3, r12	; 0x03
    560a:	ed 82       	std	Y+5, r14	; 0x05
    560c:	fe 82       	std	Y+6, r15	; 0x06
    560e:	0f 83       	std	Y+7, r16	; 0x07
    5610:	18 87       	std	Y+8, r17	; 0x08
    5612:	c8 01       	movw	r24, r16
    5614:	b7 01       	movw	r22, r14
    5616:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__clzsi2>
    561a:	01 97       	sbiw	r24, 0x01	; 1
    561c:	18 16       	cp	r1, r24
    561e:	19 06       	cpc	r1, r25
    5620:	84 f4       	brge	.+32     	; 0x5642 <__floatsisf+0xaa>
    5622:	08 2e       	mov	r0, r24
    5624:	04 c0       	rjmp	.+8      	; 0x562e <__floatsisf+0x96>
    5626:	ee 0c       	add	r14, r14
    5628:	ff 1c       	adc	r15, r15
    562a:	00 1f       	adc	r16, r16
    562c:	11 1f       	adc	r17, r17
    562e:	0a 94       	dec	r0
    5630:	d2 f7       	brpl	.-12     	; 0x5626 <__floatsisf+0x8e>
    5632:	ed 82       	std	Y+5, r14	; 0x05
    5634:	fe 82       	std	Y+6, r15	; 0x06
    5636:	0f 83       	std	Y+7, r16	; 0x07
    5638:	18 87       	std	Y+8, r17	; 0x08
    563a:	c8 1a       	sub	r12, r24
    563c:	d9 0a       	sbc	r13, r25
    563e:	dc 82       	std	Y+4, r13	; 0x04
    5640:	cb 82       	std	Y+3, r12	; 0x03
    5642:	ba 82       	std	Y+2, r11	; 0x02
    5644:	ce 01       	movw	r24, r28
    5646:	01 96       	adiw	r24, 0x01	; 1
    5648:	0e 94 46 2c 	call	0x588c	; 0x588c <__pack_f>
    564c:	28 96       	adiw	r28, 0x08	; 8
    564e:	e9 e0       	ldi	r30, 0x09	; 9
    5650:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <__epilogue_restores__+0x12>

00005654 <__fixsfsi>:
    5654:	ac e0       	ldi	r26, 0x0C	; 12
    5656:	b0 e0       	ldi	r27, 0x00	; 0
    5658:	e0 e3       	ldi	r30, 0x30	; 48
    565a:	fb e2       	ldi	r31, 0x2B	; 43
    565c:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__prologue_saves__+0x20>
    5660:	69 83       	std	Y+1, r22	; 0x01
    5662:	7a 83       	std	Y+2, r23	; 0x02
    5664:	8b 83       	std	Y+3, r24	; 0x03
    5666:	9c 83       	std	Y+4, r25	; 0x04
    5668:	ce 01       	movw	r24, r28
    566a:	01 96       	adiw	r24, 0x01	; 1
    566c:	be 01       	movw	r22, r28
    566e:	6b 5f       	subi	r22, 0xFB	; 251
    5670:	7f 4f       	sbci	r23, 0xFF	; 255
    5672:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__unpack_f>
    5676:	8d 81       	ldd	r24, Y+5	; 0x05
    5678:	82 30       	cpi	r24, 0x02	; 2
    567a:	61 f1       	breq	.+88     	; 0x56d4 <__fixsfsi+0x80>
    567c:	82 30       	cpi	r24, 0x02	; 2
    567e:	50 f1       	brcs	.+84     	; 0x56d4 <__fixsfsi+0x80>
    5680:	84 30       	cpi	r24, 0x04	; 4
    5682:	21 f4       	brne	.+8      	; 0x568c <__fixsfsi+0x38>
    5684:	8e 81       	ldd	r24, Y+6	; 0x06
    5686:	88 23       	and	r24, r24
    5688:	51 f1       	breq	.+84     	; 0x56de <__fixsfsi+0x8a>
    568a:	2e c0       	rjmp	.+92     	; 0x56e8 <__fixsfsi+0x94>
    568c:	2f 81       	ldd	r18, Y+7	; 0x07
    568e:	38 85       	ldd	r19, Y+8	; 0x08
    5690:	37 fd       	sbrc	r19, 7
    5692:	20 c0       	rjmp	.+64     	; 0x56d4 <__fixsfsi+0x80>
    5694:	6e 81       	ldd	r22, Y+6	; 0x06
    5696:	2f 31       	cpi	r18, 0x1F	; 31
    5698:	31 05       	cpc	r19, r1
    569a:	1c f0       	brlt	.+6      	; 0x56a2 <__fixsfsi+0x4e>
    569c:	66 23       	and	r22, r22
    569e:	f9 f0       	breq	.+62     	; 0x56de <__fixsfsi+0x8a>
    56a0:	23 c0       	rjmp	.+70     	; 0x56e8 <__fixsfsi+0x94>
    56a2:	8e e1       	ldi	r24, 0x1E	; 30
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	82 1b       	sub	r24, r18
    56a8:	93 0b       	sbc	r25, r19
    56aa:	29 85       	ldd	r18, Y+9	; 0x09
    56ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    56ae:	4b 85       	ldd	r20, Y+11	; 0x0b
    56b0:	5c 85       	ldd	r21, Y+12	; 0x0c
    56b2:	04 c0       	rjmp	.+8      	; 0x56bc <__fixsfsi+0x68>
    56b4:	56 95       	lsr	r21
    56b6:	47 95       	ror	r20
    56b8:	37 95       	ror	r19
    56ba:	27 95       	ror	r18
    56bc:	8a 95       	dec	r24
    56be:	d2 f7       	brpl	.-12     	; 0x56b4 <__fixsfsi+0x60>
    56c0:	66 23       	and	r22, r22
    56c2:	b1 f0       	breq	.+44     	; 0x56f0 <__fixsfsi+0x9c>
    56c4:	50 95       	com	r21
    56c6:	40 95       	com	r20
    56c8:	30 95       	com	r19
    56ca:	21 95       	neg	r18
    56cc:	3f 4f       	sbci	r19, 0xFF	; 255
    56ce:	4f 4f       	sbci	r20, 0xFF	; 255
    56d0:	5f 4f       	sbci	r21, 0xFF	; 255
    56d2:	0e c0       	rjmp	.+28     	; 0x56f0 <__fixsfsi+0x9c>
    56d4:	20 e0       	ldi	r18, 0x00	; 0
    56d6:	30 e0       	ldi	r19, 0x00	; 0
    56d8:	40 e0       	ldi	r20, 0x00	; 0
    56da:	50 e0       	ldi	r21, 0x00	; 0
    56dc:	09 c0       	rjmp	.+18     	; 0x56f0 <__fixsfsi+0x9c>
    56de:	2f ef       	ldi	r18, 0xFF	; 255
    56e0:	3f ef       	ldi	r19, 0xFF	; 255
    56e2:	4f ef       	ldi	r20, 0xFF	; 255
    56e4:	5f e7       	ldi	r21, 0x7F	; 127
    56e6:	04 c0       	rjmp	.+8      	; 0x56f0 <__fixsfsi+0x9c>
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	40 e0       	ldi	r20, 0x00	; 0
    56ee:	50 e8       	ldi	r21, 0x80	; 128
    56f0:	b9 01       	movw	r22, r18
    56f2:	ca 01       	movw	r24, r20
    56f4:	2c 96       	adiw	r28, 0x0c	; 12
    56f6:	e2 e0       	ldi	r30, 0x02	; 2
    56f8:	0c 94 80 2e 	jmp	0x5d00	; 0x5d00 <__epilogue_restores__+0x20>

000056fc <__floatunsisf>:
    56fc:	a8 e0       	ldi	r26, 0x08	; 8
    56fe:	b0 e0       	ldi	r27, 0x00	; 0
    5700:	e4 e8       	ldi	r30, 0x84	; 132
    5702:	fb e2       	ldi	r31, 0x2B	; 43
    5704:	0c 94 5c 2e 	jmp	0x5cb8	; 0x5cb8 <__prologue_saves__+0x10>
    5708:	7b 01       	movw	r14, r22
    570a:	8c 01       	movw	r16, r24
    570c:	61 15       	cp	r22, r1
    570e:	71 05       	cpc	r23, r1
    5710:	81 05       	cpc	r24, r1
    5712:	91 05       	cpc	r25, r1
    5714:	19 f4       	brne	.+6      	; 0x571c <__floatunsisf+0x20>
    5716:	82 e0       	ldi	r24, 0x02	; 2
    5718:	89 83       	std	Y+1, r24	; 0x01
    571a:	60 c0       	rjmp	.+192    	; 0x57dc <__floatunsisf+0xe0>
    571c:	83 e0       	ldi	r24, 0x03	; 3
    571e:	89 83       	std	Y+1, r24	; 0x01
    5720:	8e e1       	ldi	r24, 0x1E	; 30
    5722:	c8 2e       	mov	r12, r24
    5724:	d1 2c       	mov	r13, r1
    5726:	dc 82       	std	Y+4, r13	; 0x04
    5728:	cb 82       	std	Y+3, r12	; 0x03
    572a:	ed 82       	std	Y+5, r14	; 0x05
    572c:	fe 82       	std	Y+6, r15	; 0x06
    572e:	0f 83       	std	Y+7, r16	; 0x07
    5730:	18 87       	std	Y+8, r17	; 0x08
    5732:	c8 01       	movw	r24, r16
    5734:	b7 01       	movw	r22, r14
    5736:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__clzsi2>
    573a:	fc 01       	movw	r30, r24
    573c:	31 97       	sbiw	r30, 0x01	; 1
    573e:	f7 ff       	sbrs	r31, 7
    5740:	3b c0       	rjmp	.+118    	; 0x57b8 <__floatunsisf+0xbc>
    5742:	22 27       	eor	r18, r18
    5744:	33 27       	eor	r19, r19
    5746:	2e 1b       	sub	r18, r30
    5748:	3f 0b       	sbc	r19, r31
    574a:	57 01       	movw	r10, r14
    574c:	68 01       	movw	r12, r16
    574e:	02 2e       	mov	r0, r18
    5750:	04 c0       	rjmp	.+8      	; 0x575a <__floatunsisf+0x5e>
    5752:	d6 94       	lsr	r13
    5754:	c7 94       	ror	r12
    5756:	b7 94       	ror	r11
    5758:	a7 94       	ror	r10
    575a:	0a 94       	dec	r0
    575c:	d2 f7       	brpl	.-12     	; 0x5752 <__floatunsisf+0x56>
    575e:	40 e0       	ldi	r20, 0x00	; 0
    5760:	50 e0       	ldi	r21, 0x00	; 0
    5762:	60 e0       	ldi	r22, 0x00	; 0
    5764:	70 e0       	ldi	r23, 0x00	; 0
    5766:	81 e0       	ldi	r24, 0x01	; 1
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	a0 e0       	ldi	r26, 0x00	; 0
    576c:	b0 e0       	ldi	r27, 0x00	; 0
    576e:	04 c0       	rjmp	.+8      	; 0x5778 <__floatunsisf+0x7c>
    5770:	88 0f       	add	r24, r24
    5772:	99 1f       	adc	r25, r25
    5774:	aa 1f       	adc	r26, r26
    5776:	bb 1f       	adc	r27, r27
    5778:	2a 95       	dec	r18
    577a:	d2 f7       	brpl	.-12     	; 0x5770 <__floatunsisf+0x74>
    577c:	01 97       	sbiw	r24, 0x01	; 1
    577e:	a1 09       	sbc	r26, r1
    5780:	b1 09       	sbc	r27, r1
    5782:	8e 21       	and	r24, r14
    5784:	9f 21       	and	r25, r15
    5786:	a0 23       	and	r26, r16
    5788:	b1 23       	and	r27, r17
    578a:	00 97       	sbiw	r24, 0x00	; 0
    578c:	a1 05       	cpc	r26, r1
    578e:	b1 05       	cpc	r27, r1
    5790:	21 f0       	breq	.+8      	; 0x579a <__floatunsisf+0x9e>
    5792:	41 e0       	ldi	r20, 0x01	; 1
    5794:	50 e0       	ldi	r21, 0x00	; 0
    5796:	60 e0       	ldi	r22, 0x00	; 0
    5798:	70 e0       	ldi	r23, 0x00	; 0
    579a:	4a 29       	or	r20, r10
    579c:	5b 29       	or	r21, r11
    579e:	6c 29       	or	r22, r12
    57a0:	7d 29       	or	r23, r13
    57a2:	4d 83       	std	Y+5, r20	; 0x05
    57a4:	5e 83       	std	Y+6, r21	; 0x06
    57a6:	6f 83       	std	Y+7, r22	; 0x07
    57a8:	78 87       	std	Y+8, r23	; 0x08
    57aa:	8e e1       	ldi	r24, 0x1E	; 30
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	8e 1b       	sub	r24, r30
    57b0:	9f 0b       	sbc	r25, r31
    57b2:	9c 83       	std	Y+4, r25	; 0x04
    57b4:	8b 83       	std	Y+3, r24	; 0x03
    57b6:	12 c0       	rjmp	.+36     	; 0x57dc <__floatunsisf+0xe0>
    57b8:	30 97       	sbiw	r30, 0x00	; 0
    57ba:	81 f0       	breq	.+32     	; 0x57dc <__floatunsisf+0xe0>
    57bc:	0e 2e       	mov	r0, r30
    57be:	04 c0       	rjmp	.+8      	; 0x57c8 <__floatunsisf+0xcc>
    57c0:	ee 0c       	add	r14, r14
    57c2:	ff 1c       	adc	r15, r15
    57c4:	00 1f       	adc	r16, r16
    57c6:	11 1f       	adc	r17, r17
    57c8:	0a 94       	dec	r0
    57ca:	d2 f7       	brpl	.-12     	; 0x57c0 <__floatunsisf+0xc4>
    57cc:	ed 82       	std	Y+5, r14	; 0x05
    57ce:	fe 82       	std	Y+6, r15	; 0x06
    57d0:	0f 83       	std	Y+7, r16	; 0x07
    57d2:	18 87       	std	Y+8, r17	; 0x08
    57d4:	ce 1a       	sub	r12, r30
    57d6:	df 0a       	sbc	r13, r31
    57d8:	dc 82       	std	Y+4, r13	; 0x04
    57da:	cb 82       	std	Y+3, r12	; 0x03
    57dc:	1a 82       	std	Y+2, r1	; 0x02
    57de:	ce 01       	movw	r24, r28
    57e0:	01 96       	adiw	r24, 0x01	; 1
    57e2:	0e 94 46 2c 	call	0x588c	; 0x588c <__pack_f>
    57e6:	28 96       	adiw	r28, 0x08	; 8
    57e8:	ea e0       	ldi	r30, 0x0A	; 10
    57ea:	0c 94 78 2e 	jmp	0x5cf0	; 0x5cf0 <__epilogue_restores__+0x10>

000057ee <__clzsi2>:
    57ee:	ef 92       	push	r14
    57f0:	ff 92       	push	r15
    57f2:	0f 93       	push	r16
    57f4:	1f 93       	push	r17
    57f6:	7b 01       	movw	r14, r22
    57f8:	8c 01       	movw	r16, r24
    57fa:	80 e0       	ldi	r24, 0x00	; 0
    57fc:	e8 16       	cp	r14, r24
    57fe:	80 e0       	ldi	r24, 0x00	; 0
    5800:	f8 06       	cpc	r15, r24
    5802:	81 e0       	ldi	r24, 0x01	; 1
    5804:	08 07       	cpc	r16, r24
    5806:	80 e0       	ldi	r24, 0x00	; 0
    5808:	18 07       	cpc	r17, r24
    580a:	88 f4       	brcc	.+34     	; 0x582e <__clzsi2+0x40>
    580c:	8f ef       	ldi	r24, 0xFF	; 255
    580e:	e8 16       	cp	r14, r24
    5810:	f1 04       	cpc	r15, r1
    5812:	01 05       	cpc	r16, r1
    5814:	11 05       	cpc	r17, r1
    5816:	31 f0       	breq	.+12     	; 0x5824 <__clzsi2+0x36>
    5818:	28 f0       	brcs	.+10     	; 0x5824 <__clzsi2+0x36>
    581a:	88 e0       	ldi	r24, 0x08	; 8
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	a0 e0       	ldi	r26, 0x00	; 0
    5820:	b0 e0       	ldi	r27, 0x00	; 0
    5822:	17 c0       	rjmp	.+46     	; 0x5852 <__clzsi2+0x64>
    5824:	80 e0       	ldi	r24, 0x00	; 0
    5826:	90 e0       	ldi	r25, 0x00	; 0
    5828:	a0 e0       	ldi	r26, 0x00	; 0
    582a:	b0 e0       	ldi	r27, 0x00	; 0
    582c:	12 c0       	rjmp	.+36     	; 0x5852 <__clzsi2+0x64>
    582e:	80 e0       	ldi	r24, 0x00	; 0
    5830:	e8 16       	cp	r14, r24
    5832:	80 e0       	ldi	r24, 0x00	; 0
    5834:	f8 06       	cpc	r15, r24
    5836:	80 e0       	ldi	r24, 0x00	; 0
    5838:	08 07       	cpc	r16, r24
    583a:	81 e0       	ldi	r24, 0x01	; 1
    583c:	18 07       	cpc	r17, r24
    583e:	28 f0       	brcs	.+10     	; 0x584a <__clzsi2+0x5c>
    5840:	88 e1       	ldi	r24, 0x18	; 24
    5842:	90 e0       	ldi	r25, 0x00	; 0
    5844:	a0 e0       	ldi	r26, 0x00	; 0
    5846:	b0 e0       	ldi	r27, 0x00	; 0
    5848:	04 c0       	rjmp	.+8      	; 0x5852 <__clzsi2+0x64>
    584a:	80 e1       	ldi	r24, 0x10	; 16
    584c:	90 e0       	ldi	r25, 0x00	; 0
    584e:	a0 e0       	ldi	r26, 0x00	; 0
    5850:	b0 e0       	ldi	r27, 0x00	; 0
    5852:	20 e2       	ldi	r18, 0x20	; 32
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	40 e0       	ldi	r20, 0x00	; 0
    5858:	50 e0       	ldi	r21, 0x00	; 0
    585a:	28 1b       	sub	r18, r24
    585c:	39 0b       	sbc	r19, r25
    585e:	4a 0b       	sbc	r20, r26
    5860:	5b 0b       	sbc	r21, r27
    5862:	04 c0       	rjmp	.+8      	; 0x586c <__clzsi2+0x7e>
    5864:	16 95       	lsr	r17
    5866:	07 95       	ror	r16
    5868:	f7 94       	ror	r15
    586a:	e7 94       	ror	r14
    586c:	8a 95       	dec	r24
    586e:	d2 f7       	brpl	.-12     	; 0x5864 <__clzsi2+0x76>
    5870:	f7 01       	movw	r30, r14
    5872:	ea 56       	subi	r30, 0x6A	; 106
    5874:	fc 4f       	sbci	r31, 0xFC	; 252
    5876:	80 81       	ld	r24, Z
    5878:	28 1b       	sub	r18, r24
    587a:	31 09       	sbc	r19, r1
    587c:	41 09       	sbc	r20, r1
    587e:	51 09       	sbc	r21, r1
    5880:	c9 01       	movw	r24, r18
    5882:	1f 91       	pop	r17
    5884:	0f 91       	pop	r16
    5886:	ff 90       	pop	r15
    5888:	ef 90       	pop	r14
    588a:	08 95       	ret

0000588c <__pack_f>:
    588c:	df 92       	push	r13
    588e:	ef 92       	push	r14
    5890:	ff 92       	push	r15
    5892:	0f 93       	push	r16
    5894:	1f 93       	push	r17
    5896:	fc 01       	movw	r30, r24
    5898:	e4 80       	ldd	r14, Z+4	; 0x04
    589a:	f5 80       	ldd	r15, Z+5	; 0x05
    589c:	06 81       	ldd	r16, Z+6	; 0x06
    589e:	17 81       	ldd	r17, Z+7	; 0x07
    58a0:	d1 80       	ldd	r13, Z+1	; 0x01
    58a2:	80 81       	ld	r24, Z
    58a4:	82 30       	cpi	r24, 0x02	; 2
    58a6:	48 f4       	brcc	.+18     	; 0x58ba <__pack_f+0x2e>
    58a8:	80 e0       	ldi	r24, 0x00	; 0
    58aa:	90 e0       	ldi	r25, 0x00	; 0
    58ac:	a0 e1       	ldi	r26, 0x10	; 16
    58ae:	b0 e0       	ldi	r27, 0x00	; 0
    58b0:	e8 2a       	or	r14, r24
    58b2:	f9 2a       	or	r15, r25
    58b4:	0a 2b       	or	r16, r26
    58b6:	1b 2b       	or	r17, r27
    58b8:	a5 c0       	rjmp	.+330    	; 0x5a04 <__pack_f+0x178>
    58ba:	84 30       	cpi	r24, 0x04	; 4
    58bc:	09 f4       	brne	.+2      	; 0x58c0 <__pack_f+0x34>
    58be:	9f c0       	rjmp	.+318    	; 0x59fe <__pack_f+0x172>
    58c0:	82 30       	cpi	r24, 0x02	; 2
    58c2:	21 f4       	brne	.+8      	; 0x58cc <__pack_f+0x40>
    58c4:	ee 24       	eor	r14, r14
    58c6:	ff 24       	eor	r15, r15
    58c8:	87 01       	movw	r16, r14
    58ca:	05 c0       	rjmp	.+10     	; 0x58d6 <__pack_f+0x4a>
    58cc:	e1 14       	cp	r14, r1
    58ce:	f1 04       	cpc	r15, r1
    58d0:	01 05       	cpc	r16, r1
    58d2:	11 05       	cpc	r17, r1
    58d4:	19 f4       	brne	.+6      	; 0x58dc <__pack_f+0x50>
    58d6:	e0 e0       	ldi	r30, 0x00	; 0
    58d8:	f0 e0       	ldi	r31, 0x00	; 0
    58da:	96 c0       	rjmp	.+300    	; 0x5a08 <__pack_f+0x17c>
    58dc:	62 81       	ldd	r22, Z+2	; 0x02
    58de:	73 81       	ldd	r23, Z+3	; 0x03
    58e0:	9f ef       	ldi	r25, 0xFF	; 255
    58e2:	62 38       	cpi	r22, 0x82	; 130
    58e4:	79 07       	cpc	r23, r25
    58e6:	0c f0       	brlt	.+2      	; 0x58ea <__pack_f+0x5e>
    58e8:	5b c0       	rjmp	.+182    	; 0x59a0 <__pack_f+0x114>
    58ea:	22 e8       	ldi	r18, 0x82	; 130
    58ec:	3f ef       	ldi	r19, 0xFF	; 255
    58ee:	26 1b       	sub	r18, r22
    58f0:	37 0b       	sbc	r19, r23
    58f2:	2a 31       	cpi	r18, 0x1A	; 26
    58f4:	31 05       	cpc	r19, r1
    58f6:	2c f0       	brlt	.+10     	; 0x5902 <__pack_f+0x76>
    58f8:	20 e0       	ldi	r18, 0x00	; 0
    58fa:	30 e0       	ldi	r19, 0x00	; 0
    58fc:	40 e0       	ldi	r20, 0x00	; 0
    58fe:	50 e0       	ldi	r21, 0x00	; 0
    5900:	2a c0       	rjmp	.+84     	; 0x5956 <__pack_f+0xca>
    5902:	b8 01       	movw	r22, r16
    5904:	a7 01       	movw	r20, r14
    5906:	02 2e       	mov	r0, r18
    5908:	04 c0       	rjmp	.+8      	; 0x5912 <__pack_f+0x86>
    590a:	76 95       	lsr	r23
    590c:	67 95       	ror	r22
    590e:	57 95       	ror	r21
    5910:	47 95       	ror	r20
    5912:	0a 94       	dec	r0
    5914:	d2 f7       	brpl	.-12     	; 0x590a <__pack_f+0x7e>
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	a0 e0       	ldi	r26, 0x00	; 0
    591c:	b0 e0       	ldi	r27, 0x00	; 0
    591e:	04 c0       	rjmp	.+8      	; 0x5928 <__pack_f+0x9c>
    5920:	88 0f       	add	r24, r24
    5922:	99 1f       	adc	r25, r25
    5924:	aa 1f       	adc	r26, r26
    5926:	bb 1f       	adc	r27, r27
    5928:	2a 95       	dec	r18
    592a:	d2 f7       	brpl	.-12     	; 0x5920 <__pack_f+0x94>
    592c:	01 97       	sbiw	r24, 0x01	; 1
    592e:	a1 09       	sbc	r26, r1
    5930:	b1 09       	sbc	r27, r1
    5932:	8e 21       	and	r24, r14
    5934:	9f 21       	and	r25, r15
    5936:	a0 23       	and	r26, r16
    5938:	b1 23       	and	r27, r17
    593a:	00 97       	sbiw	r24, 0x00	; 0
    593c:	a1 05       	cpc	r26, r1
    593e:	b1 05       	cpc	r27, r1
    5940:	21 f0       	breq	.+8      	; 0x594a <__pack_f+0xbe>
    5942:	81 e0       	ldi	r24, 0x01	; 1
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	a0 e0       	ldi	r26, 0x00	; 0
    5948:	b0 e0       	ldi	r27, 0x00	; 0
    594a:	9a 01       	movw	r18, r20
    594c:	ab 01       	movw	r20, r22
    594e:	28 2b       	or	r18, r24
    5950:	39 2b       	or	r19, r25
    5952:	4a 2b       	or	r20, r26
    5954:	5b 2b       	or	r21, r27
    5956:	da 01       	movw	r26, r20
    5958:	c9 01       	movw	r24, r18
    595a:	8f 77       	andi	r24, 0x7F	; 127
    595c:	90 70       	andi	r25, 0x00	; 0
    595e:	a0 70       	andi	r26, 0x00	; 0
    5960:	b0 70       	andi	r27, 0x00	; 0
    5962:	80 34       	cpi	r24, 0x40	; 64
    5964:	91 05       	cpc	r25, r1
    5966:	a1 05       	cpc	r26, r1
    5968:	b1 05       	cpc	r27, r1
    596a:	39 f4       	brne	.+14     	; 0x597a <__pack_f+0xee>
    596c:	27 ff       	sbrs	r18, 7
    596e:	09 c0       	rjmp	.+18     	; 0x5982 <__pack_f+0xf6>
    5970:	20 5c       	subi	r18, 0xC0	; 192
    5972:	3f 4f       	sbci	r19, 0xFF	; 255
    5974:	4f 4f       	sbci	r20, 0xFF	; 255
    5976:	5f 4f       	sbci	r21, 0xFF	; 255
    5978:	04 c0       	rjmp	.+8      	; 0x5982 <__pack_f+0xf6>
    597a:	21 5c       	subi	r18, 0xC1	; 193
    597c:	3f 4f       	sbci	r19, 0xFF	; 255
    597e:	4f 4f       	sbci	r20, 0xFF	; 255
    5980:	5f 4f       	sbci	r21, 0xFF	; 255
    5982:	e0 e0       	ldi	r30, 0x00	; 0
    5984:	f0 e0       	ldi	r31, 0x00	; 0
    5986:	20 30       	cpi	r18, 0x00	; 0
    5988:	a0 e0       	ldi	r26, 0x00	; 0
    598a:	3a 07       	cpc	r19, r26
    598c:	a0 e0       	ldi	r26, 0x00	; 0
    598e:	4a 07       	cpc	r20, r26
    5990:	a0 e4       	ldi	r26, 0x40	; 64
    5992:	5a 07       	cpc	r21, r26
    5994:	10 f0       	brcs	.+4      	; 0x599a <__pack_f+0x10e>
    5996:	e1 e0       	ldi	r30, 0x01	; 1
    5998:	f0 e0       	ldi	r31, 0x00	; 0
    599a:	79 01       	movw	r14, r18
    599c:	8a 01       	movw	r16, r20
    599e:	27 c0       	rjmp	.+78     	; 0x59ee <__pack_f+0x162>
    59a0:	60 38       	cpi	r22, 0x80	; 128
    59a2:	71 05       	cpc	r23, r1
    59a4:	64 f5       	brge	.+88     	; 0x59fe <__pack_f+0x172>
    59a6:	fb 01       	movw	r30, r22
    59a8:	e1 58       	subi	r30, 0x81	; 129
    59aa:	ff 4f       	sbci	r31, 0xFF	; 255
    59ac:	d8 01       	movw	r26, r16
    59ae:	c7 01       	movw	r24, r14
    59b0:	8f 77       	andi	r24, 0x7F	; 127
    59b2:	90 70       	andi	r25, 0x00	; 0
    59b4:	a0 70       	andi	r26, 0x00	; 0
    59b6:	b0 70       	andi	r27, 0x00	; 0
    59b8:	80 34       	cpi	r24, 0x40	; 64
    59ba:	91 05       	cpc	r25, r1
    59bc:	a1 05       	cpc	r26, r1
    59be:	b1 05       	cpc	r27, r1
    59c0:	39 f4       	brne	.+14     	; 0x59d0 <__pack_f+0x144>
    59c2:	e7 fe       	sbrs	r14, 7
    59c4:	0d c0       	rjmp	.+26     	; 0x59e0 <__pack_f+0x154>
    59c6:	80 e4       	ldi	r24, 0x40	; 64
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	a0 e0       	ldi	r26, 0x00	; 0
    59cc:	b0 e0       	ldi	r27, 0x00	; 0
    59ce:	04 c0       	rjmp	.+8      	; 0x59d8 <__pack_f+0x14c>
    59d0:	8f e3       	ldi	r24, 0x3F	; 63
    59d2:	90 e0       	ldi	r25, 0x00	; 0
    59d4:	a0 e0       	ldi	r26, 0x00	; 0
    59d6:	b0 e0       	ldi	r27, 0x00	; 0
    59d8:	e8 0e       	add	r14, r24
    59da:	f9 1e       	adc	r15, r25
    59dc:	0a 1f       	adc	r16, r26
    59de:	1b 1f       	adc	r17, r27
    59e0:	17 ff       	sbrs	r17, 7
    59e2:	05 c0       	rjmp	.+10     	; 0x59ee <__pack_f+0x162>
    59e4:	16 95       	lsr	r17
    59e6:	07 95       	ror	r16
    59e8:	f7 94       	ror	r15
    59ea:	e7 94       	ror	r14
    59ec:	31 96       	adiw	r30, 0x01	; 1
    59ee:	87 e0       	ldi	r24, 0x07	; 7
    59f0:	16 95       	lsr	r17
    59f2:	07 95       	ror	r16
    59f4:	f7 94       	ror	r15
    59f6:	e7 94       	ror	r14
    59f8:	8a 95       	dec	r24
    59fa:	d1 f7       	brne	.-12     	; 0x59f0 <__pack_f+0x164>
    59fc:	05 c0       	rjmp	.+10     	; 0x5a08 <__pack_f+0x17c>
    59fe:	ee 24       	eor	r14, r14
    5a00:	ff 24       	eor	r15, r15
    5a02:	87 01       	movw	r16, r14
    5a04:	ef ef       	ldi	r30, 0xFF	; 255
    5a06:	f0 e0       	ldi	r31, 0x00	; 0
    5a08:	6e 2f       	mov	r22, r30
    5a0a:	67 95       	ror	r22
    5a0c:	66 27       	eor	r22, r22
    5a0e:	67 95       	ror	r22
    5a10:	90 2f       	mov	r25, r16
    5a12:	9f 77       	andi	r25, 0x7F	; 127
    5a14:	d7 94       	ror	r13
    5a16:	dd 24       	eor	r13, r13
    5a18:	d7 94       	ror	r13
    5a1a:	8e 2f       	mov	r24, r30
    5a1c:	86 95       	lsr	r24
    5a1e:	49 2f       	mov	r20, r25
    5a20:	46 2b       	or	r20, r22
    5a22:	58 2f       	mov	r21, r24
    5a24:	5d 29       	or	r21, r13
    5a26:	b7 01       	movw	r22, r14
    5a28:	ca 01       	movw	r24, r20
    5a2a:	1f 91       	pop	r17
    5a2c:	0f 91       	pop	r16
    5a2e:	ff 90       	pop	r15
    5a30:	ef 90       	pop	r14
    5a32:	df 90       	pop	r13
    5a34:	08 95       	ret

00005a36 <__unpack_f>:
    5a36:	fc 01       	movw	r30, r24
    5a38:	db 01       	movw	r26, r22
    5a3a:	40 81       	ld	r20, Z
    5a3c:	51 81       	ldd	r21, Z+1	; 0x01
    5a3e:	22 81       	ldd	r18, Z+2	; 0x02
    5a40:	62 2f       	mov	r22, r18
    5a42:	6f 77       	andi	r22, 0x7F	; 127
    5a44:	70 e0       	ldi	r23, 0x00	; 0
    5a46:	22 1f       	adc	r18, r18
    5a48:	22 27       	eor	r18, r18
    5a4a:	22 1f       	adc	r18, r18
    5a4c:	93 81       	ldd	r25, Z+3	; 0x03
    5a4e:	89 2f       	mov	r24, r25
    5a50:	88 0f       	add	r24, r24
    5a52:	82 2b       	or	r24, r18
    5a54:	28 2f       	mov	r18, r24
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	99 1f       	adc	r25, r25
    5a5a:	99 27       	eor	r25, r25
    5a5c:	99 1f       	adc	r25, r25
    5a5e:	11 96       	adiw	r26, 0x01	; 1
    5a60:	9c 93       	st	X, r25
    5a62:	11 97       	sbiw	r26, 0x01	; 1
    5a64:	21 15       	cp	r18, r1
    5a66:	31 05       	cpc	r19, r1
    5a68:	a9 f5       	brne	.+106    	; 0x5ad4 <__unpack_f+0x9e>
    5a6a:	41 15       	cp	r20, r1
    5a6c:	51 05       	cpc	r21, r1
    5a6e:	61 05       	cpc	r22, r1
    5a70:	71 05       	cpc	r23, r1
    5a72:	11 f4       	brne	.+4      	; 0x5a78 <__unpack_f+0x42>
    5a74:	82 e0       	ldi	r24, 0x02	; 2
    5a76:	37 c0       	rjmp	.+110    	; 0x5ae6 <__unpack_f+0xb0>
    5a78:	82 e8       	ldi	r24, 0x82	; 130
    5a7a:	9f ef       	ldi	r25, 0xFF	; 255
    5a7c:	13 96       	adiw	r26, 0x03	; 3
    5a7e:	9c 93       	st	X, r25
    5a80:	8e 93       	st	-X, r24
    5a82:	12 97       	sbiw	r26, 0x02	; 2
    5a84:	9a 01       	movw	r18, r20
    5a86:	ab 01       	movw	r20, r22
    5a88:	67 e0       	ldi	r22, 0x07	; 7
    5a8a:	22 0f       	add	r18, r18
    5a8c:	33 1f       	adc	r19, r19
    5a8e:	44 1f       	adc	r20, r20
    5a90:	55 1f       	adc	r21, r21
    5a92:	6a 95       	dec	r22
    5a94:	d1 f7       	brne	.-12     	; 0x5a8a <__unpack_f+0x54>
    5a96:	83 e0       	ldi	r24, 0x03	; 3
    5a98:	8c 93       	st	X, r24
    5a9a:	0d c0       	rjmp	.+26     	; 0x5ab6 <__unpack_f+0x80>
    5a9c:	22 0f       	add	r18, r18
    5a9e:	33 1f       	adc	r19, r19
    5aa0:	44 1f       	adc	r20, r20
    5aa2:	55 1f       	adc	r21, r21
    5aa4:	12 96       	adiw	r26, 0x02	; 2
    5aa6:	8d 91       	ld	r24, X+
    5aa8:	9c 91       	ld	r25, X
    5aaa:	13 97       	sbiw	r26, 0x03	; 3
    5aac:	01 97       	sbiw	r24, 0x01	; 1
    5aae:	13 96       	adiw	r26, 0x03	; 3
    5ab0:	9c 93       	st	X, r25
    5ab2:	8e 93       	st	-X, r24
    5ab4:	12 97       	sbiw	r26, 0x02	; 2
    5ab6:	20 30       	cpi	r18, 0x00	; 0
    5ab8:	80 e0       	ldi	r24, 0x00	; 0
    5aba:	38 07       	cpc	r19, r24
    5abc:	80 e0       	ldi	r24, 0x00	; 0
    5abe:	48 07       	cpc	r20, r24
    5ac0:	80 e4       	ldi	r24, 0x40	; 64
    5ac2:	58 07       	cpc	r21, r24
    5ac4:	58 f3       	brcs	.-42     	; 0x5a9c <__unpack_f+0x66>
    5ac6:	14 96       	adiw	r26, 0x04	; 4
    5ac8:	2d 93       	st	X+, r18
    5aca:	3d 93       	st	X+, r19
    5acc:	4d 93       	st	X+, r20
    5ace:	5c 93       	st	X, r21
    5ad0:	17 97       	sbiw	r26, 0x07	; 7
    5ad2:	08 95       	ret
    5ad4:	2f 3f       	cpi	r18, 0xFF	; 255
    5ad6:	31 05       	cpc	r19, r1
    5ad8:	79 f4       	brne	.+30     	; 0x5af8 <__unpack_f+0xc2>
    5ada:	41 15       	cp	r20, r1
    5adc:	51 05       	cpc	r21, r1
    5ade:	61 05       	cpc	r22, r1
    5ae0:	71 05       	cpc	r23, r1
    5ae2:	19 f4       	brne	.+6      	; 0x5aea <__unpack_f+0xb4>
    5ae4:	84 e0       	ldi	r24, 0x04	; 4
    5ae6:	8c 93       	st	X, r24
    5ae8:	08 95       	ret
    5aea:	64 ff       	sbrs	r22, 4
    5aec:	03 c0       	rjmp	.+6      	; 0x5af4 <__unpack_f+0xbe>
    5aee:	81 e0       	ldi	r24, 0x01	; 1
    5af0:	8c 93       	st	X, r24
    5af2:	12 c0       	rjmp	.+36     	; 0x5b18 <__unpack_f+0xe2>
    5af4:	1c 92       	st	X, r1
    5af6:	10 c0       	rjmp	.+32     	; 0x5b18 <__unpack_f+0xe2>
    5af8:	2f 57       	subi	r18, 0x7F	; 127
    5afa:	30 40       	sbci	r19, 0x00	; 0
    5afc:	13 96       	adiw	r26, 0x03	; 3
    5afe:	3c 93       	st	X, r19
    5b00:	2e 93       	st	-X, r18
    5b02:	12 97       	sbiw	r26, 0x02	; 2
    5b04:	83 e0       	ldi	r24, 0x03	; 3
    5b06:	8c 93       	st	X, r24
    5b08:	87 e0       	ldi	r24, 0x07	; 7
    5b0a:	44 0f       	add	r20, r20
    5b0c:	55 1f       	adc	r21, r21
    5b0e:	66 1f       	adc	r22, r22
    5b10:	77 1f       	adc	r23, r23
    5b12:	8a 95       	dec	r24
    5b14:	d1 f7       	brne	.-12     	; 0x5b0a <__unpack_f+0xd4>
    5b16:	70 64       	ori	r23, 0x40	; 64
    5b18:	14 96       	adiw	r26, 0x04	; 4
    5b1a:	4d 93       	st	X+, r20
    5b1c:	5d 93       	st	X+, r21
    5b1e:	6d 93       	st	X+, r22
    5b20:	7c 93       	st	X, r23
    5b22:	17 97       	sbiw	r26, 0x07	; 7
    5b24:	08 95       	ret

00005b26 <__fpcmp_parts_f>:
    5b26:	1f 93       	push	r17
    5b28:	dc 01       	movw	r26, r24
    5b2a:	fb 01       	movw	r30, r22
    5b2c:	9c 91       	ld	r25, X
    5b2e:	92 30       	cpi	r25, 0x02	; 2
    5b30:	08 f4       	brcc	.+2      	; 0x5b34 <__fpcmp_parts_f+0xe>
    5b32:	47 c0       	rjmp	.+142    	; 0x5bc2 <__fpcmp_parts_f+0x9c>
    5b34:	80 81       	ld	r24, Z
    5b36:	82 30       	cpi	r24, 0x02	; 2
    5b38:	08 f4       	brcc	.+2      	; 0x5b3c <__fpcmp_parts_f+0x16>
    5b3a:	43 c0       	rjmp	.+134    	; 0x5bc2 <__fpcmp_parts_f+0x9c>
    5b3c:	94 30       	cpi	r25, 0x04	; 4
    5b3e:	51 f4       	brne	.+20     	; 0x5b54 <__fpcmp_parts_f+0x2e>
    5b40:	11 96       	adiw	r26, 0x01	; 1
    5b42:	1c 91       	ld	r17, X
    5b44:	84 30       	cpi	r24, 0x04	; 4
    5b46:	99 f5       	brne	.+102    	; 0x5bae <__fpcmp_parts_f+0x88>
    5b48:	81 81       	ldd	r24, Z+1	; 0x01
    5b4a:	68 2f       	mov	r22, r24
    5b4c:	70 e0       	ldi	r23, 0x00	; 0
    5b4e:	61 1b       	sub	r22, r17
    5b50:	71 09       	sbc	r23, r1
    5b52:	3f c0       	rjmp	.+126    	; 0x5bd2 <__fpcmp_parts_f+0xac>
    5b54:	84 30       	cpi	r24, 0x04	; 4
    5b56:	21 f0       	breq	.+8      	; 0x5b60 <__fpcmp_parts_f+0x3a>
    5b58:	92 30       	cpi	r25, 0x02	; 2
    5b5a:	31 f4       	brne	.+12     	; 0x5b68 <__fpcmp_parts_f+0x42>
    5b5c:	82 30       	cpi	r24, 0x02	; 2
    5b5e:	b9 f1       	breq	.+110    	; 0x5bce <__fpcmp_parts_f+0xa8>
    5b60:	81 81       	ldd	r24, Z+1	; 0x01
    5b62:	88 23       	and	r24, r24
    5b64:	89 f1       	breq	.+98     	; 0x5bc8 <__fpcmp_parts_f+0xa2>
    5b66:	2d c0       	rjmp	.+90     	; 0x5bc2 <__fpcmp_parts_f+0x9c>
    5b68:	11 96       	adiw	r26, 0x01	; 1
    5b6a:	1c 91       	ld	r17, X
    5b6c:	11 97       	sbiw	r26, 0x01	; 1
    5b6e:	82 30       	cpi	r24, 0x02	; 2
    5b70:	f1 f0       	breq	.+60     	; 0x5bae <__fpcmp_parts_f+0x88>
    5b72:	81 81       	ldd	r24, Z+1	; 0x01
    5b74:	18 17       	cp	r17, r24
    5b76:	d9 f4       	brne	.+54     	; 0x5bae <__fpcmp_parts_f+0x88>
    5b78:	12 96       	adiw	r26, 0x02	; 2
    5b7a:	2d 91       	ld	r18, X+
    5b7c:	3c 91       	ld	r19, X
    5b7e:	13 97       	sbiw	r26, 0x03	; 3
    5b80:	82 81       	ldd	r24, Z+2	; 0x02
    5b82:	93 81       	ldd	r25, Z+3	; 0x03
    5b84:	82 17       	cp	r24, r18
    5b86:	93 07       	cpc	r25, r19
    5b88:	94 f0       	brlt	.+36     	; 0x5bae <__fpcmp_parts_f+0x88>
    5b8a:	28 17       	cp	r18, r24
    5b8c:	39 07       	cpc	r19, r25
    5b8e:	bc f0       	brlt	.+46     	; 0x5bbe <__fpcmp_parts_f+0x98>
    5b90:	14 96       	adiw	r26, 0x04	; 4
    5b92:	8d 91       	ld	r24, X+
    5b94:	9d 91       	ld	r25, X+
    5b96:	0d 90       	ld	r0, X+
    5b98:	bc 91       	ld	r27, X
    5b9a:	a0 2d       	mov	r26, r0
    5b9c:	24 81       	ldd	r18, Z+4	; 0x04
    5b9e:	35 81       	ldd	r19, Z+5	; 0x05
    5ba0:	46 81       	ldd	r20, Z+6	; 0x06
    5ba2:	57 81       	ldd	r21, Z+7	; 0x07
    5ba4:	28 17       	cp	r18, r24
    5ba6:	39 07       	cpc	r19, r25
    5ba8:	4a 07       	cpc	r20, r26
    5baa:	5b 07       	cpc	r21, r27
    5bac:	18 f4       	brcc	.+6      	; 0x5bb4 <__fpcmp_parts_f+0x8e>
    5bae:	11 23       	and	r17, r17
    5bb0:	41 f0       	breq	.+16     	; 0x5bc2 <__fpcmp_parts_f+0x9c>
    5bb2:	0a c0       	rjmp	.+20     	; 0x5bc8 <__fpcmp_parts_f+0xa2>
    5bb4:	82 17       	cp	r24, r18
    5bb6:	93 07       	cpc	r25, r19
    5bb8:	a4 07       	cpc	r26, r20
    5bba:	b5 07       	cpc	r27, r21
    5bbc:	40 f4       	brcc	.+16     	; 0x5bce <__fpcmp_parts_f+0xa8>
    5bbe:	11 23       	and	r17, r17
    5bc0:	19 f0       	breq	.+6      	; 0x5bc8 <__fpcmp_parts_f+0xa2>
    5bc2:	61 e0       	ldi	r22, 0x01	; 1
    5bc4:	70 e0       	ldi	r23, 0x00	; 0
    5bc6:	05 c0       	rjmp	.+10     	; 0x5bd2 <__fpcmp_parts_f+0xac>
    5bc8:	6f ef       	ldi	r22, 0xFF	; 255
    5bca:	7f ef       	ldi	r23, 0xFF	; 255
    5bcc:	02 c0       	rjmp	.+4      	; 0x5bd2 <__fpcmp_parts_f+0xac>
    5bce:	60 e0       	ldi	r22, 0x00	; 0
    5bd0:	70 e0       	ldi	r23, 0x00	; 0
    5bd2:	cb 01       	movw	r24, r22
    5bd4:	1f 91       	pop	r17
    5bd6:	08 95       	ret

00005bd8 <__mulsi3>:
    5bd8:	62 9f       	mul	r22, r18
    5bda:	d0 01       	movw	r26, r0
    5bdc:	73 9f       	mul	r23, r19
    5bde:	f0 01       	movw	r30, r0
    5be0:	82 9f       	mul	r24, r18
    5be2:	e0 0d       	add	r30, r0
    5be4:	f1 1d       	adc	r31, r1
    5be6:	64 9f       	mul	r22, r20
    5be8:	e0 0d       	add	r30, r0
    5bea:	f1 1d       	adc	r31, r1
    5bec:	92 9f       	mul	r25, r18
    5bee:	f0 0d       	add	r31, r0
    5bf0:	83 9f       	mul	r24, r19
    5bf2:	f0 0d       	add	r31, r0
    5bf4:	74 9f       	mul	r23, r20
    5bf6:	f0 0d       	add	r31, r0
    5bf8:	65 9f       	mul	r22, r21
    5bfa:	f0 0d       	add	r31, r0
    5bfc:	99 27       	eor	r25, r25
    5bfe:	72 9f       	mul	r23, r18
    5c00:	b0 0d       	add	r27, r0
    5c02:	e1 1d       	adc	r30, r1
    5c04:	f9 1f       	adc	r31, r25
    5c06:	63 9f       	mul	r22, r19
    5c08:	b0 0d       	add	r27, r0
    5c0a:	e1 1d       	adc	r30, r1
    5c0c:	f9 1f       	adc	r31, r25
    5c0e:	bd 01       	movw	r22, r26
    5c10:	cf 01       	movw	r24, r30
    5c12:	11 24       	eor	r1, r1
    5c14:	08 95       	ret

00005c16 <__udivmodhi4>:
    5c16:	aa 1b       	sub	r26, r26
    5c18:	bb 1b       	sub	r27, r27
    5c1a:	51 e1       	ldi	r21, 0x11	; 17
    5c1c:	07 c0       	rjmp	.+14     	; 0x5c2c <__udivmodhi4_ep>

00005c1e <__udivmodhi4_loop>:
    5c1e:	aa 1f       	adc	r26, r26
    5c20:	bb 1f       	adc	r27, r27
    5c22:	a6 17       	cp	r26, r22
    5c24:	b7 07       	cpc	r27, r23
    5c26:	10 f0       	brcs	.+4      	; 0x5c2c <__udivmodhi4_ep>
    5c28:	a6 1b       	sub	r26, r22
    5c2a:	b7 0b       	sbc	r27, r23

00005c2c <__udivmodhi4_ep>:
    5c2c:	88 1f       	adc	r24, r24
    5c2e:	99 1f       	adc	r25, r25
    5c30:	5a 95       	dec	r21
    5c32:	a9 f7       	brne	.-22     	; 0x5c1e <__udivmodhi4_loop>
    5c34:	80 95       	com	r24
    5c36:	90 95       	com	r25
    5c38:	bc 01       	movw	r22, r24
    5c3a:	cd 01       	movw	r24, r26
    5c3c:	08 95       	ret

00005c3e <__divmodhi4>:
    5c3e:	97 fb       	bst	r25, 7
    5c40:	09 2e       	mov	r0, r25
    5c42:	07 26       	eor	r0, r23
    5c44:	0a d0       	rcall	.+20     	; 0x5c5a <__divmodhi4_neg1>
    5c46:	77 fd       	sbrc	r23, 7
    5c48:	04 d0       	rcall	.+8      	; 0x5c52 <__divmodhi4_neg2>
    5c4a:	e5 df       	rcall	.-54     	; 0x5c16 <__udivmodhi4>
    5c4c:	06 d0       	rcall	.+12     	; 0x5c5a <__divmodhi4_neg1>
    5c4e:	00 20       	and	r0, r0
    5c50:	1a f4       	brpl	.+6      	; 0x5c58 <__divmodhi4_exit>

00005c52 <__divmodhi4_neg2>:
    5c52:	70 95       	com	r23
    5c54:	61 95       	neg	r22
    5c56:	7f 4f       	sbci	r23, 0xFF	; 255

00005c58 <__divmodhi4_exit>:
    5c58:	08 95       	ret

00005c5a <__divmodhi4_neg1>:
    5c5a:	f6 f7       	brtc	.-4      	; 0x5c58 <__divmodhi4_exit>
    5c5c:	90 95       	com	r25
    5c5e:	81 95       	neg	r24
    5c60:	9f 4f       	sbci	r25, 0xFF	; 255
    5c62:	08 95       	ret

00005c64 <__udivmodsi4>:
    5c64:	a1 e2       	ldi	r26, 0x21	; 33
    5c66:	1a 2e       	mov	r1, r26
    5c68:	aa 1b       	sub	r26, r26
    5c6a:	bb 1b       	sub	r27, r27
    5c6c:	fd 01       	movw	r30, r26
    5c6e:	0d c0       	rjmp	.+26     	; 0x5c8a <__udivmodsi4_ep>

00005c70 <__udivmodsi4_loop>:
    5c70:	aa 1f       	adc	r26, r26
    5c72:	bb 1f       	adc	r27, r27
    5c74:	ee 1f       	adc	r30, r30
    5c76:	ff 1f       	adc	r31, r31
    5c78:	a2 17       	cp	r26, r18
    5c7a:	b3 07       	cpc	r27, r19
    5c7c:	e4 07       	cpc	r30, r20
    5c7e:	f5 07       	cpc	r31, r21
    5c80:	20 f0       	brcs	.+8      	; 0x5c8a <__udivmodsi4_ep>
    5c82:	a2 1b       	sub	r26, r18
    5c84:	b3 0b       	sbc	r27, r19
    5c86:	e4 0b       	sbc	r30, r20
    5c88:	f5 0b       	sbc	r31, r21

00005c8a <__udivmodsi4_ep>:
    5c8a:	66 1f       	adc	r22, r22
    5c8c:	77 1f       	adc	r23, r23
    5c8e:	88 1f       	adc	r24, r24
    5c90:	99 1f       	adc	r25, r25
    5c92:	1a 94       	dec	r1
    5c94:	69 f7       	brne	.-38     	; 0x5c70 <__udivmodsi4_loop>
    5c96:	60 95       	com	r22
    5c98:	70 95       	com	r23
    5c9a:	80 95       	com	r24
    5c9c:	90 95       	com	r25
    5c9e:	9b 01       	movw	r18, r22
    5ca0:	ac 01       	movw	r20, r24
    5ca2:	bd 01       	movw	r22, r26
    5ca4:	cf 01       	movw	r24, r30
    5ca6:	08 95       	ret

00005ca8 <__prologue_saves__>:
    5ca8:	2f 92       	push	r2
    5caa:	3f 92       	push	r3
    5cac:	4f 92       	push	r4
    5cae:	5f 92       	push	r5
    5cb0:	6f 92       	push	r6
    5cb2:	7f 92       	push	r7
    5cb4:	8f 92       	push	r8
    5cb6:	9f 92       	push	r9
    5cb8:	af 92       	push	r10
    5cba:	bf 92       	push	r11
    5cbc:	cf 92       	push	r12
    5cbe:	df 92       	push	r13
    5cc0:	ef 92       	push	r14
    5cc2:	ff 92       	push	r15
    5cc4:	0f 93       	push	r16
    5cc6:	1f 93       	push	r17
    5cc8:	cf 93       	push	r28
    5cca:	df 93       	push	r29
    5ccc:	cd b7       	in	r28, 0x3d	; 61
    5cce:	de b7       	in	r29, 0x3e	; 62
    5cd0:	ca 1b       	sub	r28, r26
    5cd2:	db 0b       	sbc	r29, r27
    5cd4:	0f b6       	in	r0, 0x3f	; 63
    5cd6:	f8 94       	cli
    5cd8:	de bf       	out	0x3e, r29	; 62
    5cda:	0f be       	out	0x3f, r0	; 63
    5cdc:	cd bf       	out	0x3d, r28	; 61
    5cde:	09 94       	ijmp

00005ce0 <__epilogue_restores__>:
    5ce0:	2a 88       	ldd	r2, Y+18	; 0x12
    5ce2:	39 88       	ldd	r3, Y+17	; 0x11
    5ce4:	48 88       	ldd	r4, Y+16	; 0x10
    5ce6:	5f 84       	ldd	r5, Y+15	; 0x0f
    5ce8:	6e 84       	ldd	r6, Y+14	; 0x0e
    5cea:	7d 84       	ldd	r7, Y+13	; 0x0d
    5cec:	8c 84       	ldd	r8, Y+12	; 0x0c
    5cee:	9b 84       	ldd	r9, Y+11	; 0x0b
    5cf0:	aa 84       	ldd	r10, Y+10	; 0x0a
    5cf2:	b9 84       	ldd	r11, Y+9	; 0x09
    5cf4:	c8 84       	ldd	r12, Y+8	; 0x08
    5cf6:	df 80       	ldd	r13, Y+7	; 0x07
    5cf8:	ee 80       	ldd	r14, Y+6	; 0x06
    5cfa:	fd 80       	ldd	r15, Y+5	; 0x05
    5cfc:	0c 81       	ldd	r16, Y+4	; 0x04
    5cfe:	1b 81       	ldd	r17, Y+3	; 0x03
    5d00:	aa 81       	ldd	r26, Y+2	; 0x02
    5d02:	b9 81       	ldd	r27, Y+1	; 0x01
    5d04:	ce 0f       	add	r28, r30
    5d06:	d1 1d       	adc	r29, r1
    5d08:	0f b6       	in	r0, 0x3f	; 63
    5d0a:	f8 94       	cli
    5d0c:	de bf       	out	0x3e, r29	; 62
    5d0e:	0f be       	out	0x3f, r0	; 63
    5d10:	cd bf       	out	0x3d, r28	; 61
    5d12:	ed 01       	movw	r28, r26
    5d14:	08 95       	ret

00005d16 <__tablejump2__>:
    5d16:	ee 0f       	add	r30, r30
    5d18:	ff 1f       	adc	r31, r31

00005d1a <__tablejump__>:
    5d1a:	05 90       	lpm	r0, Z+
    5d1c:	f4 91       	lpm	r31, Z+
    5d1e:	e0 2d       	mov	r30, r0
    5d20:	09 94       	ijmp

00005d22 <_exit>:
    5d22:	f8 94       	cli

00005d24 <__stop_program>:
    5d24:	ff cf       	rjmp	.-2      	; 0x5d24 <__stop_program>
