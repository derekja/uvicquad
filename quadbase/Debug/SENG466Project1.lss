
SENG466Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000398  00800200  00004956  000049ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c5  00800598  00800598  00004d82  2**0
                  ALLOC
  3 .stab         00004998  00000000  00000000  00004d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000035a0  00000000  00000000  0000971c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 01 	jmp	0x208	; 0x208 <__ctors_end>
       4:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__vector_1>
       8:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__vector_2>
       c:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__vector_3>
      10:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__vector_4>
      14:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__vector_5>
      18:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__vector_6>
      1c:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__vector_7>
      20:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__vector_8>
      24:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      28:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      30:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      34:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      38:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      3c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      40:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      44:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      4c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      50:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      54:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      58:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      5c:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__vector_23>
      60:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      64:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__vector_25>
      68:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      6c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      70:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      74:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      78:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      7c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      80:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      84:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      8c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      90:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__vector_36>
      94:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      9c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      bc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      cc:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__vector_51>
      d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d8:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__vector_54>
      dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>

000000e4 <port_to_mode_PGM>:
      e4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
      f4:	01 01 00 00 04 01 07 01 0a 01                       ..........

000000fe <port_to_output_PGM>:
      fe:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     10e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000118 <port_to_input_PGM>:
     118:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     128:	00 01 00 00 03 01 06 01 09 01                       ..........

00000132 <digital_pin_to_port_PGM>:
     132:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     142:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     152:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     162:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     172:	0b 0b 0b 0b 0b 0b                                   ......

00000178 <digital_pin_to_bit_mask_PGM>:
     178:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     188:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     198:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b8:	04 08 10 20 40 80                                   ... @.

000001be <digital_pin_to_timer_PGM>:
     1be:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...

00000204 <__ctors_start>:
     204:	3c 08       	sbc	r3, r12
     206:	52 15       	cp	r21, r2

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	d1 e2       	ldi	r29, 0x21	; 33
     210:	de bf       	out	0x3e, r29	; 62
     212:	cd bf       	out	0x3d, r28	; 61

00000214 <__do_copy_data>:
     214:	15 e0       	ldi	r17, 0x05	; 5
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b2 e0       	ldi	r27, 0x02	; 2
     21a:	e6 e5       	ldi	r30, 0x56	; 86
     21c:	f9 e4       	ldi	r31, 0x49	; 73
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a8 39       	cpi	r26, 0x98	; 152
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	18 e0       	ldi	r17, 0x08	; 8
     230:	a8 e9       	ldi	r26, 0x98	; 152
     232:	b5 e0       	ldi	r27, 0x05	; 5
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	ad 35       	cpi	r26, 0x5D	; 93
     23a:	b1 07       	cpc	r27, r17
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>

0000023e <__do_global_ctors>:
     23e:	12 e0       	ldi	r17, 0x02	; 2
     240:	c8 e0       	ldi	r28, 0x08	; 8
     242:	d2 e0       	ldi	r29, 0x02	; 2
     244:	04 c0       	rjmp	.+8      	; 0x24e <.do_global_ctors_start>

00000246 <.do_global_ctors_loop>:
     246:	22 97       	sbiw	r28, 0x02	; 2
     248:	fe 01       	movw	r30, r28
     24a:	0e 94 a5 24 	call	0x494a	; 0x494a <__tablejump__>

0000024e <.do_global_ctors_start>:
     24e:	c4 30       	cpi	r28, 0x04	; 4
     250:	d1 07       	cpc	r29, r17
     252:	c9 f7       	brne	.-14     	; 0x246 <.do_global_ctors_loop>
     254:	0e 94 2c 09 	call	0x1258	; 0x1258 <main>
     258:	0c 94 a9 24 	jmp	0x4952	; 0x4952 <_exit>

0000025c <__bad_interrupt>:
     25c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000260 <_ZN5PrintC2Ev>:
#define OCT 8
#define BIN 2
#define BYTE 0

class Print
{
     260:	df 93       	push	r29
     262:	cf 93       	push	r28
     264:	00 d0       	rcall	.+0      	; 0x266 <_ZN5PrintC2Ev+0x6>
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	9a 83       	std	Y+2, r25	; 0x02
     26c:	89 83       	std	Y+1, r24	; 0x01
     26e:	e9 81       	ldd	r30, Y+1	; 0x01
     270:	fa 81       	ldd	r31, Y+2	; 0x02
     272:	89 e8       	ldi	r24, 0x89	; 137
     274:	94 e0       	ldi	r25, 0x04	; 4
     276:	91 83       	std	Z+1, r25	; 0x01
     278:	80 83       	st	Z, r24
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	cf 91       	pop	r28
     280:	df 91       	pop	r29
     282:	08 95       	ret

00000284 <_ZN13LiquidCrystal11pulseEnableEv>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     284:	df 93       	push	r29
     286:	cf 93       	push	r28
     288:	00 d0       	rcall	.+0      	; 0x28a <_ZN13LiquidCrystal11pulseEnableEv+0x6>
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	9a 83       	std	Y+2, r25	; 0x02
     290:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
     292:	e9 81       	ldd	r30, Y+1	; 0x01
     294:	fa 81       	ldd	r31, Y+2	; 0x02
     296:	84 81       	ldd	r24, Z+4	; 0x04
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  delayMicroseconds(1);    
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
     2a6:	e9 81       	ldd	r30, Y+1	; 0x01
     2a8:	fa 81       	ldd	r31, Y+2	; 0x02
     2aa:	84 81       	ldd	r24, Z+4	; 0x04
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
     2ba:	e9 81       	ldd	r30, Y+1	; 0x01
     2bc:	fa 81       	ldd	r31, Y+2	; 0x02
     2be:	84 81       	ldd	r24, Z+4	; 0x04
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
     2c6:	84 e6       	ldi	r24, 0x64	; 100
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
}
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	cf 91       	pop	r28
     2d4:	df 91       	pop	r29
     2d6:	08 95       	ret

000002d8 <_ZN13LiquidCrystal10write8bitsEh>:
  }

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
     2d8:	df 93       	push	r29
     2da:	cf 93       	push	r28
     2dc:	00 d0       	rcall	.+0      	; 0x2de <_ZN13LiquidCrystal10write8bitsEh+0x6>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <_ZN13LiquidCrystal10write8bitsEh+0x8>
     2e0:	0f 92       	push	r0
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	9c 83       	std	Y+4, r25	; 0x04
     2e8:	8b 83       	std	Y+3, r24	; 0x03
     2ea:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
     2ec:	1a 82       	std	Y+2, r1	; 0x02
     2ee:	19 82       	std	Y+1, r1	; 0x01
     2f0:	29 c0       	rjmp	.+82     	; 0x344 <_ZN13LiquidCrystal10write8bitsEh+0x6c>
    pinMode(_data_pins[i], OUTPUT);
     2f2:	29 81       	ldd	r18, Y+1	; 0x01
     2f4:	3a 81       	ldd	r19, Y+2	; 0x02
     2f6:	8b 81       	ldd	r24, Y+3	; 0x03
     2f8:	9c 81       	ldd	r25, Y+4	; 0x04
     2fa:	82 0f       	add	r24, r18
     2fc:	93 1f       	adc	r25, r19
     2fe:	fc 01       	movw	r30, r24
     300:	35 96       	adiw	r30, 0x05	; 5
     302:	80 81       	ld	r24, Z
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     30a:	29 81       	ldd	r18, Y+1	; 0x01
     30c:	3a 81       	ldd	r19, Y+2	; 0x02
     30e:	8b 81       	ldd	r24, Y+3	; 0x03
     310:	9c 81       	ldd	r25, Y+4	; 0x04
     312:	82 0f       	add	r24, r18
     314:	93 1f       	adc	r25, r19
     316:	fc 01       	movw	r30, r24
     318:	35 96       	adiw	r30, 0x05	; 5
     31a:	20 81       	ld	r18, Z
     31c:	8d 81       	ldd	r24, Y+5	; 0x05
     31e:	88 2f       	mov	r24, r24
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	09 80       	ldd	r0, Y+1	; 0x01
     324:	02 c0       	rjmp	.+4      	; 0x32a <_ZN13LiquidCrystal10write8bitsEh+0x52>
     326:	95 95       	asr	r25
     328:	87 95       	ror	r24
     32a:	0a 94       	dec	r0
     32c:	e2 f7       	brpl	.-8      	; 0x326 <_ZN13LiquidCrystal10write8bitsEh+0x4e>
     32e:	98 2f       	mov	r25, r24
     330:	91 70       	andi	r25, 0x01	; 1
     332:	82 2f       	mov	r24, r18
     334:	69 2f       	mov	r22, r25
     336:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	9a 81       	ldd	r25, Y+2	; 0x02
     348:	88 30       	cpi	r24, 0x08	; 8
     34a:	91 05       	cpc	r25, r1
     34c:	94 f2       	brlt	.-92     	; 0x2f2 <_ZN13LiquidCrystal10write8bitsEh+0x1a>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	0e 94 42 01 	call	0x284	; 0x284 <_ZN13LiquidCrystal11pulseEnableEv>
}
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	cf 91       	pop	r28
     362:	df 91       	pop	r29
     364:	08 95       	ret

00000366 <_ZN13LiquidCrystal10write4bitsEh>:
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
     366:	df 93       	push	r29
     368:	cf 93       	push	r28
     36a:	00 d0       	rcall	.+0      	; 0x36c <_ZN13LiquidCrystal10write4bitsEh+0x6>
     36c:	00 d0       	rcall	.+0      	; 0x36e <_ZN13LiquidCrystal10write4bitsEh+0x8>
     36e:	0f 92       	push	r0
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	9c 83       	std	Y+4, r25	; 0x04
     376:	8b 83       	std	Y+3, r24	; 0x03
     378:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
     37a:	1a 82       	std	Y+2, r1	; 0x02
     37c:	19 82       	std	Y+1, r1	; 0x01
     37e:	29 c0       	rjmp	.+82     	; 0x3d2 <_ZN13LiquidCrystal10write4bitsEh+0x6c>
    pinMode(_data_pins[i], OUTPUT);
     380:	29 81       	ldd	r18, Y+1	; 0x01
     382:	3a 81       	ldd	r19, Y+2	; 0x02
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	9c 81       	ldd	r25, Y+4	; 0x04
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	fc 01       	movw	r30, r24
     38e:	35 96       	adiw	r30, 0x05	; 5
     390:	80 81       	ld	r24, Z
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     398:	29 81       	ldd	r18, Y+1	; 0x01
     39a:	3a 81       	ldd	r19, Y+2	; 0x02
     39c:	8b 81       	ldd	r24, Y+3	; 0x03
     39e:	9c 81       	ldd	r25, Y+4	; 0x04
     3a0:	82 0f       	add	r24, r18
     3a2:	93 1f       	adc	r25, r19
     3a4:	fc 01       	movw	r30, r24
     3a6:	35 96       	adiw	r30, 0x05	; 5
     3a8:	20 81       	ld	r18, Z
     3aa:	8d 81       	ldd	r24, Y+5	; 0x05
     3ac:	88 2f       	mov	r24, r24
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	09 80       	ldd	r0, Y+1	; 0x01
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <_ZN13LiquidCrystal10write4bitsEh+0x52>
     3b4:	95 95       	asr	r25
     3b6:	87 95       	ror	r24
     3b8:	0a 94       	dec	r0
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <_ZN13LiquidCrystal10write4bitsEh+0x4e>
     3bc:	98 2f       	mov	r25, r24
     3be:	91 70       	andi	r25, 0x01	; 1
     3c0:	82 2f       	mov	r24, r18
     3c2:	69 2f       	mov	r22, r25
     3c4:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	9a 81       	ldd	r25, Y+2	; 0x02
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	9a 83       	std	Y+2, r25	; 0x02
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	84 30       	cpi	r24, 0x04	; 4
     3d8:	91 05       	cpc	r25, r1
     3da:	94 f2       	brlt	.-92     	; 0x380 <_ZN13LiquidCrystal10write4bitsEh+0x1a>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	9c 81       	ldd	r25, Y+4	; 0x04
     3e0:	0e 94 42 01 	call	0x284	; 0x284 <_ZN13LiquidCrystal11pulseEnableEv>
}
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	cf 91       	pop	r28
     3f0:	df 91       	pop	r29
     3f2:	08 95       	ret

000003f4 <_ZN13LiquidCrystal4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     3f4:	df 93       	push	r29
     3f6:	cf 93       	push	r28
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <_ZN13LiquidCrystal4sendEhh+0x6>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <_ZN13LiquidCrystal4sendEhh+0x8>
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	9a 83       	std	Y+2, r25	; 0x02
     402:	89 83       	std	Y+1, r24	; 0x01
     404:	6b 83       	std	Y+3, r22	; 0x03
     406:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
     408:	e9 81       	ldd	r30, Y+1	; 0x01
     40a:	fa 81       	ldd	r31, Y+2	; 0x02
     40c:	82 81       	ldd	r24, Z+2	; 0x02
     40e:	6c 81       	ldd	r22, Y+4	; 0x04
     410:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != -1) { 
    digitalWrite(_rw_pin, LOW);
     414:	e9 81       	ldd	r30, Y+1	; 0x01
     416:	fa 81       	ldd	r31, Y+2	; 0x02
     418:	83 81       	ldd	r24, Z+3	; 0x03
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     420:	e9 81       	ldd	r30, Y+1	; 0x01
     422:	fa 81       	ldd	r31, Y+2	; 0x02
     424:	85 85       	ldd	r24, Z+13	; 0x0d
     426:	88 2f       	mov	r24, r24
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	80 71       	andi	r24, 0x10	; 16
     42c:	90 70       	andi	r25, 0x00	; 0
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	31 f0       	breq	.+12     	; 0x43e <_ZN13LiquidCrystal4sendEhh+0x4a>
    write8bits(value); 
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	6b 81       	ldd	r22, Y+3	; 0x03
     438:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN13LiquidCrystal10write8bitsEh>
     43c:	16 c0       	rjmp	.+44     	; 0x46a <_ZN13LiquidCrystal4sendEhh+0x76>
  } else {
    write4bits(value>>4);
     43e:	8b 81       	ldd	r24, Y+3	; 0x03
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	95 95       	asr	r25
     446:	87 95       	ror	r24
     448:	95 95       	asr	r25
     44a:	87 95       	ror	r24
     44c:	95 95       	asr	r25
     44e:	87 95       	ror	r24
     450:	95 95       	asr	r25
     452:	87 95       	ror	r24
     454:	28 2f       	mov	r18, r24
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	9a 81       	ldd	r25, Y+2	; 0x02
     45a:	62 2f       	mov	r22, r18
     45c:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	9a 81       	ldd	r25, Y+2	; 0x02
     464:	6b 81       	ldd	r22, Y+3	; 0x03
     466:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	cf 91       	pop	r28
     474:	df 91       	pop	r29
     476:	08 95       	ret

00000478 <_ZN13LiquidCrystal5writeEh>:

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline void LiquidCrystal::write(uint8_t value) {
     478:	df 93       	push	r29
     47a:	cf 93       	push	r28
     47c:	00 d0       	rcall	.+0      	; 0x47e <_ZN13LiquidCrystal5writeEh+0x6>
     47e:	0f 92       	push	r0
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	9a 83       	std	Y+2, r25	; 0x02
     486:	89 83       	std	Y+1, r24	; 0x01
     488:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	6b 81       	ldd	r22, Y+3	; 0x03
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN13LiquidCrystal4sendEhh>
}
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	cf 91       	pop	r28
     49e:	df 91       	pop	r29
     4a0:	08 95       	ret

000004a2 <_ZN13LiquidCrystal7commandEh>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
     4a2:	df 93       	push	r29
     4a4:	cf 93       	push	r28
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <_ZN13LiquidCrystal7commandEh+0x6>
     4a8:	0f 92       	push	r0
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	6b 81       	ldd	r22, Y+3	; 0x03
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN13LiquidCrystal4sendEhh>
}
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	08 95       	ret

000004cc <_ZN13LiquidCrystal10createCharEhPh>:
  command(LCD_ENTRYMODESET | _displaymode);
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	27 97       	sbiw	r28, 0x07	; 7
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	9c 83       	std	Y+4, r25	; 0x04
     4e2:	8b 83       	std	Y+3, r24	; 0x03
     4e4:	6d 83       	std	Y+5, r22	; 0x05
     4e6:	5f 83       	std	Y+7, r21	; 0x07
     4e8:	4e 83       	std	Y+6, r20	; 0x06
  location &= 0x7; // we only have 8 locations 0-7
     4ea:	8d 81       	ldd	r24, Y+5	; 0x05
     4ec:	87 70       	andi	r24, 0x07	; 7
     4ee:	8d 83       	std	Y+5, r24	; 0x05
  command(LCD_SETCGRAMADDR | (location << 3));
     4f0:	8d 81       	ldd	r24, Y+5	; 0x05
     4f2:	88 2f       	mov	r24, r24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	88 0f       	add	r24, r24
     4fc:	99 1f       	adc	r25, r25
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	80 64       	ori	r24, 0x40	; 64
     504:	28 2f       	mov	r18, r24
     506:	8b 81       	ldd	r24, Y+3	; 0x03
     508:	9c 81       	ldd	r25, Y+4	; 0x04
     50a:	62 2f       	mov	r22, r18
     50c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
  for (int i=0; i<8; i++) {
     510:	1a 82       	std	Y+2, r1	; 0x02
     512:	19 82       	std	Y+1, r1	; 0x01
     514:	19 c0       	rjmp	.+50     	; 0x548 <_ZN13LiquidCrystal10createCharEhPh+0x7c>
    write(charmap[i]);
     516:	eb 81       	ldd	r30, Y+3	; 0x03
     518:	fc 81       	ldd	r31, Y+4	; 0x04
     51a:	01 90       	ld	r0, Z+
     51c:	f0 81       	ld	r31, Z
     51e:	e0 2d       	mov	r30, r0
     520:	40 81       	ld	r20, Z
     522:	51 81       	ldd	r21, Z+1	; 0x01
     524:	29 81       	ldd	r18, Y+1	; 0x01
     526:	3a 81       	ldd	r19, Y+2	; 0x02
     528:	8e 81       	ldd	r24, Y+6	; 0x06
     52a:	9f 81       	ldd	r25, Y+7	; 0x07
     52c:	fc 01       	movw	r30, r24
     52e:	e2 0f       	add	r30, r18
     530:	f3 1f       	adc	r31, r19
     532:	20 81       	ld	r18, Z
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	62 2f       	mov	r22, r18
     53a:	fa 01       	movw	r30, r20
     53c:	09 95       	icall
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	9a 83       	std	Y+2, r25	; 0x02
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	9a 81       	ldd	r25, Y+2	; 0x02
     54c:	88 30       	cpi	r24, 0x08	; 8
     54e:	91 05       	cpc	r25, r1
     550:	14 f3       	brlt	.-60     	; 0x516 <_ZN13LiquidCrystal10createCharEhPh+0x4a>
    write(charmap[i]);
  }
}
     552:	27 96       	adiw	r28, 0x07	; 7
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	cf 91       	pop	r28
     560:	df 91       	pop	r29
     562:	08 95       	ret

00000564 <_ZN13LiquidCrystal12noAutoscrollEv>:
  _displaymode |= LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will 'left justify' text from the cursor
void LiquidCrystal::noAutoscroll(void) {
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	00 d0       	rcall	.+0      	; 0x56a <_ZN13LiquidCrystal12noAutoscrollEv+0x6>
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	9a 83       	std	Y+2, r25	; 0x02
     570:	89 83       	std	Y+1, r24	; 0x01
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
     572:	e9 81       	ldd	r30, Y+1	; 0x01
     574:	fa 81       	ldd	r31, Y+2	; 0x02
     576:	87 85       	ldd	r24, Z+15	; 0x0f
     578:	8e 7f       	andi	r24, 0xFE	; 254
     57a:	e9 81       	ldd	r30, Y+1	; 0x01
     57c:	fa 81       	ldd	r31, Y+2	; 0x02
     57e:	87 87       	std	Z+15, r24	; 0x0f
  command(LCD_ENTRYMODESET | _displaymode);
     580:	e9 81       	ldd	r30, Y+1	; 0x01
     582:	fa 81       	ldd	r31, Y+2	; 0x02
     584:	87 85       	ldd	r24, Z+15	; 0x0f
     586:	28 2f       	mov	r18, r24
     588:	24 60       	ori	r18, 0x04	; 4
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	9a 81       	ldd	r25, Y+2	; 0x02
     58e:	62 2f       	mov	r22, r18
     590:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <_ZN13LiquidCrystal10autoscrollEv>:
  _displaymode &= ~LCD_ENTRYLEFT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will 'right justify' text from the cursor
void LiquidCrystal::autoscroll(void) {
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <_ZN13LiquidCrystal10autoscrollEv+0x6>
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	9a 83       	std	Y+2, r25	; 0x02
     5aa:	89 83       	std	Y+1, r24	; 0x01
  _displaymode |= LCD_ENTRYSHIFTINCREMENT;
     5ac:	e9 81       	ldd	r30, Y+1	; 0x01
     5ae:	fa 81       	ldd	r31, Y+2	; 0x02
     5b0:	87 85       	ldd	r24, Z+15	; 0x0f
     5b2:	81 60       	ori	r24, 0x01	; 1
     5b4:	e9 81       	ldd	r30, Y+1	; 0x01
     5b6:	fa 81       	ldd	r31, Y+2	; 0x02
     5b8:	87 87       	std	Z+15, r24	; 0x0f
  command(LCD_ENTRYMODESET | _displaymode);
     5ba:	e9 81       	ldd	r30, Y+1	; 0x01
     5bc:	fa 81       	ldd	r31, Y+2	; 0x02
     5be:	87 85       	ldd	r24, Z+15	; 0x0f
     5c0:	28 2f       	mov	r18, r24
     5c2:	24 60       	ori	r18, 0x04	; 4
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	9a 81       	ldd	r25, Y+2	; 0x02
     5c8:	62 2f       	mov	r22, r18
     5ca:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	cf 91       	pop	r28
     5d4:	df 91       	pop	r29
     5d6:	08 95       	ret

000005d8 <_ZN13LiquidCrystal11rightToLeftEv>:
  _displaymode |= LCD_ENTRYLEFT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This is for text that flows Right to Left
void LiquidCrystal::rightToLeft(void) {
     5d8:	df 93       	push	r29
     5da:	cf 93       	push	r28
     5dc:	00 d0       	rcall	.+0      	; 0x5de <_ZN13LiquidCrystal11rightToLeftEv+0x6>
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	89 83       	std	Y+1, r24	; 0x01
  _displaymode &= ~LCD_ENTRYLEFT;
     5e6:	e9 81       	ldd	r30, Y+1	; 0x01
     5e8:	fa 81       	ldd	r31, Y+2	; 0x02
     5ea:	87 85       	ldd	r24, Z+15	; 0x0f
     5ec:	8d 7f       	andi	r24, 0xFD	; 253
     5ee:	e9 81       	ldd	r30, Y+1	; 0x01
     5f0:	fa 81       	ldd	r31, Y+2	; 0x02
     5f2:	87 87       	std	Z+15, r24	; 0x0f
  command(LCD_ENTRYMODESET | _displaymode);
     5f4:	e9 81       	ldd	r30, Y+1	; 0x01
     5f6:	fa 81       	ldd	r31, Y+2	; 0x02
     5f8:	87 85       	ldd	r24, Z+15	; 0x0f
     5fa:	28 2f       	mov	r18, r24
     5fc:	24 60       	ori	r18, 0x04	; 4
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	62 2f       	mov	r22, r18
     604:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	cf 91       	pop	r28
     60e:	df 91       	pop	r29
     610:	08 95       	ret

00000612 <_ZN13LiquidCrystal11leftToRightEv>:
void LiquidCrystal::scrollDisplayRight(void) {
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

// This is for text that flows Left to Right
void LiquidCrystal::leftToRight(void) {
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	00 d0       	rcall	.+0      	; 0x618 <_ZN13LiquidCrystal11leftToRightEv+0x6>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	9a 83       	std	Y+2, r25	; 0x02
     61e:	89 83       	std	Y+1, r24	; 0x01
  _displaymode |= LCD_ENTRYLEFT;
     620:	e9 81       	ldd	r30, Y+1	; 0x01
     622:	fa 81       	ldd	r31, Y+2	; 0x02
     624:	87 85       	ldd	r24, Z+15	; 0x0f
     626:	82 60       	ori	r24, 0x02	; 2
     628:	e9 81       	ldd	r30, Y+1	; 0x01
     62a:	fa 81       	ldd	r31, Y+2	; 0x02
     62c:	87 87       	std	Z+15, r24	; 0x0f
  command(LCD_ENTRYMODESET | _displaymode);
     62e:	e9 81       	ldd	r30, Y+1	; 0x01
     630:	fa 81       	ldd	r31, Y+2	; 0x02
     632:	87 85       	ldd	r24, Z+15	; 0x0f
     634:	28 2f       	mov	r18, r24
     636:	24 60       	ori	r18, 0x04	; 4
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	62 2f       	mov	r22, r18
     63e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	08 95       	ret

0000064c <_ZN13LiquidCrystal18scrollDisplayRightEv>:

// These commands scroll the display without changing the RAM
void LiquidCrystal::scrollDisplayLeft(void) {
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
}
void LiquidCrystal::scrollDisplayRight(void) {
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	00 d0       	rcall	.+0      	; 0x652 <_ZN13LiquidCrystal18scrollDisplayRightEv+0x6>
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	9a 83       	std	Y+2, r25	; 0x02
     658:	89 83       	std	Y+1, r24	; 0x01
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	6c e1       	ldi	r22, 0x1C	; 28
     660:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	cf 91       	pop	r28
     66a:	df 91       	pop	r29
     66c:	08 95       	ret

0000066e <_ZN13LiquidCrystal17scrollDisplayLeftEv>:
  _displaycontrol |= LCD_BLINKON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// These commands scroll the display without changing the RAM
void LiquidCrystal::scrollDisplayLeft(void) {
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	00 d0       	rcall	.+0      	; 0x674 <_ZN13LiquidCrystal17scrollDisplayLeftEv+0x6>
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	9a 83       	std	Y+2, r25	; 0x02
     67a:	89 83       	std	Y+1, r24	; 0x01
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	9a 81       	ldd	r25, Y+2	; 0x02
     680:	68 e1       	ldi	r22, 0x18	; 24
     682:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	cf 91       	pop	r28
     68c:	df 91       	pop	r29
     68e:	08 95       	ret

00000690 <_ZN13LiquidCrystal5blinkEv>:
// Turn on and off the blinking cursor
void LiquidCrystal::noBlink() {
  _displaycontrol &= ~LCD_BLINKON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::blink() {
     690:	df 93       	push	r29
     692:	cf 93       	push	r28
     694:	00 d0       	rcall	.+0      	; 0x696 <_ZN13LiquidCrystal5blinkEv+0x6>
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	9a 83       	std	Y+2, r25	; 0x02
     69c:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol |= LCD_BLINKON;
     69e:	e9 81       	ldd	r30, Y+1	; 0x01
     6a0:	fa 81       	ldd	r31, Y+2	; 0x02
     6a2:	86 85       	ldd	r24, Z+14	; 0x0e
     6a4:	81 60       	ori	r24, 0x01	; 1
     6a6:	e9 81       	ldd	r30, Y+1	; 0x01
     6a8:	fa 81       	ldd	r31, Y+2	; 0x02
     6aa:	86 87       	std	Z+14, r24	; 0x0e
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     6ac:	e9 81       	ldd	r30, Y+1	; 0x01
     6ae:	fa 81       	ldd	r31, Y+2	; 0x02
     6b0:	86 85       	ldd	r24, Z+14	; 0x0e
     6b2:	28 2f       	mov	r18, r24
     6b4:	28 60       	ori	r18, 0x08	; 8
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	62 2f       	mov	r22, r18
     6bc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	cf 91       	pop	r28
     6c6:	df 91       	pop	r29
     6c8:	08 95       	ret

000006ca <_ZN13LiquidCrystal7noBlinkEv>:
  _displaycontrol |= LCD_CURSORON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Turn on and off the blinking cursor
void LiquidCrystal::noBlink() {
     6ca:	df 93       	push	r29
     6cc:	cf 93       	push	r28
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <_ZN13LiquidCrystal7noBlinkEv+0x6>
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	9a 83       	std	Y+2, r25	; 0x02
     6d6:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol &= ~LCD_BLINKON;
     6d8:	e9 81       	ldd	r30, Y+1	; 0x01
     6da:	fa 81       	ldd	r31, Y+2	; 0x02
     6dc:	86 85       	ldd	r24, Z+14	; 0x0e
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	e9 81       	ldd	r30, Y+1	; 0x01
     6e2:	fa 81       	ldd	r31, Y+2	; 0x02
     6e4:	86 87       	std	Z+14, r24	; 0x0e
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     6e6:	e9 81       	ldd	r30, Y+1	; 0x01
     6e8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ea:	86 85       	ldd	r24, Z+14	; 0x0e
     6ec:	28 2f       	mov	r18, r24
     6ee:	28 60       	ori	r18, 0x08	; 8
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	9a 81       	ldd	r25, Y+2	; 0x02
     6f4:	62 2f       	mov	r22, r18
     6f6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	cf 91       	pop	r28
     700:	df 91       	pop	r29
     702:	08 95       	ret

00000704 <_ZN13LiquidCrystal6cursorEv>:
// Turns the underline cursor on/off
void LiquidCrystal::noCursor() {
  _displaycontrol &= ~LCD_CURSORON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::cursor() {
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	00 d0       	rcall	.+0      	; 0x70a <_ZN13LiquidCrystal6cursorEv+0x6>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	9a 83       	std	Y+2, r25	; 0x02
     710:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol |= LCD_CURSORON;
     712:	e9 81       	ldd	r30, Y+1	; 0x01
     714:	fa 81       	ldd	r31, Y+2	; 0x02
     716:	86 85       	ldd	r24, Z+14	; 0x0e
     718:	82 60       	ori	r24, 0x02	; 2
     71a:	e9 81       	ldd	r30, Y+1	; 0x01
     71c:	fa 81       	ldd	r31, Y+2	; 0x02
     71e:	86 87       	std	Z+14, r24	; 0x0e
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     720:	e9 81       	ldd	r30, Y+1	; 0x01
     722:	fa 81       	ldd	r31, Y+2	; 0x02
     724:	86 85       	ldd	r24, Z+14	; 0x0e
     726:	28 2f       	mov	r18, r24
     728:	28 60       	ori	r18, 0x08	; 8
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	9a 81       	ldd	r25, Y+2	; 0x02
     72e:	62 2f       	mov	r22, r18
     730:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	cf 91       	pop	r28
     73a:	df 91       	pop	r29
     73c:	08 95       	ret

0000073e <_ZN13LiquidCrystal8noCursorEv>:
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Turns the underline cursor on/off
void LiquidCrystal::noCursor() {
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	00 d0       	rcall	.+0      	; 0x744 <_ZN13LiquidCrystal8noCursorEv+0x6>
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol &= ~LCD_CURSORON;
     74c:	e9 81       	ldd	r30, Y+1	; 0x01
     74e:	fa 81       	ldd	r31, Y+2	; 0x02
     750:	86 85       	ldd	r24, Z+14	; 0x0e
     752:	8d 7f       	andi	r24, 0xFD	; 253
     754:	e9 81       	ldd	r30, Y+1	; 0x01
     756:	fa 81       	ldd	r31, Y+2	; 0x02
     758:	86 87       	std	Z+14, r24	; 0x0e
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     75a:	e9 81       	ldd	r30, Y+1	; 0x01
     75c:	fa 81       	ldd	r31, Y+2	; 0x02
     75e:	86 85       	ldd	r24, Z+14	; 0x0e
     760:	28 2f       	mov	r18, r24
     762:	28 60       	ori	r18, 0x08	; 8
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	9a 81       	ldd	r25, Y+2	; 0x02
     768:	62 2f       	mov	r22, r18
     76a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <_ZN13LiquidCrystal7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	00 d0       	rcall	.+0      	; 0x77e <_ZN13LiquidCrystal7displayEv+0x6>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	9a 83       	std	Y+2, r25	; 0x02
     784:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol |= LCD_DISPLAYON;
     786:	e9 81       	ldd	r30, Y+1	; 0x01
     788:	fa 81       	ldd	r31, Y+2	; 0x02
     78a:	86 85       	ldd	r24, Z+14	; 0x0e
     78c:	84 60       	ori	r24, 0x04	; 4
     78e:	e9 81       	ldd	r30, Y+1	; 0x01
     790:	fa 81       	ldd	r31, Y+2	; 0x02
     792:	86 87       	std	Z+14, r24	; 0x0e
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     794:	e9 81       	ldd	r30, Y+1	; 0x01
     796:	fa 81       	ldd	r31, Y+2	; 0x02
     798:	86 85       	ldd	r24, Z+14	; 0x0e
     79a:	28 2f       	mov	r18, r24
     79c:	28 60       	ori	r18, 0x08	; 8
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	62 2f       	mov	r22, r18
     7a4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	cf 91       	pop	r28
     7ae:	df 91       	pop	r29
     7b0:	08 95       	ret

000007b2 <_ZN13LiquidCrystal9noDisplayEv>:
  
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}

// Turn the display on/off (quickly)
void LiquidCrystal::noDisplay() {
     7b2:	df 93       	push	r29
     7b4:	cf 93       	push	r28
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <_ZN13LiquidCrystal9noDisplayEv+0x6>
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	89 83       	std	Y+1, r24	; 0x01
  _displaycontrol &= ~LCD_DISPLAYON;
     7c0:	e9 81       	ldd	r30, Y+1	; 0x01
     7c2:	fa 81       	ldd	r31, Y+2	; 0x02
     7c4:	86 85       	ldd	r24, Z+14	; 0x0e
     7c6:	8b 7f       	andi	r24, 0xFB	; 251
     7c8:	e9 81       	ldd	r30, Y+1	; 0x01
     7ca:	fa 81       	ldd	r31, Y+2	; 0x02
     7cc:	86 87       	std	Z+14, r24	; 0x0e
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     7ce:	e9 81       	ldd	r30, Y+1	; 0x01
     7d0:	fa 81       	ldd	r31, Y+2	; 0x02
     7d2:	86 85       	ldd	r24, Z+14	; 0x0e
     7d4:	28 2f       	mov	r18, r24
     7d6:	28 60       	ori	r18, 0x08	; 8
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	9a 81       	ldd	r25, Y+2	; 0x02
     7dc:	62 2f       	mov	r22, r18
     7de:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	cf 91       	pop	r28
     7e8:	df 91       	pop	r29
     7ea:	08 95       	ret

000007ec <_ZN13LiquidCrystal9setCursorEhh>:
{
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
     7ec:	df 93       	push	r29
     7ee:	cf 93       	push	r28
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	61 97       	sbiw	r28, 0x11	; 17
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	9a 87       	std	Y+10, r25	; 0x0a
     802:	89 87       	std	Y+9, r24	; 0x09
     804:	6b 87       	std	Y+11, r22	; 0x0b
     806:	4c 87       	std	Y+12, r20	; 0x0c
{
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     808:	ce 01       	movw	r24, r28
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	9e 87       	std	Y+14, r25	; 0x0e
     80e:	8d 87       	std	Y+13, r24	; 0x0d
     810:	ea e0       	ldi	r30, 0x0A	; 10
     812:	f2 e0       	ldi	r31, 0x02	; 2
     814:	f8 8b       	std	Y+16, r31	; 0x10
     816:	ef 87       	std	Y+15, r30	; 0x0f
     818:	f8 e0       	ldi	r31, 0x08	; 8
     81a:	f9 8b       	std	Y+17, r31	; 0x11
     81c:	ef 85       	ldd	r30, Y+15	; 0x0f
     81e:	f8 89       	ldd	r31, Y+16	; 0x10
     820:	00 80       	ld	r0, Z
     822:	8f 85       	ldd	r24, Y+15	; 0x0f
     824:	98 89       	ldd	r25, Y+16	; 0x10
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	98 8b       	std	Y+16, r25	; 0x10
     82a:	8f 87       	std	Y+15, r24	; 0x0f
     82c:	ed 85       	ldd	r30, Y+13	; 0x0d
     82e:	fe 85       	ldd	r31, Y+14	; 0x0e
     830:	00 82       	st	Z, r0
     832:	8d 85       	ldd	r24, Y+13	; 0x0d
     834:	9e 85       	ldd	r25, Y+14	; 0x0e
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	9e 87       	std	Y+14, r25	; 0x0e
     83a:	8d 87       	std	Y+13, r24	; 0x0d
     83c:	99 89       	ldd	r25, Y+17	; 0x11
     83e:	91 50       	subi	r25, 0x01	; 1
     840:	99 8b       	std	Y+17, r25	; 0x11
     842:	e9 89       	ldd	r30, Y+17	; 0x11
     844:	ee 23       	and	r30, r30
     846:	51 f7       	brne	.-44     	; 0x81c <_ZN13LiquidCrystal9setCursorEhh+0x30>
  if ( row > _numlines ) {
     848:	e9 85       	ldd	r30, Y+9	; 0x09
     84a:	fa 85       	ldd	r31, Y+10	; 0x0a
     84c:	91 89       	ldd	r25, Z+17	; 0x11
     84e:	8c 85       	ldd	r24, Y+12	; 0x0c
     850:	98 17       	cp	r25, r24
     852:	28 f4       	brcc	.+10     	; 0x85e <_ZN13LiquidCrystal9setCursorEhh+0x72>
    row = _numlines-1;    // we count rows starting w/0
     854:	e9 85       	ldd	r30, Y+9	; 0x09
     856:	fa 85       	ldd	r31, Y+10	; 0x0a
     858:	81 89       	ldd	r24, Z+17	; 0x11
     85a:	81 50       	subi	r24, 0x01	; 1
     85c:	8c 87       	std	Y+12, r24	; 0x0c
  }
  
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     85e:	8c 85       	ldd	r24, Y+12	; 0x0c
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	9c 01       	movw	r18, r24
     866:	22 0f       	add	r18, r18
     868:	33 1f       	adc	r19, r19
     86a:	ce 01       	movw	r24, r28
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	fc 01       	movw	r30, r24
     870:	e2 0f       	add	r30, r18
     872:	f3 1f       	adc	r31, r19
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	98 2f       	mov	r25, r24
     87a:	8b 85       	ldd	r24, Y+11	; 0x0b
     87c:	89 0f       	add	r24, r25
     87e:	80 68       	ori	r24, 0x80	; 128
     880:	28 2f       	mov	r18, r24
     882:	89 85       	ldd	r24, Y+9	; 0x09
     884:	9a 85       	ldd	r25, Y+10	; 0x0a
     886:	62 2f       	mov	r22, r18
     888:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
}
     88c:	61 96       	adiw	r28, 0x11	; 17
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
     898:	cf 91       	pop	r28
     89a:	df 91       	pop	r29
     89c:	08 95       	ret

0000089e <_ZN13LiquidCrystal4homeEv>:
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::home()
     89e:	df 93       	push	r29
     8a0:	cf 93       	push	r28
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <_ZN13LiquidCrystal4homeEv+0x6>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	9a 83       	std	Y+2, r25	; 0x02
     8aa:	89 83       	std	Y+1, r24	; 0x01
{
  command(LCD_RETURNHOME);  // set cursor position to zero
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	9a 81       	ldd	r25, Y+2	; 0x02
     8b0:	62 e0       	ldi	r22, 0x02	; 2
     8b2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
  delayMicroseconds(2000);  // this command takes a long time!
     8b6:	80 ed       	ldi	r24, 0xD0	; 208
     8b8:	97 e0       	ldi	r25, 0x07	; 7
     8ba:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
}
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	cf 91       	pop	r28
     8c4:	df 91       	pop	r29
     8c6:	08 95       	ret

000008c8 <_ZN13LiquidCrystal5clearEv>:
  command(LCD_ENTRYMODESET | _displaymode);

}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
     8c8:	df 93       	push	r29
     8ca:	cf 93       	push	r28
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <_ZN13LiquidCrystal5clearEv+0x6>
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	9a 83       	std	Y+2, r25	; 0x02
     8d4:	89 83       	std	Y+1, r24	; 0x01
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	9a 81       	ldd	r25, Y+2	; 0x02
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
  delayMicroseconds(2000);  // this command takes a long time!
     8e0:	80 ed       	ldi	r24, 0xD0	; 208
     8e2:	97 e0       	ldi	r25, 0x07	; 7
     8e4:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
}
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	cf 91       	pop	r28
     8ee:	df 91       	pop	r29
     8f0:	08 95       	ret

000008f2 <_ZN13LiquidCrystal5beginEhhh>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     8f2:	df 93       	push	r29
     8f4:	cf 93       	push	r28
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <_ZN13LiquidCrystal5beginEhhh+0x6>
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <_ZN13LiquidCrystal5beginEhhh+0x8>
     8fa:	0f 92       	push	r0
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	9a 83       	std	Y+2, r25	; 0x02
     902:	89 83       	std	Y+1, r24	; 0x01
     904:	6b 83       	std	Y+3, r22	; 0x03
     906:	4c 83       	std	Y+4, r20	; 0x04
     908:	2d 83       	std	Y+5, r18	; 0x05
  if (lines > 1) {
     90a:	8c 81       	ldd	r24, Y+4	; 0x04
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	38 f0       	brcs	.+14     	; 0x91e <_ZN13LiquidCrystal5beginEhhh+0x2c>
    _displayfunction |= LCD_2LINE;
     910:	e9 81       	ldd	r30, Y+1	; 0x01
     912:	fa 81       	ldd	r31, Y+2	; 0x02
     914:	85 85       	ldd	r24, Z+13	; 0x0d
     916:	88 60       	ori	r24, 0x08	; 8
     918:	e9 81       	ldd	r30, Y+1	; 0x01
     91a:	fa 81       	ldd	r31, Y+2	; 0x02
     91c:	85 87       	std	Z+13, r24	; 0x0d
  }
  _numlines = lines;
     91e:	e9 81       	ldd	r30, Y+1	; 0x01
     920:	fa 81       	ldd	r31, Y+2	; 0x02
     922:	8c 81       	ldd	r24, Y+4	; 0x04
     924:	81 8b       	std	Z+17, r24	; 0x11
  _currline = 0;
     926:	e9 81       	ldd	r30, Y+1	; 0x01
     928:	fa 81       	ldd	r31, Y+2	; 0x02
     92a:	12 8a       	std	Z+18, r1	; 0x12

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != 0) && (lines == 1)) {
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	88 23       	and	r24, r24
     930:	51 f0       	breq	.+20     	; 0x946 <_ZN13LiquidCrystal5beginEhhh+0x54>
     932:	8c 81       	ldd	r24, Y+4	; 0x04
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	39 f4       	brne	.+14     	; 0x946 <_ZN13LiquidCrystal5beginEhhh+0x54>
    _displayfunction |= LCD_5x10DOTS;
     938:	e9 81       	ldd	r30, Y+1	; 0x01
     93a:	fa 81       	ldd	r31, Y+2	; 0x02
     93c:	85 85       	ldd	r24, Z+13	; 0x0d
     93e:	84 60       	ori	r24, 0x04	; 4
     940:	e9 81       	ldd	r30, Y+1	; 0x01
     942:	fa 81       	ldd	r31, Y+2	; 0x02
     944:	85 87       	std	Z+13, r24	; 0x0d
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     946:	80 e5       	ldi	r24, 0x50	; 80
     948:	93 ec       	ldi	r25, 0xC3	; 195
     94a:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     94e:	e9 81       	ldd	r30, Y+1	; 0x01
     950:	fa 81       	ldd	r31, Y+2	; 0x02
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
     95a:	e9 81       	ldd	r30, Y+1	; 0x01
     95c:	fa 81       	ldd	r31, Y+2	; 0x02
     95e:	84 81       	ldd	r24, Z+4	; 0x04
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  if (_rw_pin != -1) { 
    digitalWrite(_rw_pin, LOW);
     966:	e9 81       	ldd	r30, Y+1	; 0x01
     968:	fa 81       	ldd	r31, Y+2	; 0x02
     96a:	83 81       	ldd	r24, Z+3	; 0x03
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     972:	e9 81       	ldd	r30, Y+1	; 0x01
     974:	fa 81       	ldd	r31, Y+2	; 0x02
     976:	85 85       	ldd	r24, Z+13	; 0x0d
     978:	88 2f       	mov	r24, r24
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	80 71       	andi	r24, 0x10	; 16
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	09 f5       	brne	.+66     	; 0x9c6 <_ZN13LiquidCrystal5beginEhhh+0xd4>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	63 e0       	ldi	r22, 0x03	; 3
     98a:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
     98e:	84 e9       	ldi	r24, 0x94	; 148
     990:	91 e1       	ldi	r25, 0x11	; 17
     992:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>

    // second try
    write4bits(0x03);
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	9a 81       	ldd	r25, Y+2	; 0x02
     99a:	63 e0       	ldi	r22, 0x03	; 3
     99c:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
     9a0:	84 e9       	ldi	r24, 0x94	; 148
     9a2:	91 e1       	ldi	r25, 0x11	; 17
     9a4:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
    
    // third go!
    write4bits(0x03); 
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	63 e0       	ldi	r22, 0x03	; 3
     9ae:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(150);
     9b2:	86 e9       	ldi	r24, 0x96	; 150
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>

    // finally, set to 8-bit interface
    write4bits(0x02); 
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	62 e0       	ldi	r22, 0x02	; 2
     9c0:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN13LiquidCrystal10write4bitsEh>
     9c4:	26 c0       	rjmp	.+76     	; 0xa12 <_ZN13LiquidCrystal5beginEhhh+0x120>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     9c6:	e9 81       	ldd	r30, Y+1	; 0x01
     9c8:	fa 81       	ldd	r31, Y+2	; 0x02
     9ca:	85 85       	ldd	r24, Z+13	; 0x0d
     9cc:	28 2f       	mov	r18, r24
     9ce:	20 62       	ori	r18, 0x20	; 32
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	62 2f       	mov	r22, r18
     9d6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(4500);  // wait more than 4.1ms
     9da:	84 e9       	ldi	r24, 0x94	; 148
     9dc:	91 e1       	ldi	r25, 0x11	; 17
     9de:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     9e2:	e9 81       	ldd	r30, Y+1	; 0x01
     9e4:	fa 81       	ldd	r31, Y+2	; 0x02
     9e6:	85 85       	ldd	r24, Z+13	; 0x0d
     9e8:	28 2f       	mov	r18, r24
     9ea:	20 62       	ori	r18, 0x20	; 32
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	9a 81       	ldd	r25, Y+2	; 0x02
     9f0:	62 2f       	mov	r22, r18
     9f2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(150);
     9f6:	86 e9       	ldi	r24, 0x96	; 150
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     9fe:	e9 81       	ldd	r30, Y+1	; 0x01
     a00:	fa 81       	ldd	r31, Y+2	; 0x02
     a02:	85 85       	ldd	r24, Z+13	; 0x0d
     a04:	28 2f       	mov	r18, r24
     a06:	20 62       	ori	r18, 0x20	; 32
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	62 2f       	mov	r22, r18
     a0e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     a12:	e9 81       	ldd	r30, Y+1	; 0x01
     a14:	fa 81       	ldd	r31, Y+2	; 0x02
     a16:	85 85       	ldd	r24, Z+13	; 0x0d
     a18:	28 2f       	mov	r18, r24
     a1a:	20 62       	ori	r18, 0x20	; 32
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	9a 81       	ldd	r25, Y+2	; 0x02
     a20:	62 2f       	mov	r22, r18
     a22:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     a26:	e9 81       	ldd	r30, Y+1	; 0x01
     a28:	fa 81       	ldd	r31, Y+2	; 0x02
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	86 87       	std	Z+14, r24	; 0x0e
  display();
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN13LiquidCrystal7displayEv>

  // clear it off
  clear();
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	9a 81       	ldd	r25, Y+2	; 0x02
     a3a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN13LiquidCrystal5clearEv>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     a3e:	e9 81       	ldd	r30, Y+1	; 0x01
     a40:	fa 81       	ldd	r31, Y+2	; 0x02
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	87 87       	std	Z+15, r24	; 0x0f
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     a46:	e9 81       	ldd	r30, Y+1	; 0x01
     a48:	fa 81       	ldd	r31, Y+2	; 0x02
     a4a:	87 85       	ldd	r24, Z+15	; 0x0f
     a4c:	28 2f       	mov	r18, r24
     a4e:	24 60       	ori	r18, 0x04	; 4
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	62 2f       	mov	r22, r18
     a56:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN13LiquidCrystal7commandEh>

}
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	cf 91       	pop	r28
     a66:	df 91       	pop	r29
     a68:	08 95       	ret

00000a6a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
  init(1, rs, -1, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
     a6a:	8f 92       	push	r8
     a6c:	af 92       	push	r10
     a6e:	cf 92       	push	r12
     a70:	ef 92       	push	r14
     a72:	0f 93       	push	r16
     a74:	df 93       	push	r29
     a76:	cf 93       	push	r28
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	2a 97       	sbiw	r28, 0x0a	; 10
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	9a 83       	std	Y+2, r25	; 0x02
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	6b 83       	std	Y+3, r22	; 0x03
     a8e:	4c 83       	std	Y+4, r20	; 0x04
     a90:	2d 83       	std	Y+5, r18	; 0x05
     a92:	0e 83       	std	Y+6, r16	; 0x06
     a94:	ef 82       	std	Y+7, r14	; 0x07
     a96:	c8 86       	std	Y+8, r12	; 0x08
     a98:	a9 86       	std	Y+9, r10	; 0x09
     a9a:	8a 86       	std	Y+10, r8	; 0x0a
{
  _rs_pin = rs;
     a9c:	e9 81       	ldd	r30, Y+1	; 0x01
     a9e:	fa 81       	ldd	r31, Y+2	; 0x02
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	82 83       	std	Z+2, r24	; 0x02
  _rw_pin = rw;
     aa4:	e9 81       	ldd	r30, Y+1	; 0x01
     aa6:	fa 81       	ldd	r31, Y+2	; 0x02
     aa8:	8d 81       	ldd	r24, Y+5	; 0x05
     aaa:	83 83       	std	Z+3, r24	; 0x03
  _enable_pin = enable;
     aac:	e9 81       	ldd	r30, Y+1	; 0x01
     aae:	fa 81       	ldd	r31, Y+2	; 0x02
     ab0:	8e 81       	ldd	r24, Y+6	; 0x06
     ab2:	84 83       	std	Z+4, r24	; 0x04
  
  _data_pins[0] = d0;
     ab4:	e9 81       	ldd	r30, Y+1	; 0x01
     ab6:	fa 81       	ldd	r31, Y+2	; 0x02
     ab8:	8f 81       	ldd	r24, Y+7	; 0x07
     aba:	85 83       	std	Z+5, r24	; 0x05
  _data_pins[1] = d1;
     abc:	e9 81       	ldd	r30, Y+1	; 0x01
     abe:	fa 81       	ldd	r31, Y+2	; 0x02
     ac0:	88 85       	ldd	r24, Y+8	; 0x08
     ac2:	86 83       	std	Z+6, r24	; 0x06
  _data_pins[2] = d2;
     ac4:	e9 81       	ldd	r30, Y+1	; 0x01
     ac6:	fa 81       	ldd	r31, Y+2	; 0x02
     ac8:	89 85       	ldd	r24, Y+9	; 0x09
     aca:	87 83       	std	Z+7, r24	; 0x07
  _data_pins[3] = d3; 
     acc:	e9 81       	ldd	r30, Y+1	; 0x01
     ace:	fa 81       	ldd	r31, Y+2	; 0x02
     ad0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ad2:	80 87       	std	Z+8, r24	; 0x08
  _data_pins[4] = d4;
     ad4:	e9 81       	ldd	r30, Y+1	; 0x01
     ad6:	fa 81       	ldd	r31, Y+2	; 0x02
     ad8:	8c 89       	ldd	r24, Y+20	; 0x14
     ada:	81 87       	std	Z+9, r24	; 0x09
  _data_pins[5] = d5;
     adc:	e9 81       	ldd	r30, Y+1	; 0x01
     ade:	fa 81       	ldd	r31, Y+2	; 0x02
     ae0:	8d 89       	ldd	r24, Y+21	; 0x15
     ae2:	82 87       	std	Z+10, r24	; 0x0a
  _data_pins[6] = d6;
     ae4:	e9 81       	ldd	r30, Y+1	; 0x01
     ae6:	fa 81       	ldd	r31, Y+2	; 0x02
     ae8:	8e 89       	ldd	r24, Y+22	; 0x16
     aea:	83 87       	std	Z+11, r24	; 0x0b
  _data_pins[7] = d7; 
     aec:	e9 81       	ldd	r30, Y+1	; 0x01
     aee:	fa 81       	ldd	r31, Y+2	; 0x02
     af0:	8f 89       	ldd	r24, Y+23	; 0x17
     af2:	84 87       	std	Z+12, r24	; 0x0c

  pinMode(_rs_pin, OUTPUT);
     af4:	e9 81       	ldd	r30, Y+1	; 0x01
     af6:	fa 81       	ldd	r31, Y+2	; 0x02
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
  // we can save 1 pin by not using RW. Indicate by passing -1 instead of pin#
  if (_rw_pin != -1) { 
    pinMode(_rw_pin, OUTPUT);
     b00:	e9 81       	ldd	r30, Y+1	; 0x01
     b02:	fa 81       	ldd	r31, Y+2	; 0x02
     b04:	83 81       	ldd	r24, Z+3	; 0x03
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
  }
  pinMode(_enable_pin, OUTPUT);
     b0c:	e9 81       	ldd	r30, Y+1	; 0x01
     b0e:	fa 81       	ldd	r31, Y+2	; 0x02
     b10:	84 81       	ldd	r24, Z+4	; 0x04
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
  
  if (fourbitmode)
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	88 23       	and	r24, r24
     b1c:	21 f0       	breq	.+8      	; 0xb26 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xbc>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
     b1e:	e9 81       	ldd	r30, Y+1	; 0x01
     b20:	fa 81       	ldd	r31, Y+2	; 0x02
     b22:	15 86       	std	Z+13, r1	; 0x0d
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xc4>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
     b26:	e9 81       	ldd	r30, Y+1	; 0x01
     b28:	fa 81       	ldd	r31, Y+2	; 0x02
     b2a:	80 e1       	ldi	r24, 0x10	; 16
     b2c:	85 87       	std	Z+13, r24	; 0x0d
  
  begin(16, 1);  
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	60 e1       	ldi	r22, 0x10	; 16
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN13LiquidCrystal5beginEhhh>
}
     b3c:	2a 96       	adiw	r28, 0x0a	; 10
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	0f 91       	pop	r16
     b4e:	ef 90       	pop	r14
     b50:	cf 90       	pop	r12
     b52:	af 90       	pop	r10
     b54:	8f 90       	pop	r8
     b56:	08 95       	ret

00000b58 <_ZN13LiquidCrystalC1Ehhhhhh>:
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
     b58:	8f 92       	push	r8
     b5a:	af 92       	push	r10
     b5c:	cf 92       	push	r12
     b5e:	ef 92       	push	r14
     b60:	0f 93       	push	r16
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	28 97       	sbiw	r28, 0x08	; 8
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	6b 83       	std	Y+3, r22	; 0x03
     b7c:	4c 83       	std	Y+4, r20	; 0x04
     b7e:	2d 83       	std	Y+5, r18	; 0x05
     b80:	0e 83       	std	Y+6, r16	; 0x06
     b82:	ef 82       	std	Y+7, r14	; 0x07
     b84:	c8 86       	std	Y+8, r12	; 0x08
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	0e 94 30 01 	call	0x260	; 0x260 <_ZN5PrintC2Ev>
     b8e:	e9 81       	ldd	r30, Y+1	; 0x01
     b90:	fa 81       	ldd	r31, Y+2	; 0x02
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	80 83       	st	Z, r24
{
  init(1, rs, -1, enable, d0, d1, d2, d3, 0, 0, 0, 0);
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <_ZN13LiquidCrystalC1Ehhhhhh+0x44>
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <_ZN13LiquidCrystalC1Ehhhhhh+0x46>
     b9e:	ed b7       	in	r30, 0x3d	; 61
     ba0:	fe b7       	in	r31, 0x3e	; 62
     ba2:	31 96       	adiw	r30, 0x01	; 1
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	9a 81       	ldd	r25, Y+2	; 0x02
     ba8:	10 82       	st	Z, r1
     baa:	11 82       	std	Z+1, r1	; 0x01
     bac:	12 82       	std	Z+2, r1	; 0x02
     bae:	13 82       	std	Z+3, r1	; 0x03
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	4b 81       	ldd	r20, Y+3	; 0x03
     bb4:	2f ef       	ldi	r18, 0xFF	; 255
     bb6:	0c 81       	ldd	r16, Y+4	; 0x04
     bb8:	ed 80       	ldd	r14, Y+5	; 0x05
     bba:	ce 80       	ldd	r12, Y+6	; 0x06
     bbc:	af 80       	ldd	r10, Y+7	; 0x07
     bbe:	88 84       	ldd	r8, Y+8	; 0x08
     bc0:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
}
     bcc:	28 96       	adiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	0f 91       	pop	r16
     bde:	ef 90       	pop	r14
     be0:	cf 90       	pop	r12
     be2:	af 90       	pop	r10
     be4:	8f 90       	pop	r8
     be6:	08 95       	ret

00000be8 <_ZN13LiquidCrystalC2Ehhhhhh>:
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
     be8:	8f 92       	push	r8
     bea:	af 92       	push	r10
     bec:	cf 92       	push	r12
     bee:	ef 92       	push	r14
     bf0:	0f 93       	push	r16
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	28 97       	sbiw	r28, 0x08	; 8
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01
     c0a:	6b 83       	std	Y+3, r22	; 0x03
     c0c:	4c 83       	std	Y+4, r20	; 0x04
     c0e:	2d 83       	std	Y+5, r18	; 0x05
     c10:	0e 83       	std	Y+6, r16	; 0x06
     c12:	ef 82       	std	Y+7, r14	; 0x07
     c14:	c8 86       	std	Y+8, r12	; 0x08
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	0e 94 30 01 	call	0x260	; 0x260 <_ZN5PrintC2Ev>
     c1e:	e9 81       	ldd	r30, Y+1	; 0x01
     c20:	fa 81       	ldd	r31, Y+2	; 0x02
     c22:	84 e0       	ldi	r24, 0x04	; 4
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	80 83       	st	Z, r24
{
  init(1, rs, -1, enable, d0, d1, d2, d3, 0, 0, 0, 0);
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <_ZN13LiquidCrystalC2Ehhhhhh+0x44>
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <_ZN13LiquidCrystalC2Ehhhhhh+0x46>
     c2e:	ed b7       	in	r30, 0x3d	; 61
     c30:	fe b7       	in	r31, 0x3e	; 62
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	10 82       	st	Z, r1
     c3a:	11 82       	std	Z+1, r1	; 0x01
     c3c:	12 82       	std	Z+2, r1	; 0x02
     c3e:	13 82       	std	Z+3, r1	; 0x03
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	4b 81       	ldd	r20, Y+3	; 0x03
     c44:	2f ef       	ldi	r18, 0xFF	; 255
     c46:	0c 81       	ldd	r16, Y+4	; 0x04
     c48:	ed 80       	ldd	r14, Y+5	; 0x05
     c4a:	ce 80       	ldd	r12, Y+6	; 0x06
     c4c:	af 80       	ldd	r10, Y+7	; 0x07
     c4e:	88 84       	ldd	r8, Y+8	; 0x08
     c50:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
}
     c5c:	28 96       	adiw	r28, 0x08	; 8
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	0f 91       	pop	r16
     c6e:	ef 90       	pop	r14
     c70:	cf 90       	pop	r12
     c72:	af 90       	pop	r10
     c74:	8f 90       	pop	r8
     c76:	08 95       	ret

00000c78 <_ZN13LiquidCrystalC1Ehhhhhhh>:
{
  init(0, rs, -1, enable, d0, d1, d2, d3, d4, d5, d6, d7);
}

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
     c78:	8f 92       	push	r8
     c7a:	af 92       	push	r10
     c7c:	cf 92       	push	r12
     c7e:	ef 92       	push	r14
     c80:	0f 93       	push	r16
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	29 97       	sbiw	r28, 0x09	; 9
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	9a 83       	std	Y+2, r25	; 0x02
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	6b 83       	std	Y+3, r22	; 0x03
     c9c:	4c 83       	std	Y+4, r20	; 0x04
     c9e:	2d 83       	std	Y+5, r18	; 0x05
     ca0:	0e 83       	std	Y+6, r16	; 0x06
     ca2:	ef 82       	std	Y+7, r14	; 0x07
     ca4:	c8 86       	std	Y+8, r12	; 0x08
     ca6:	a9 86       	std	Y+9, r10	; 0x09
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	0e 94 30 01 	call	0x260	; 0x260 <_ZN5PrintC2Ev>
     cb0:	e9 81       	ldd	r30, Y+1	; 0x01
     cb2:	fa 81       	ldd	r31, Y+2	; 0x02
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	80 83       	st	Z, r24
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <_ZN13LiquidCrystalC1Ehhhhhhh+0x46>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <_ZN13LiquidCrystalC1Ehhhhhhh+0x48>
     cc0:	ed b7       	in	r30, 0x3d	; 61
     cc2:	fe b7       	in	r31, 0x3e	; 62
     cc4:	31 96       	adiw	r30, 0x01	; 1
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	10 82       	st	Z, r1
     ccc:	11 82       	std	Z+1, r1	; 0x01
     cce:	12 82       	std	Z+2, r1	; 0x02
     cd0:	13 82       	std	Z+3, r1	; 0x03
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	4b 81       	ldd	r20, Y+3	; 0x03
     cd6:	2c 81       	ldd	r18, Y+4	; 0x04
     cd8:	0d 81       	ldd	r16, Y+5	; 0x05
     cda:	ee 80       	ldd	r14, Y+6	; 0x06
     cdc:	cf 80       	ldd	r12, Y+7	; 0x07
     cde:	a8 84       	ldd	r10, Y+8	; 0x08
     ce0:	89 84       	ldd	r8, Y+9	; 0x09
     ce2:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
}
     cee:	29 96       	adiw	r28, 0x09	; 9
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	0f 91       	pop	r16
     d00:	ef 90       	pop	r14
     d02:	cf 90       	pop	r12
     d04:	af 90       	pop	r10
     d06:	8f 90       	pop	r8
     d08:	08 95       	ret

00000d0a <_ZN13LiquidCrystalC2Ehhhhhhh>:
{
  init(0, rs, -1, enable, d0, d1, d2, d3, d4, d5, d6, d7);
}

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
     d0a:	8f 92       	push	r8
     d0c:	af 92       	push	r10
     d0e:	cf 92       	push	r12
     d10:	ef 92       	push	r14
     d12:	0f 93       	push	r16
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	29 97       	sbiw	r28, 0x09	; 9
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	9a 83       	std	Y+2, r25	; 0x02
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6b 83       	std	Y+3, r22	; 0x03
     d2e:	4c 83       	std	Y+4, r20	; 0x04
     d30:	2d 83       	std	Y+5, r18	; 0x05
     d32:	0e 83       	std	Y+6, r16	; 0x06
     d34:	ef 82       	std	Y+7, r14	; 0x07
     d36:	c8 86       	std	Y+8, r12	; 0x08
     d38:	a9 86       	std	Y+9, r10	; 0x09
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	0e 94 30 01 	call	0x260	; 0x260 <_ZN5PrintC2Ev>
     d42:	e9 81       	ldd	r30, Y+1	; 0x01
     d44:	fa 81       	ldd	r31, Y+2	; 0x02
     d46:	84 e0       	ldi	r24, 0x04	; 4
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	80 83       	st	Z, r24
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <_ZN13LiquidCrystalC2Ehhhhhhh+0x46>
     d50:	00 d0       	rcall	.+0      	; 0xd52 <_ZN13LiquidCrystalC2Ehhhhhhh+0x48>
     d52:	ed b7       	in	r30, 0x3d	; 61
     d54:	fe b7       	in	r31, 0x3e	; 62
     d56:	31 96       	adiw	r30, 0x01	; 1
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	10 82       	st	Z, r1
     d5e:	11 82       	std	Z+1, r1	; 0x01
     d60:	12 82       	std	Z+2, r1	; 0x02
     d62:	13 82       	std	Z+3, r1	; 0x03
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	4b 81       	ldd	r20, Y+3	; 0x03
     d68:	2c 81       	ldd	r18, Y+4	; 0x04
     d6a:	0d 81       	ldd	r16, Y+5	; 0x05
     d6c:	ee 80       	ldd	r14, Y+6	; 0x06
     d6e:	cf 80       	ldd	r12, Y+7	; 0x07
     d70:	a8 84       	ldd	r10, Y+8	; 0x08
     d72:	89 84       	ldd	r8, Y+9	; 0x09
     d74:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
}
     d80:	29 96       	adiw	r28, 0x09	; 9
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	0f 91       	pop	r16
     d92:	ef 90       	pop	r14
     d94:	cf 90       	pop	r12
     d96:	af 90       	pop	r10
     d98:	8f 90       	pop	r8
     d9a:	08 95       	ret

00000d9c <_ZN13LiquidCrystalC1Ehhhhhhhhhh>:
  init(0, rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);
}

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
     d9c:	8f 92       	push	r8
     d9e:	af 92       	push	r10
     da0:	cf 92       	push	r12
     da2:	ef 92       	push	r14
     da4:	0f 93       	push	r16
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	2a 97       	sbiw	r28, 0x0a	; 10
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	6b 83       	std	Y+3, r22	; 0x03
     dc0:	4c 83       	std	Y+4, r20	; 0x04
     dc2:	2d 83       	std	Y+5, r18	; 0x05
     dc4:	0e 83       	std	Y+6, r16	; 0x06
     dc6:	ef 82       	std	Y+7, r14	; 0x07
     dc8:	c8 86       	std	Y+8, r12	; 0x08
     dca:	a9 86       	std	Y+9, r10	; 0x09
     dcc:	8a 86       	std	Y+10, r8	; 0x0a
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	0e 94 30 01 	call	0x260	; 0x260 <_ZN5PrintC2Ev>
     dd6:	e9 81       	ldd	r30, Y+1	; 0x01
     dd8:	fa 81       	ldd	r31, Y+2	; 0x02
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
{
  init(0, rs, -1, enable, d0, d1, d2, d3, d4, d5, d6, d7);
     de2:	00 d0       	rcall	.+0      	; 0xde4 <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x48>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x4a>
     de6:	ed b7       	in	r30, 0x3d	; 61
     de8:	fe b7       	in	r31, 0x3e	; 62
     dea:	31 96       	adiw	r30, 0x01	; 1
     dec:	29 81       	ldd	r18, Y+1	; 0x01
     dee:	3a 81       	ldd	r19, Y+2	; 0x02
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	80 83       	st	Z, r24
     df4:	8a 85       	ldd	r24, Y+10	; 0x0a
     df6:	81 83       	std	Z+1, r24	; 0x01
     df8:	8c 89       	ldd	r24, Y+20	; 0x14
     dfa:	82 83       	std	Z+2, r24	; 0x02
     dfc:	8d 89       	ldd	r24, Y+21	; 0x15
     dfe:	83 83       	std	Z+3, r24	; 0x03
     e00:	c9 01       	movw	r24, r18
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	4b 81       	ldd	r20, Y+3	; 0x03
     e06:	2f ef       	ldi	r18, 0xFF	; 255
     e08:	0c 81       	ldd	r16, Y+4	; 0x04
     e0a:	ed 80       	ldd	r14, Y+5	; 0x05
     e0c:	ce 80       	ldd	r12, Y+6	; 0x06
     e0e:	af 80       	ldd	r10, Y+7	; 0x07
     e10:	88 84       	ldd	r8, Y+8	; 0x08
     e12:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
}
     e1e:	2a 96       	adiw	r28, 0x0a	; 10
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ef 90       	pop	r14
     e32:	cf 90       	pop	r12
     e34:	af 90       	pop	r10
     e36:	8f 90       	pop	r8
     e38:	08 95       	ret

00000e3a <_ZN13LiquidCrystalC2Ehhhhhhhhhh>:
  init(0, rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);
}

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
     e3a:	8f 92       	push	r8
     e3c:	af 92       	push	r10
     e3e:	cf 92       	push	r12
     e40:	ef 92       	push	r14
     e42:	0f 93       	push	r16
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	2a 97       	sbiw	r28, 0x0a	; 10
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	6b 83       	std	Y+3, r22	; 0x03
     e5e:	4c 83       	std	Y+4, r20	; 0x04
     e60:	2d 83       	std	Y+5, r18	; 0x05
     e62:	0e 83       	std	Y+6, r16	; 0x06
     e64:	ef 82       	std	Y+7, r14	; 0x07
     e66:	c8 86       	std	Y+8, r12	; 0x08
     e68:	a9 86       	std	Y+9, r10	; 0x09
     e6a:	8a 86       	std	Y+10, r8	; 0x0a
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	9a 81       	ldd	r25, Y+2	; 0x02
     e70:	0e 94 30 01 	call	0x260	; 0x260 <_ZN5PrintC2Ev>
     e74:	e9 81       	ldd	r30, Y+1	; 0x01
     e76:	fa 81       	ldd	r31, Y+2	; 0x02
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
{
  init(0, rs, -1, enable, d0, d1, d2, d3, d4, d5, d6, d7);
     e80:	00 d0       	rcall	.+0      	; 0xe82 <_ZN13LiquidCrystalC2Ehhhhhhhhhh+0x48>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <_ZN13LiquidCrystalC2Ehhhhhhhhhh+0x4a>
     e84:	ed b7       	in	r30, 0x3d	; 61
     e86:	fe b7       	in	r31, 0x3e	; 62
     e88:	31 96       	adiw	r30, 0x01	; 1
     e8a:	29 81       	ldd	r18, Y+1	; 0x01
     e8c:	3a 81       	ldd	r19, Y+2	; 0x02
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	80 83       	st	Z, r24
     e92:	8a 85       	ldd	r24, Y+10	; 0x0a
     e94:	81 83       	std	Z+1, r24	; 0x01
     e96:	8c 89       	ldd	r24, Y+20	; 0x14
     e98:	82 83       	std	Z+2, r24	; 0x02
     e9a:	8d 89       	ldd	r24, Y+21	; 0x15
     e9c:	83 83       	std	Z+3, r24	; 0x03
     e9e:	c9 01       	movw	r24, r18
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	4b 81       	ldd	r20, Y+3	; 0x03
     ea4:	2f ef       	ldi	r18, 0xFF	; 255
     ea6:	0c 81       	ldd	r16, Y+4	; 0x04
     ea8:	ed 80       	ldd	r14, Y+5	; 0x05
     eaa:	ce 80       	ldd	r12, Y+6	; 0x06
     eac:	af 80       	ldd	r10, Y+7	; 0x07
     eae:	88 84       	ldd	r8, Y+8	; 0x08
     eb0:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
}
     ebc:	2a 96       	adiw	r28, 0x0a	; 10
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	0f 91       	pop	r16
     ece:	ef 90       	pop	r14
     ed0:	cf 90       	pop	r12
     ed2:	af 90       	pop	r10
     ed4:	8f 90       	pop	r8
     ed6:	08 95       	ret

00000ed8 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
     ed8:	8f 92       	push	r8
     eda:	af 92       	push	r10
     edc:	cf 92       	push	r12
     ede:	ef 92       	push	r14
     ee0:	0f 93       	push	r16
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	2a 97       	sbiw	r28, 0x0a	; 10
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	6b 83       	std	Y+3, r22	; 0x03
     efc:	4c 83       	std	Y+4, r20	; 0x04
     efe:	2d 83       	std	Y+5, r18	; 0x05
     f00:	0e 83       	std	Y+6, r16	; 0x06
     f02:	ef 82       	std	Y+7, r14	; 0x07
     f04:	c8 86       	std	Y+8, r12	; 0x08
     f06:	a9 86       	std	Y+9, r10	; 0x09
     f08:	8a 86       	std	Y+10, r8	; 0x0a
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	0e 94 30 01 	call	0x260	; 0x260 <_ZN5PrintC2Ev>
     f12:	e9 81       	ldd	r30, Y+1	; 0x01
     f14:	fa 81       	ldd	r31, Y+2	; 0x02
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	92 e0       	ldi	r25, 0x02	; 2
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
{
  init(0, rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x48>
     f20:	00 d0       	rcall	.+0      	; 0xf22 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x4a>
     f22:	ed b7       	in	r30, 0x3d	; 61
     f24:	fe b7       	in	r31, 0x3e	; 62
     f26:	31 96       	adiw	r30, 0x01	; 1
     f28:	29 81       	ldd	r18, Y+1	; 0x01
     f2a:	3a 81       	ldd	r19, Y+2	; 0x02
     f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f2e:	80 83       	st	Z, r24
     f30:	8c 89       	ldd	r24, Y+20	; 0x14
     f32:	81 83       	std	Z+1, r24	; 0x01
     f34:	8d 89       	ldd	r24, Y+21	; 0x15
     f36:	82 83       	std	Z+2, r24	; 0x02
     f38:	8e 89       	ldd	r24, Y+22	; 0x16
     f3a:	83 83       	std	Z+3, r24	; 0x03
     f3c:	c9 01       	movw	r24, r18
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	4b 81       	ldd	r20, Y+3	; 0x03
     f42:	2c 81       	ldd	r18, Y+4	; 0x04
     f44:	0d 81       	ldd	r16, Y+5	; 0x05
     f46:	ee 80       	ldd	r14, Y+6	; 0x06
     f48:	cf 80       	ldd	r12, Y+7	; 0x07
     f4a:	a8 84       	ldd	r10, Y+8	; 0x08
     f4c:	89 84       	ldd	r8, Y+9	; 0x09
     f4e:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
}
     f5a:	2a 96       	adiw	r28, 0x0a	; 10
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	0f 91       	pop	r16
     f6c:	ef 90       	pop	r14
     f6e:	cf 90       	pop	r12
     f70:	af 90       	pop	r10
     f72:	8f 90       	pop	r8
     f74:	08 95       	ret

00000f76 <_ZN13LiquidCrystalC2Ehhhhhhhhhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
     f76:	8f 92       	push	r8
     f78:	af 92       	push	r10
     f7a:	cf 92       	push	r12
     f7c:	ef 92       	push	r14
     f7e:	0f 93       	push	r16
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	2a 97       	sbiw	r28, 0x0a	; 10
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	6b 83       	std	Y+3, r22	; 0x03
     f9a:	4c 83       	std	Y+4, r20	; 0x04
     f9c:	2d 83       	std	Y+5, r18	; 0x05
     f9e:	0e 83       	std	Y+6, r16	; 0x06
     fa0:	ef 82       	std	Y+7, r14	; 0x07
     fa2:	c8 86       	std	Y+8, r12	; 0x08
     fa4:	a9 86       	std	Y+9, r10	; 0x09
     fa6:	8a 86       	std	Y+10, r8	; 0x0a
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	0e 94 30 01 	call	0x260	; 0x260 <_ZN5PrintC2Ev>
     fb0:	e9 81       	ldd	r30, Y+1	; 0x01
     fb2:	fa 81       	ldd	r31, Y+2	; 0x02
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
{
  init(0, rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <_ZN13LiquidCrystalC2Ehhhhhhhhhhh+0x48>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <_ZN13LiquidCrystalC2Ehhhhhhhhhhh+0x4a>
     fc0:	ed b7       	in	r30, 0x3d	; 61
     fc2:	fe b7       	in	r31, 0x3e	; 62
     fc4:	31 96       	adiw	r30, 0x01	; 1
     fc6:	29 81       	ldd	r18, Y+1	; 0x01
     fc8:	3a 81       	ldd	r19, Y+2	; 0x02
     fca:	8a 85       	ldd	r24, Y+10	; 0x0a
     fcc:	80 83       	st	Z, r24
     fce:	8c 89       	ldd	r24, Y+20	; 0x14
     fd0:	81 83       	std	Z+1, r24	; 0x01
     fd2:	8d 89       	ldd	r24, Y+21	; 0x15
     fd4:	82 83       	std	Z+2, r24	; 0x02
     fd6:	8e 89       	ldd	r24, Y+22	; 0x16
     fd8:	83 83       	std	Z+3, r24	; 0x03
     fda:	c9 01       	movw	r24, r18
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	4b 81       	ldd	r20, Y+3	; 0x03
     fe0:	2c 81       	ldd	r18, Y+4	; 0x04
     fe2:	0d 81       	ldd	r16, Y+5	; 0x05
     fe4:	ee 80       	ldd	r14, Y+6	; 0x06
     fe6:	cf 80       	ldd	r12, Y+7	; 0x07
     fe8:	a8 84       	ldd	r10, Y+8	; 0x08
     fea:	89 84       	ldd	r8, Y+9	; 0x09
     fec:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
}
     ff8:	2a 96       	adiw	r28, 0x0a	; 10
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	0f 91       	pop	r16
    100a:	ef 90       	pop	r14
    100c:	cf 90       	pop	r12
    100e:	af 90       	pop	r10
    1010:	8f 90       	pop	r8
    1012:	08 95       	ret

00001014 <_Z41__static_initialization_and_destruction_0ii>:
	setup();

	for (;;) {
		loop();
	}
}
    1014:	cf 92       	push	r12
    1016:	ef 92       	push	r14
    1018:	0f 93       	push	r16
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <_Z41__static_initialization_and_destruction_0ii+0xc>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <_Z41__static_initialization_and_destruction_0ii+0xe>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	7c 83       	std	Y+4, r23	; 0x04
    102c:	6b 83       	std	Y+3, r22	; 0x03
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	b1 f4       	brne	.+44     	; 0x1064 <_Z41__static_initialization_and_destruction_0ii+0x50>
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	2f ef       	ldi	r18, 0xFF	; 255
    103e:	8f 3f       	cpi	r24, 0xFF	; 255
    1040:	92 07       	cpc	r25, r18
    1042:	81 f4       	brne	.+32     	; 0x1064 <_Z41__static_initialization_and_destruction_0ii+0x50>
#include "vrbot_protocol.h"
#include "string.h"
#include "packet.h"
#include <ctype.h>

LiquidCrystal lcd(10, 9, 8, 7, 6, 5);
    1044:	88 e9       	ldi	r24, 0x98	; 152
    1046:	95 e0       	ldi	r25, 0x05	; 5
    1048:	6a e0       	ldi	r22, 0x0A	; 10
    104a:	49 e0       	ldi	r20, 0x09	; 9
    104c:	28 e0       	ldi	r18, 0x08	; 8
    104e:	07 e0       	ldi	r16, 0x07	; 7
    1050:	0f 2e       	mov	r0, r31
    1052:	f6 e0       	ldi	r31, 0x06	; 6
    1054:	ef 2e       	mov	r14, r31
    1056:	f0 2d       	mov	r31, r0
    1058:	0f 2e       	mov	r0, r31
    105a:	f5 e0       	ldi	r31, 0x05	; 5
    105c:	cf 2e       	mov	r12, r31
    105e:	f0 2d       	mov	r31, r0
    1060:	0e 94 ac 05 	call	0xb58	; 0xb58 <_ZN13LiquidCrystalC1Ehhhhhh>
	setup();

	for (;;) {
		loop();
	}
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	0f 91       	pop	r16
    1072:	ef 90       	pop	r14
    1074:	cf 90       	pop	r12
    1076:	08 95       	ret

00001078 <_GLOBAL__I_lcd>:
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	6f ef       	ldi	r22, 0xFF	; 255
    1086:	7f ef       	ldi	r23, 0xFF	; 255
    1088:	0e 94 0a 08 	call	0x1014	; 0x1014 <_Z41__static_initialization_and_destruction_0ii>
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <loop>:

	  lcd.print("hello, world!3");
	radioInitSetup();
}

void loop() {
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <loop+0x6>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	bool r, c, l = 0;
    109e:	19 82       	std	Y+1, r1	; 0x01
	//Serial.print("test");

	SD_Recognition();
    10a0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_Z14SD_Recognitionv>

	r = digitalRead(59);
    10a4:	8b e3       	ldi	r24, 0x3B	; 59
    10a6:	0e 94 83 1c 	call	0x3906	; 0x3906 <digitalRead>
    10aa:	1b 82       	std	Y+3, r1	; 0x03
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	11 f0       	breq	.+4      	; 0x10b4 <loop+0x22>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	8b 83       	std	Y+3, r24	; 0x03
	c = digitalRead(61);
    10b4:	8d e3       	ldi	r24, 0x3D	; 61
    10b6:	0e 94 83 1c 	call	0x3906	; 0x3906 <digitalRead>
    10ba:	1a 82       	std	Y+2, r1	; 0x02
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	11 f0       	breq	.+4      	; 0x10c4 <loop+0x32>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	8a 83       	std	Y+2, r24	; 0x02
	l = digitalRead(60);
    10c4:	8c e3       	ldi	r24, 0x3C	; 60
    10c6:	0e 94 83 1c 	call	0x3906	; 0x3906 <digitalRead>
    10ca:	19 82       	std	Y+1, r1	; 0x01
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	11 f0       	breq	.+4      	; 0x10d4 <loop+0x42>
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01

    //Serial.println(l);
    //Serial.println(c);
    //Serial.println(r);

	if (r==1 && l==1) {
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	89 27       	eor	r24, r25
    10da:	88 23       	and	r24, r24
    10dc:	e9 f4       	brne	.+58     	; 0x1118 <loop+0x86>
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	89 27       	eor	r24, r25
    10e4:	88 23       	and	r24, r24
    10e6:	c1 f4       	brne	.+48     	; 0x1118 <loop+0x86>
	      Serial.println("Commmand: Forward");
    10e8:	88 ef       	ldi	r24, 0xF8	; 248
    10ea:	97 e0       	ldi	r25, 0x07	; 7
    10ec:	22 e1       	ldi	r18, 0x12	; 18
    10ee:	32 e0       	ldi	r19, 0x02	; 2
    10f0:	b9 01       	movw	r22, r18
    10f2:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
	      lcd.setCursor(0, 1);
    10f6:	88 e9       	ldi	r24, 0x98	; 152
    10f8:	95 e0       	ldi	r25, 0x05	; 5
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
	      lcd.print("Forward");
    1102:	88 e9       	ldi	r24, 0x98	; 152
    1104:	95 e0       	ldi	r25, 0x05	; 5
    1106:	24 e2       	ldi	r18, 0x24	; 36
    1108:	32 e0       	ldi	r19, 0x02	; 2
    110a:	b9 01       	movw	r22, r18
    110c:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
	      radioSend(FORWARD);
    1110:	86 e0       	ldi	r24, 0x06	; 6
    1112:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
    1116:	50 c0       	rjmp	.+160    	; 0x11b8 <loop+0x126>
	}
	else if (r==1) {
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	88 23       	and	r24, r24
    111c:	c1 f0       	breq	.+48     	; 0x114e <loop+0xbc>
	      Serial.println("Commmand: Turn Right");
    111e:	88 ef       	ldi	r24, 0xF8	; 248
    1120:	97 e0       	ldi	r25, 0x07	; 7
    1122:	2c e2       	ldi	r18, 0x2C	; 44
    1124:	32 e0       	ldi	r19, 0x02	; 2
    1126:	b9 01       	movw	r22, r18
    1128:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
	      lcd.setCursor(0, 1);
    112c:	88 e9       	ldi	r24, 0x98	; 152
    112e:	95 e0       	ldi	r25, 0x05	; 5
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
	      lcd.print("Turn Right");
    1138:	88 e9       	ldi	r24, 0x98	; 152
    113a:	95 e0       	ldi	r25, 0x05	; 5
    113c:	21 e4       	ldi	r18, 0x41	; 65
    113e:	32 e0       	ldi	r19, 0x02	; 2
    1140:	b9 01       	movw	r22, r18
    1142:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
	      radioSend(TURN_RIGHT);
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
    114c:	35 c0       	rjmp	.+106    	; 0x11b8 <loop+0x126>
	}
	else if (l==1) {
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	88 23       	and	r24, r24
    1152:	c1 f0       	breq	.+48     	; 0x1184 <loop+0xf2>
	      Serial.println("Command: Turn Left");
    1154:	88 ef       	ldi	r24, 0xF8	; 248
    1156:	97 e0       	ldi	r25, 0x07	; 7
    1158:	2c e4       	ldi	r18, 0x4C	; 76
    115a:	32 e0       	ldi	r19, 0x02	; 2
    115c:	b9 01       	movw	r22, r18
    115e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
	      lcd.setCursor(0, 1);
    1162:	88 e9       	ldi	r24, 0x98	; 152
    1164:	95 e0       	ldi	r25, 0x05	; 5
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
	      lcd.print("Turn Left");
    116e:	88 e9       	ldi	r24, 0x98	; 152
    1170:	95 e0       	ldi	r25, 0x05	; 5
    1172:	2f e5       	ldi	r18, 0x5F	; 95
    1174:	32 e0       	ldi	r19, 0x02	; 2
    1176:	b9 01       	movw	r22, r18
    1178:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
	      radioSend(TURN_LEFT);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
    1182:	1a c0       	rjmp	.+52     	; 0x11b8 <loop+0x126>
	}
	else if (c==1) {
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 23       	and	r24, r24
    1188:	b9 f0       	breq	.+46     	; 0x11b8 <loop+0x126>
	      Serial.println("Commmand: Stop");
    118a:	88 ef       	ldi	r24, 0xF8	; 248
    118c:	97 e0       	ldi	r25, 0x07	; 7
    118e:	29 e6       	ldi	r18, 0x69	; 105
    1190:	32 e0       	ldi	r19, 0x02	; 2
    1192:	b9 01       	movw	r22, r18
    1194:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
	      lcd.setCursor(0, 1);
    1198:	88 e9       	ldi	r24, 0x98	; 152
    119a:	95 e0       	ldi	r25, 0x05	; 5
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	41 e0       	ldi	r20, 0x01	; 1
    11a0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
	      lcd.print("Stop");
    11a4:	88 e9       	ldi	r24, 0x98	; 152
    11a6:	95 e0       	ldi	r25, 0x05	; 5
    11a8:	28 e7       	ldi	r18, 0x78	; 120
    11aa:	32 e0       	ldi	r19, 0x02	; 2
    11ac:	b9 01       	movw	r22, r18
    11ae:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
	      radioSend(STOP);
    11b2:	85 e0       	ldi	r24, 0x05	; 5
    11b4:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
	}
     //lcd.setCursor(0, 1);
     //lcd.print("Turn Left");
     //radioSend(TURN_LEFT);

	delay(200);
    11b8:	68 ec       	ldi	r22, 0xC8	; 200
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>




	return;
}
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <setup>:
#include "packet.h"
#include <ctype.h>

LiquidCrystal lcd(10, 9, 8, 7, 6, 5);

void setup() {
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62

    // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
    11d8:	88 e9       	ldi	r24, 0x98	; 152
    11da:	95 e0       	ldi	r25, 0x05	; 5
    11dc:	60 e1       	ldi	r22, 0x10	; 16
    11de:	42 e0       	ldi	r20, 0x02	; 2
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN13LiquidCrystal5beginEhhh>
  // Print a message to the LCD.
  lcd.print("hello, world!");
    11e6:	88 e9       	ldi	r24, 0x98	; 152
    11e8:	95 e0       	ldi	r25, 0x05	; 5
    11ea:	2d e7       	ldi	r18, 0x7D	; 125
    11ec:	32 e0       	ldi	r19, 0x02	; 2
    11ee:	b9 01       	movw	r22, r18
    11f0:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>

	//set up vrbot for speech reco
	vrbot_setup();
    11f4:	0e 94 9d 0c 	call	0x193a	; 0x193a <_Z11vrbot_setupv>
	  lcd.print("hello, world!2");
    11f8:	88 e9       	ldi	r24, 0x98	; 152
    11fa:	95 e0       	ldi	r25, 0x05	; 5
    11fc:	2b e8       	ldi	r18, 0x8B	; 139
    11fe:	32 e0       	ldi	r19, 0x02	; 2
    1200:	b9 01       	movw	r22, r18
    1202:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
	// Enable global interrupt
	Enable_Interrupt();
    1206:	78 94       	sei

	// Initialize serial port
	Serial.begin(9600);
    1208:	88 ef       	ldi	r24, 0xF8	; 248
    120a:	97 e0       	ldi	r25, 0x07	; 7
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	55 e2       	ldi	r21, 0x25	; 37
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN14HardwareSerial5beginEl>

	 // Input Output Init
	  pinMode(58,OUTPUT);         // USING ANALOG 4 AS OUTPUT
    1218:	8a e3       	ldi	r24, 0x3A	; 58
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
	  pinMode(59,INPUT);         // using analog 5-7 as input
    1220:	8b e3       	ldi	r24, 0x3B	; 59
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
	  pinMode(60,INPUT);         // using analog 5-7 as input
    1228:	8c e3       	ldi	r24, 0x3C	; 60
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
	  pinMode(61,INPUT);         // using analog 5-7 as input
    1230:	8d e3       	ldi	r24, 0x3D	; 61
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>

	  digitalWrite(58,HIGH);      // Set analog 4 high
    1238:	8a e3       	ldi	r24, 0x3A	; 58
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	  lcd.print("hello, world!3");
    1240:	88 e9       	ldi	r24, 0x98	; 152
    1242:	95 e0       	ldi	r25, 0x05	; 5
    1244:	2a e9       	ldi	r18, 0x9A	; 154
    1246:	32 e0       	ldi	r19, 0x02	; 2
    1248:	b9 01       	movw	r22, r18
    124a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
	radioInitSetup();
    124e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_Z14radioInitSetupv>
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <main>:

	return;
}


int main() {
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	init();
    1260:	0e 94 a0 1b 	call	0x3740	; 0x3740 <init>
	setup();
    1264:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <setup>

	for (;;) {
		loop();
    1268:	0e 94 49 08 	call	0x1092	; 0x1092 <loop>
    126c:	fd cf       	rjmp	.-6      	; 0x1268 <main+0x10>

0000126e <_Z15radio_rxhandlerh>:

	Radio_Transmit(&packet, RADIO_WAIT_FOR_TX);
}


void radio_rxhandler(uint8_t pipenumber)
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	0f 92       	push	r0
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	89 83       	std	Y+1, r24	; 0x01
{
	Radio_Receive(&packet);
    127a:	8b ea       	ldi	r24, 0xAB	; 171
    127c:	95 e0       	ldi	r25, 0x05	; 5
    127e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_Z13Radio_ReceiveP3_rp>
	Serial.print((char *) packet.payload.message.messagecontent);
    1282:	88 ef       	ldi	r24, 0xF8	; 248
    1284:	97 e0       	ldi	r25, 0x07	; 7
    1286:	24 eb       	ldi	r18, 0xB4	; 180
    1288:	35 e0       	ldi	r19, 0x05	; 5
    128a:	b9 01       	movw	r22, r18
    128c:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
}
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <_Z9radioSendh>:

	Radio_Set_Tx_Addr(RemoteStationAddr);

}

void radioSend(uint8_t command) {
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	89 83       	std	Y+1, r24	; 0x01

	packet.type = COMMAND;
    12a4:	10 92 ab 05 	sts	0x05AB, r1

	packet.payload.hovercraftData.command = command;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	80 93 ae 05 	sts	0x05AE, r24

	Radio_Transmit(&packet, RADIO_WAIT_FOR_TX);
    12ae:	8b ea       	ldi	r24, 0xAB	; 171
    12b0:	95 e0       	ldi	r25, 0x05	; 5
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	0e 94 07 11 	call	0x220e	; 0x220e <_Z14Radio_TransmitP3_rp14_radio_tx_wait>
}
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <_Z14radioInitSetupv>:
static uint8_t RemoteStationAddr[RADIO_ADDRESS_LENGTH] = { 0xDE, 0xAD, 0xBE, 0xEF, 0x88 };
static uint8_t BaseStationAddr[RADIO_ADDRESS_LENGTH] = { 0xDE, 0xAD, 0xBE, 0xEF, 0x77 };

static radiopacket_t packet;

void radioInitSetup() {
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Initialize the SPI connection, configure the I/O pins,
	 * and set the register defaults
	 */
	Radio_Init();
    12c8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <_Z10Radio_Initv>
	 * Configure pipe 0 as a receiver.  Pipe 0 has to be enabled
	 * for the radio's link layer protocol to work.  This line
	 * shouldn't be necessary since pipe 0 is enabled by default,
	 * but it's nice to be explicit.
	 */
	Radio_Configure_Rx(RADIO_PIPE_0,BaseStationAddr , ENABLE);
    12cc:	29 ea       	ldi	r18, 0xA9	; 169
    12ce:	32 e0       	ldi	r19, 0x02	; 2
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	b9 01       	movw	r22, r18
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	0e 94 00 10 	call	0x2000	; 0x2000 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>

	Radio_Configure(RADIO_2MBPS, RADIO_HIGHEST_POWER);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	63 e0       	ldi	r22, 0x03	; 3
    12de:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>

	Radio_Set_Tx_Addr(RemoteStationAddr);
    12e2:	8e ea       	ldi	r24, 0xAE	; 174
    12e4:	92 e0       	ldi	r25, 0x02	; 2
    12e6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_Z17Radio_Set_Tx_AddrPh>

}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <_Z11VRbot_writeh>:
  }
  
  return -1;
}

void VRbot_write(uint8_t b)
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <_Z11VRbot_writeh+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <_Z11VRbot_writeh+0x8>
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	8c 83       	std	Y+4, r24	; 0x04
{
  if (_baudRate == 0)
    12fe:	80 91 cd 05 	lds	r24, 0x05CD
    1302:	90 91 ce 05 	lds	r25, 0x05CE
    1306:	a0 91 cf 05 	lds	r26, 0x05CF
    130a:	b0 91 d0 05 	lds	r27, 0x05D0
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	a1 05       	cpc	r26, r1
    1312:	b1 05       	cpc	r27, r1
    1314:	d9 f1       	breq	.+118    	; 0x138c <_Z11VRbot_writeh+0x9c>
    return;
    
  int bitDelay = _bitPeriod - clockCyclesToMicroseconds(50); // a digitalWrite is about 50 cycles
    1316:	80 91 d1 05 	lds	r24, 0x05D1
    131a:	90 91 d2 05 	lds	r25, 0x05D2
    131e:	03 97       	sbiw	r24, 0x03	; 3
    1320:	9b 83       	std	Y+3, r25	; 0x03
    1322:	8a 83       	std	Y+2, r24	; 0x02
  byte mask;

  digitalWrite(_transmitPin, LOW);
    1324:	80 91 cc 05 	lds	r24, 0x05CC
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  delayMicroseconds(bitDelay);
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>

  for (mask = 0x01; mask; mask <<= 1) {
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	1c c0       	rjmp	.+56     	; 0x1374 <_Z11VRbot_writeh+0x84>
    if (b & mask){ // choose bit
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	82 23       	and	r24, r18
    134a:	93 23       	and	r25, r19
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	31 f0       	breq	.+12     	; 0x135c <_Z11VRbot_writeh+0x6c>
      digitalWrite(_transmitPin,HIGH); // send 1
    1350:	80 91 cc 05 	lds	r24, 0x05CC
    1354:	61 e0       	ldi	r22, 0x01	; 1
    1356:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
    135a:	05 c0       	rjmp	.+10     	; 0x1366 <_Z11VRbot_writeh+0x76>
    }
    else{
      digitalWrite(_transmitPin,LOW); // send 1
    135c:	80 91 cc 05 	lds	r24, 0x05CC
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
    }
    delayMicroseconds(bitDelay);
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
  byte mask;

  digitalWrite(_transmitPin, LOW);
  delayMicroseconds(bitDelay);

  for (mask = 0x01; mask; mask <<= 1) {
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	88 0f       	add	r24, r24
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	88 23       	and	r24, r24
    1378:	09 f7       	brne	.-62     	; 0x133c <_Z11VRbot_writeh+0x4c>
      digitalWrite(_transmitPin,LOW); // send 1
    }
    delayMicroseconds(bitDelay);
  }

  digitalWrite(_transmitPin, HIGH);
    137a:	80 91 cc 05 	lds	r24, 0x05CC
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  delayMicroseconds(bitDelay);
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <_Z16VRbot_SetTimeouth>:
  VRbot_write(ARG_ZERO + group);
}



void VRbot_SetTimeout(unsigned char s) {
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	0f 92       	push	r0
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	89 83       	std	Y+1, r24	; 0x01
  VRbot_write(CMD_TIMEOUT);
    13a6:	8f e6       	ldi	r24, 0x6F	; 111
    13a8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z11VRbot_writeh>
  delay(5);
    13ac:	65 e0       	ldi	r22, 0x05	; 5
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>
  VRbot_write(ARG_ZERO + s);
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	8f 5b       	subi	r24, 0xBF	; 191
    13bc:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z11VRbot_writeh>
  delay(5);
    13c0:	65 e0       	ldi	r22, 0x05	; 5
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>
}
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <_Z17VRbot_RecognizeSDh>:
  if (VRbot_read() == STS_SUCCESS)
    return 255;
  return 0;
}

void VRbot_RecognizeSD(unsigned char group) {
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	89 83       	std	Y+1, r24	; 0x01
  VRbot_write(CMD_RECOG_SD);
    13e0:	84 e6       	ldi	r24, 0x64	; 100
    13e2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z11VRbot_writeh>
  delay(5);
    13e6:	65 e0       	ldi	r22, 0x05	; 5
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>
  VRbot_write(ARG_ZERO + group);
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	8f 5b       	subi	r24, 0xBF	; 191
    13f6:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z11VRbot_writeh>
}
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <_Z15VRbot_setup_intv>:
  
}

/*******************************************************************************/

void VRbot_setup_int()
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
{
  _baudRate = 9600;
    140a:	80 e8       	ldi	r24, 0x80	; 128
    140c:	95 e2       	ldi	r25, 0x25	; 37
    140e:	a0 e0       	ldi	r26, 0x00	; 0
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	80 93 cd 05 	sts	0x05CD, r24
    1416:	90 93 ce 05 	sts	0x05CE, r25
    141a:	a0 93 cf 05 	sts	0x05CF, r26
    141e:	b0 93 d0 05 	sts	0x05D0, r27
  _bitPeriod = 1000000 / _baudRate;
    1422:	20 91 cd 05 	lds	r18, 0x05CD
    1426:	30 91 ce 05 	lds	r19, 0x05CE
    142a:	40 91 cf 05 	lds	r20, 0x05CF
    142e:	50 91 d0 05 	lds	r21, 0x05D0
    1432:	80 e4       	ldi	r24, 0x40	; 64
    1434:	92 e4       	ldi	r25, 0x42	; 66
    1436:	af e0       	ldi	r26, 0x0F	; 15
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 3d 24 	call	0x487a	; 0x487a <__divmodsi4>
    1442:	da 01       	movw	r26, r20
    1444:	c9 01       	movw	r24, r18
    1446:	90 93 d2 05 	sts	0x05D2, r25
    144a:	80 93 d1 05 	sts	0x05D1, r24
  _receivePin = 12;
    144e:	8c e0       	ldi	r24, 0x0C	; 12
    1450:	80 93 cb 05 	sts	0x05CB, r24
  _transmitPin = 13;
    1454:	8d e0       	ldi	r24, 0x0D	; 13
    1456:	80 93 cc 05 	sts	0x05CC, r24
  digitalWrite(_transmitPin, HIGH);
    145a:	80 91 cc 05 	lds	r24, 0x05CC
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  delayMicroseconds( _bitPeriod); 
    1464:	80 91 d1 05 	lds	r24, 0x05D1
    1468:	90 91 d2 05 	lds	r25, 0x05D2
    146c:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <_Z10VRbot_readv>:

unsigned char VRbot_read(void)
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	2a 97       	sbiw	r28, 0x0a	; 10
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
{
  uint8_t val = 0;
    148a:	1d 82       	std	Y+5, r1	; 0x05
  int bitDelay = _bitPeriod - clockCyclesToMicroseconds(100);
    148c:	80 91 d1 05 	lds	r24, 0x05D1
    1490:	90 91 d2 05 	lds	r25, 0x05D2
    1494:	06 97       	sbiw	r24, 0x06	; 6
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03
  // one byte of serial data (LSB first)
  // ...--\    /--\/--\/--\/--\/--\/--\/--\/--\/--...
  //	 \--/\--/\--/\--/\--/\--/\--/\--/\--/
  //	start  0   1   2   3   4   5   6   7 stop

  while (digitalRead(_receivePin));
    149a:	80 91 cb 05 	lds	r24, 0x05CB
    149e:	0e 94 83 1c 	call	0x3906	; 0x3906 <digitalRead>
    14a2:	18 86       	std	Y+8, r1	; 0x08
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	11 f0       	breq	.+4      	; 0x14ac <_Z10VRbot_readv+0x36>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	88 87       	std	Y+8, r24	; 0x08
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	99 23       	and	r25, r25
    14b0:	a1 f7       	brne	.-24     	; 0x149a <_Z10VRbot_readv+0x24>

  // confirm that this is a real start bit, not line noise
  if (digitalRead(_receivePin) == LOW) {
    14b2:	80 91 cb 05 	lds	r24, 0x05CB
    14b6:	0e 94 83 1c 	call	0x3906	; 0x3906 <digitalRead>
    14ba:	1f 82       	std	Y+7, r1	; 0x07
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	11 f4       	brne	.+4      	; 0x14c4 <_Z10VRbot_readv+0x4e>
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	8f 83       	std	Y+7, r24	; 0x07
    14c4:	9f 81       	ldd	r25, Y+7	; 0x07
    14c6:	99 23       	and	r25, r25
    14c8:	e1 f1       	breq	.+120    	; 0x1542 <_Z10VRbot_readv+0xcc>
    // frame start indicated by a falling edge and low start bit
    // jump to the middle of the low start bit
    delayMicroseconds(bitDelay / 2 - clockCyclesToMicroseconds(50));
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	9a 87       	std	Y+10, r25	; 0x0a
    14d0:	89 87       	std	Y+9, r24	; 0x09
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	99 23       	and	r25, r25
    14d8:	2c f4       	brge	.+10     	; 0x14e4 <_Z10VRbot_readv+0x6e>
    14da:	89 85       	ldd	r24, Y+9	; 0x09
    14dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	9a 87       	std	Y+10, r25	; 0x0a
    14e2:	89 87       	std	Y+9, r24	; 0x09
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	95 95       	asr	r25
    14ea:	87 95       	ror	r24
    14ec:	03 97       	sbiw	r24, 0x03	; 3
    14ee:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
	
    // offset of the bit in the byte: from 0 (LSB) to 7 (MSB)
    for (int offset = 0; offset < 8; offset++) {
    14f2:	1a 82       	std	Y+2, r1	; 0x02
    14f4:	19 82       	std	Y+1, r1	; 0x01
    14f6:	17 c0       	rjmp	.+46     	; 0x1526 <_Z10VRbot_readv+0xb0>
	// jump to middle of next bit
	delayMicroseconds(bitDelay);
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
	
	// read bit
	val |= digitalRead(_receivePin) << offset;
    1500:	80 91 cb 05 	lds	r24, 0x05CB
    1504:	0e 94 83 1c 	call	0x3906	; 0x3906 <digitalRead>
    1508:	09 80       	ldd	r0, Y+1	; 0x01
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <_Z10VRbot_readv+0x9a>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <_Z10VRbot_readv+0x96>
    1514:	98 2f       	mov	r25, r24
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	89 2b       	or	r24, r25
    151a:	8d 83       	std	Y+5, r24	; 0x05
    // frame start indicated by a falling edge and low start bit
    // jump to the middle of the low start bit
    delayMicroseconds(bitDelay / 2 - clockCyclesToMicroseconds(50));
	
    // offset of the bit in the byte: from 0 (LSB) to 7 (MSB)
    for (int offset = 0; offset < 8; offset++) {
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	88 30       	cpi	r24, 0x08	; 8
    152c:	91 05       	cpc	r25, r1
    152e:	24 f3       	brlt	.-56     	; 0x14f8 <_Z10VRbot_readv+0x82>
	
	// read bit
	val |= digitalRead(_receivePin) << offset;
    }
	
    delayMicroseconds(_bitPeriod);
    1530:	80 91 d1 05 	lds	r24, 0x05D1
    1534:	90 91 d2 05 	lds	r25, 0x05D2
    1538:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
    
    return val;
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <_Z10VRbot_readv+0xd0>
  }
  
  return -1;
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	8e 83       	std	Y+6, r24	; 0x06
    1546:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1548:	2a 96       	adiw	r28, 0x0a	; 10
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <_Z17VRbot_CheckResultv>:
  delay(5);
  VRbot_write(ARG_ZERO + s);
  delay(5);
}

signed char VRbot_CheckResult(void) {
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <_Z17VRbot_CheckResultv+0x6>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
  
  unsigned char rx;
  rx = VRbot_read();
    1564:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_Z10VRbot_readv>
    1568:	89 83       	std	Y+1, r24	; 0x01
  if (rx == STS_SIMILAR || rx == STS_RESULT) {
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	83 37       	cpi	r24, 0x73	; 115
    156e:	19 f0       	breq	.+6      	; 0x1576 <_Z17VRbot_CheckResultv+0x1c>
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	82 37       	cpi	r24, 0x72	; 114
    1574:	71 f4       	brne	.+28     	; 0x1592 <_Z17VRbot_CheckResultv+0x38>
    delay(5);
    1576:	65 e0       	ldi	r22, 0x05	; 5
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>
    VRbot_write(ARG_ACK);
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z11VRbot_writeh>
    return (VRbot_read() - ARG_ZERO);
    1588:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_Z10VRbot_readv>
    158c:	81 54       	subi	r24, 0x41	; 65
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	08 c0       	rjmp	.+16     	; 0x15a2 <_Z17VRbot_CheckResultv+0x48>
  }
  if (rx == STS_TIMEOUT)
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	84 37       	cpi	r24, 0x74	; 116
    1596:	19 f4       	brne	.+6      	; 0x159e <_Z17VRbot_CheckResultv+0x44>
    return -1;
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	8a 83       	std	Y+2, r24	; 0x02
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <_Z17VRbot_CheckResultv+0x48>
    
  return -2;
    159e:	8e ef       	ldi	r24, 0xFE	; 254
    15a0:	8a 83       	std	Y+2, r24	; 0x02
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <_Z17VRbot_SetLanguageh>:
      return 255;
  }
  return 0;
}

unsigned char VRbot_SetLanguage(unsigned char lang) {
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <_Z17VRbot_SetLanguageh+0x6>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
        
  VRbot_write(CMD_LANGUAGE);
    15bc:	8c e6       	ldi	r24, 0x6C	; 108
    15be:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z11VRbot_writeh>
  delay(5);
    15c2:	65 e0       	ldi	r22, 0x05	; 5
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>
  VRbot_write(ARG_ZERO + lang);
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	8f 5b       	subi	r24, 0xBF	; 191
    15d2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z11VRbot_writeh>

  if (VRbot_read() == STS_SUCCESS)
    15d6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_Z10VRbot_readv>
    15da:	1b 82       	std	Y+3, r1	; 0x03
    15dc:	8f 36       	cpi	r24, 0x6F	; 111
    15de:	11 f4       	brne	.+4      	; 0x15e4 <_Z17VRbot_SetLanguageh+0x36>
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 23       	and	r24, r24
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <_Z17VRbot_SetLanguageh+0x42>
    return 255;
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	8a 83       	std	Y+2, r24	; 0x02
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <_Z17VRbot_SetLanguageh+0x44>
  return 0;
    15f0:	1a 82       	std	Y+2, r1	; 0x02
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <_Z12VRbot_Detectv>:
  delayMicroseconds(bitDelay);
}

/*******************************************************************************/

unsigned char VRbot_Detect(void) {
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <_Z12VRbot_Detectv+0x6>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
  unsigned char i;
  for (i = 0; i < 5; ++i) {
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	19 c0       	rjmp	.+50     	; 0x1642 <_Z12VRbot_Detectv+0x42>
    delay(100);    
    1610:	64 e6       	ldi	r22, 0x64	; 100
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>
    VRbot_write(CMD_BREAK);        
    161c:	82 e6       	ldi	r24, 0x62	; 98
    161e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z11VRbot_writeh>
    if ( VRbot_read() == STS_SUCCESS)
    1622:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_Z10VRbot_readv>
    1626:	1b 82       	std	Y+3, r1	; 0x03
    1628:	8f 36       	cpi	r24, 0x6F	; 111
    162a:	11 f4       	brne	.+4      	; 0x1630 <_Z12VRbot_Detectv+0x30>
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	8b 83       	std	Y+3, r24	; 0x03
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	88 23       	and	r24, r24
    1634:	19 f0       	breq	.+6      	; 0x163c <_Z12VRbot_Detectv+0x3c>
      return 255;
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	8a 83       	std	Y+2, r24	; 0x02
    163a:	07 c0       	rjmp	.+14     	; 0x164a <_Z12VRbot_Detectv+0x4a>

/*******************************************************************************/

unsigned char VRbot_Detect(void) {
  unsigned char i;
  for (i = 0; i < 5; ++i) {
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	8f 5f       	subi	r24, 0xFF	; 255
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	85 30       	cpi	r24, 0x05	; 5
    1646:	20 f3       	brcs	.-56     	; 0x1610 <_Z12VRbot_Detectv+0x10>
    delay(100);    
    VRbot_write(CMD_BREAK);        
    if ( VRbot_read() == STS_SUCCESS)
      return 255;
  }
  return 0;
    1648:	1a 82       	std	Y+2, r1	; 0x02
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <_Z14SD_Recognitionv>:
// Speaker Dependent recognition function
// Wait for user trigger word set by user with VRBot GUI
// Set wordset Group 1 
// Wait for command 0 or command 1 set by user with VRBot GUI, other commands are ignored

void SD_Recognition()
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <_Z14SD_Recognitionv+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <_Z14SD_Recognitionv+0x8>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
{
  int cmd;
    
  Serial.println("Say 'Hovercraft'!");
    1664:	88 ef       	ldi	r24, 0xF8	; 248
    1666:	97 e0       	ldi	r25, 0x07	; 7
    1668:	23 eb       	ldi	r18, 0xB3	; 179
    166a:	32 e0       	ldi	r19, 0x02	; 2
    166c:	b9 01       	movw	r22, r18
    166e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
  lcd.clear();
    1672:	88 e9       	ldi	r24, 0x98	; 152
    1674:	95 e0       	ldi	r25, 0x05	; 5
    1676:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN13LiquidCrystal5clearEv>
  lcd.setCursor(0, 0);      
    167a:	88 e9       	ldi	r24, 0x98	; 152
    167c:	95 e0       	ldi	r25, 0x05	; 5
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
  lcd.print("Say 'Hovercraft'");
    1686:	88 e9       	ldi	r24, 0x98	; 152
    1688:	95 e0       	ldi	r25, 0x05	; 5
    168a:	25 ec       	ldi	r18, 0xC5	; 197
    168c:	32 e0       	ldi	r19, 0x02	; 2
    168e:	b9 01       	movw	r22, r18
    1690:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
  
  VRbot_RecognizeSD(0);      // start SD trigger word recognition and wait for trigger
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_Z17VRbot_RecognizeSDh>
  cmd = VRbot_CheckResult(); // check recognition result
    169a:	0e 94 ad 0a 	call	0x155a	; 0x155a <_Z17VRbot_CheckResultv>
    169e:	99 27       	eor	r25, r25
    16a0:	87 fd       	sbrc	r24, 7
    16a2:	90 95       	com	r25
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01

  if( cmd == -1) // timeout 
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	2f ef       	ldi	r18, 0xFF	; 255
    16ae:	8f 3f       	cpi	r24, 0xFF	; 255
    16b0:	92 07       	cpc	r25, r18
    16b2:	41 f4       	brne	.+16     	; 0x16c4 <_Z14SD_Recognitionv+0x6c>
  {
    Serial.println("Timeout");
    16b4:	88 ef       	ldi	r24, 0xF8	; 248
    16b6:	97 e0       	ldi	r25, 0x07	; 7
    16b8:	26 ed       	ldi	r18, 0xD6	; 214
    16ba:	32 e0       	ldi	r19, 0x02	; 2
    16bc:	b9 01       	movw	r22, r18
    16be:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
    16c2:	34 c1       	rjmp	.+616    	; 0x192c <_Z14SD_Recognitionv+0x2d4>
    return;
  }
  
  if( cmd == -2) // error 
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	2f ef       	ldi	r18, 0xFF	; 255
    16ca:	8e 3f       	cpi	r24, 0xFE	; 254
    16cc:	92 07       	cpc	r25, r18
    16ce:	a9 f4       	brne	.+42     	; 0x16fa <_Z14SD_Recognitionv+0xa2>
  {
    lcd.setCursor(0, 1);      
    16d0:	88 e9       	ldi	r24, 0x98	; 152
    16d2:	95 e0       	ldi	r25, 0x05	; 5
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
    lcd.print("Error");
    16dc:	88 e9       	ldi	r24, 0x98	; 152
    16de:	95 e0       	ldi	r25, 0x05	; 5
    16e0:	2e ed       	ldi	r18, 0xDE	; 222
    16e2:	32 e0       	ldi	r19, 0x02	; 2
    16e4:	b9 01       	movw	r22, r18
    16e6:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
  
    Serial.println("Error Trigger");
    16ea:	88 ef       	ldi	r24, 0xF8	; 248
    16ec:	97 e0       	ldi	r25, 0x07	; 7
    16ee:	24 ee       	ldi	r18, 0xE4	; 228
    16f0:	32 e0       	ldi	r19, 0x02	; 2
    16f2:	b9 01       	movw	r22, r18
    16f4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
    16f8:	19 c1       	rjmp	.+562    	; 0x192c <_Z14SD_Recognitionv+0x2d4>
    return;
  } 
  
  Serial.println("Group 1");
    16fa:	88 ef       	ldi	r24, 0xF8	; 248
    16fc:	97 e0       	ldi	r25, 0x07	; 7
    16fe:	22 ef       	ldi	r18, 0xF2	; 242
    1700:	32 e0       	ldi	r19, 0x02	; 2
    1702:	b9 01       	movw	r22, r18
    1704:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
  Serial.println("Say a command!");
    1708:	88 ef       	ldi	r24, 0xF8	; 248
    170a:	97 e0       	ldi	r25, 0x07	; 7
    170c:	2a ef       	ldi	r18, 0xFA	; 250
    170e:	32 e0       	ldi	r19, 0x02	; 2
    1710:	b9 01       	movw	r22, r18
    1712:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
  lcd.clear();
    1716:	88 e9       	ldi	r24, 0x98	; 152
    1718:	95 e0       	ldi	r25, 0x05	; 5
    171a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN13LiquidCrystal5clearEv>
  lcd.setCursor(0, 0);      
    171e:	88 e9       	ldi	r24, 0x98	; 152
    1720:	95 e0       	ldi	r25, 0x05	; 5
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
  lcd.print("Command?");
    172a:	88 e9       	ldi	r24, 0x98	; 152
    172c:	95 e0       	ldi	r25, 0x05	; 5
    172e:	29 e0       	ldi	r18, 0x09	; 9
    1730:	33 e0       	ldi	r19, 0x03	; 3
    1732:	b9 01       	movw	r22, r18
    1734:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
  radioSend(NONE);
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
  
  VRbot_RecognizeSD(1);        // start SD recognition group 1 and wait for a command
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_Z17VRbot_RecognizeSDh>
  cmd = VRbot_CheckResult();   // check recognition result
    1744:	0e 94 ad 0a 	call	0x155a	; 0x155a <_Z17VRbot_CheckResultv>
    1748:	99 27       	eor	r25, r25
    174a:	87 fd       	sbrc	r24, 7
    174c:	90 95       	com	r25
    174e:	9a 83       	std	Y+2, r25	; 0x02
    1750:	89 83       	std	Y+1, r24	; 0x01
 
  switch (cmd){
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	9c 83       	std	Y+4, r25	; 0x04
    1758:	8b 83       	std	Y+3, r24	; 0x03
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <_Z14SD_Recognitionv+0x10e>
    1764:	6f c0       	rjmp	.+222    	; 0x1844 <_Z14SD_Recognitionv+0x1ec>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	91 05       	cpc	r25, r1
    176e:	ac f4       	brge	.+42     	; 0x179a <_Z14SD_Recognitionv+0x142>
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	2f ef       	ldi	r18, 0xFF	; 255
    1776:	8f 3f       	cpi	r24, 0xFF	; 255
    1778:	92 07       	cpc	r25, r18
    177a:	b9 f1       	breq	.+110    	; 0x17ea <_Z14SD_Recognitionv+0x192>
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	2f ef       	ldi	r18, 0xFF	; 255
    1782:	8f 3f       	cpi	r24, 0xFF	; 255
    1784:	92 07       	cpc	r25, r18
    1786:	11 f0       	breq	.+4      	; 0x178c <_Z14SD_Recognitionv+0x134>
    1788:	0c f0       	brlt	.+2      	; 0x178c <_Z14SD_Recognitionv+0x134>
    178a:	44 c0       	rjmp	.+136    	; 0x1814 <_Z14SD_Recognitionv+0x1bc>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	2f ef       	ldi	r18, 0xFF	; 255
    1792:	8e 3f       	cpi	r24, 0xFE	; 254
    1794:	92 07       	cpc	r25, r18
    1796:	a1 f0       	breq	.+40     	; 0x17c0 <_Z14SD_Recognitionv+0x168>
    1798:	b5 c0       	rjmp	.+362    	; 0x1904 <_Z14SD_Recognitionv+0x2ac>
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <_Z14SD_Recognitionv+0x14e>
    17a4:	7f c0       	rjmp	.+254    	; 0x18a4 <_Z14SD_Recognitionv+0x24c>
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	91 05       	cpc	r25, r1
    17ae:	0c f4       	brge	.+2      	; 0x17b2 <_Z14SD_Recognitionv+0x15a>
    17b0:	61 c0       	rjmp	.+194    	; 0x1874 <_Z14SD_Recognitionv+0x21c>
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	84 30       	cpi	r24, 0x04	; 4
    17b8:	91 05       	cpc	r25, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <_Z14SD_Recognitionv+0x166>
    17bc:	8b c0       	rjmp	.+278    	; 0x18d4 <_Z14SD_Recognitionv+0x27c>
    17be:	a2 c0       	rjmp	.+324    	; 0x1904 <_Z14SD_Recognitionv+0x2ac>
    
    case -2: // Error
      lcd.setCursor(0, 1);      
    17c0:	88 e9       	ldi	r24, 0x98	; 152
    17c2:	95 e0       	ldi	r25, 0x05	; 5
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
      lcd.print("Error");
    17cc:	88 e9       	ldi	r24, 0x98	; 152
    17ce:	95 e0       	ldi	r25, 0x05	; 5
    17d0:	2e ed       	ldi	r18, 0xDE	; 222
    17d2:	32 e0       	ldi	r19, 0x02	; 2
    17d4:	b9 01       	movw	r22, r18
    17d6:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
    
      Serial.println("Error");
    17da:	88 ef       	ldi	r24, 0xF8	; 248
    17dc:	97 e0       	ldi	r25, 0x07	; 7
    17de:	2e ed       	ldi	r18, 0xDE	; 222
    17e0:	32 e0       	ldi	r19, 0x02	; 2
    17e2:	b9 01       	movw	r22, r18
    17e4:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
    17e8:	a1 c0       	rjmp	.+322    	; 0x192c <_Z14SD_Recognitionv+0x2d4>
      break;

    case -1: // Timeout
      lcd.setCursor(0, 1);      
    17ea:	88 e9       	ldi	r24, 0x98	; 152
    17ec:	95 e0       	ldi	r25, 0x05	; 5
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	41 e0       	ldi	r20, 0x01	; 1
    17f2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
      lcd.print("Timeout");
    17f6:	88 e9       	ldi	r24, 0x98	; 152
    17f8:	95 e0       	ldi	r25, 0x05	; 5
    17fa:	26 ed       	ldi	r18, 0xD6	; 214
    17fc:	32 e0       	ldi	r19, 0x02	; 2
    17fe:	b9 01       	movw	r22, r18
    1800:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
    
      Serial.println("Timeout");
    1804:	88 ef       	ldi	r24, 0xF8	; 248
    1806:	97 e0       	ldi	r25, 0x07	; 7
    1808:	26 ed       	ldi	r18, 0xD6	; 214
    180a:	32 e0       	ldi	r19, 0x02	; 2
    180c:	b9 01       	movw	r22, r18
    180e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
    1812:	8c c0       	rjmp	.+280    	; 0x192c <_Z14SD_Recognitionv+0x2d4>
      break;
  
    case 0: // USER SD WORD 0
      Serial.println("Command: Turn Left");
    1814:	88 ef       	ldi	r24, 0xF8	; 248
    1816:	97 e0       	ldi	r25, 0x07	; 7
    1818:	22 e1       	ldi	r18, 0x12	; 18
    181a:	33 e0       	ldi	r19, 0x03	; 3
    181c:	b9 01       	movw	r22, r18
    181e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
      lcd.setCursor(0, 1);      
    1822:	88 e9       	ldi	r24, 0x98	; 152
    1824:	95 e0       	ldi	r25, 0x05	; 5
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
      lcd.print("Turn Left");
    182e:	88 e9       	ldi	r24, 0x98	; 152
    1830:	95 e0       	ldi	r25, 0x05	; 5
    1832:	25 e2       	ldi	r18, 0x25	; 37
    1834:	33 e0       	ldi	r19, 0x03	; 3
    1836:	b9 01       	movw	r22, r18
    1838:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
      radioSend(TURN_LEFT);
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
    1842:	74 c0       	rjmp	.+232    	; 0x192c <_Z14SD_Recognitionv+0x2d4>
      
      break;

    case 1: // USER SD WORD 1
      Serial.println("Commmand: Turn Right");
    1844:	88 ef       	ldi	r24, 0xF8	; 248
    1846:	97 e0       	ldi	r25, 0x07	; 7
    1848:	2f e2       	ldi	r18, 0x2F	; 47
    184a:	33 e0       	ldi	r19, 0x03	; 3
    184c:	b9 01       	movw	r22, r18
    184e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
      lcd.setCursor(0, 1);      
    1852:	88 e9       	ldi	r24, 0x98	; 152
    1854:	95 e0       	ldi	r25, 0x05	; 5
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
      lcd.print("Turn Right");
    185e:	88 e9       	ldi	r24, 0x98	; 152
    1860:	95 e0       	ldi	r25, 0x05	; 5
    1862:	24 e4       	ldi	r18, 0x44	; 68
    1864:	33 e0       	ldi	r19, 0x03	; 3
    1866:	b9 01       	movw	r22, r18
    1868:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
      radioSend(TURN_RIGHT);
    186c:	82 e0       	ldi	r24, 0x02	; 2
    186e:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
    1872:	5c c0       	rjmp	.+184    	; 0x192c <_Z14SD_Recognitionv+0x2d4>
      
      break;
  
    case 2: // USER SD WORD 2
      Serial.println("Commmand: Stop");
    1874:	88 ef       	ldi	r24, 0xF8	; 248
    1876:	97 e0       	ldi	r25, 0x07	; 7
    1878:	2f e4       	ldi	r18, 0x4F	; 79
    187a:	33 e0       	ldi	r19, 0x03	; 3
    187c:	b9 01       	movw	r22, r18
    187e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
      lcd.setCursor(0, 1);      
    1882:	88 e9       	ldi	r24, 0x98	; 152
    1884:	95 e0       	ldi	r25, 0x05	; 5
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
      lcd.print("Stop");
    188e:	88 e9       	ldi	r24, 0x98	; 152
    1890:	95 e0       	ldi	r25, 0x05	; 5
    1892:	2e e5       	ldi	r18, 0x5E	; 94
    1894:	33 e0       	ldi	r19, 0x03	; 3
    1896:	b9 01       	movw	r22, r18
    1898:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
      radioSend(STOP);
    189c:	85 e0       	ldi	r24, 0x05	; 5
    189e:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
    18a2:	44 c0       	rjmp	.+136    	; 0x192c <_Z14SD_Recognitionv+0x2d4>
      break;
      
    case 3: // USER SD WORD 3
      Serial.println("Commmand: Forward");
    18a4:	88 ef       	ldi	r24, 0xF8	; 248
    18a6:	97 e0       	ldi	r25, 0x07	; 7
    18a8:	23 e6       	ldi	r18, 0x63	; 99
    18aa:	33 e0       	ldi	r19, 0x03	; 3
    18ac:	b9 01       	movw	r22, r18
    18ae:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
      lcd.setCursor(0, 1);      
    18b2:	88 e9       	ldi	r24, 0x98	; 152
    18b4:	95 e0       	ldi	r25, 0x05	; 5
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
      lcd.print("Forward");
    18be:	88 e9       	ldi	r24, 0x98	; 152
    18c0:	95 e0       	ldi	r25, 0x05	; 5
    18c2:	25 e7       	ldi	r18, 0x75	; 117
    18c4:	33 e0       	ldi	r19, 0x03	; 3
    18c6:	b9 01       	movw	r22, r18
    18c8:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
      radioSend(FORWARD);
    18cc:	86 e0       	ldi	r24, 0x06	; 6
    18ce:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
    18d2:	2c c0       	rjmp	.+88     	; 0x192c <_Z14SD_Recognitionv+0x2d4>
      break;  
      
    case 4: // USER SD WORD 4
      Serial.println("Commmand: Reverse");
    18d4:	88 ef       	ldi	r24, 0xF8	; 248
    18d6:	97 e0       	ldi	r25, 0x07	; 7
    18d8:	2d e7       	ldi	r18, 0x7D	; 125
    18da:	33 e0       	ldi	r19, 0x03	; 3
    18dc:	b9 01       	movw	r22, r18
    18de:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
      lcd.setCursor(0, 1);      
    18e2:	88 e9       	ldi	r24, 0x98	; 152
    18e4:	95 e0       	ldi	r25, 0x05	; 5
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
      lcd.print("Reverse");
    18ee:	88 e9       	ldi	r24, 0x98	; 152
    18f0:	95 e0       	ldi	r25, 0x05	; 5
    18f2:	2f e8       	ldi	r18, 0x8F	; 143
    18f4:	33 e0       	ldi	r19, 0x03	; 3
    18f6:	b9 01       	movw	r22, r18
    18f8:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
      radioSend(REVERSE);
    18fc:	87 e0       	ldi	r24, 0x07	; 7
    18fe:	0e 94 4c 09 	call	0x1298	; 0x1298 <_Z9radioSendh>
    1902:	14 c0       	rjmp	.+40     	; 0x192c <_Z14SD_Recognitionv+0x2d4>
      break;
      
    default: // Other command
      lcd.setCursor(0, 1);      
    1904:	88 e9       	ldi	r24, 0x98	; 152
    1906:	95 e0       	ldi	r25, 0x05	; 5
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
      lcd.print("Cmd Error");
    1910:	88 e9       	ldi	r24, 0x98	; 152
    1912:	95 e0       	ldi	r25, 0x05	; 5
    1914:	27 e9       	ldi	r18, 0x97	; 151
    1916:	33 e0       	ldi	r19, 0x03	; 3
    1918:	b9 01       	movw	r22, r18
    191a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
    
      Serial.println("Commmand: error!");
    191e:	88 ef       	ldi	r24, 0xF8	; 248
    1920:	97 e0       	ldi	r25, 0x07	; 7
    1922:	21 ea       	ldi	r18, 0xA1	; 161
    1924:	33 e0       	ldi	r19, 0x03	; 3
    1926:	b9 01       	movw	r22, r18
    1928:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
      break;
    
  }
  
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <_Z11vrbot_setupv>:
int _bitPeriod;
char message[20];



void vrbot_setup(){  
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <_Z11vrbot_setupv+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <_Z11vrbot_setupv+0x8>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <_Z11vrbot_setupv+0xa>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
  
  // PC UART Init
  pinMode(0, INPUT);         // sets the digital pin as input
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
  pinMode(1, OUTPUT);        // sets the digital pin as output
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>

  // VRbot UART Init
  pinMode(12, INPUT);        // sets the digital pin as input
    1958:	8c e0       	ldi	r24, 0x0C	; 12
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
  pinMode(13, OUTPUT);       // sets the digital pin as output
    1960:	8d e0       	ldi	r24, 0x0D	; 13
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
  
  // Input Output Init
  pinMode(2,INPUT);          // sets the digital pin as input
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
  pinMode(3,OUTPUT);         // sets the digital pin as output
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
  pinMode(4,OUTPUT);         // sets the digital pin as output
    1978:	84 e0       	ldi	r24, 0x04	; 4
    197a:	61 e0       	ldi	r22, 0x01	; 1
    197c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
  
  digitalWrite(3,HIGH);      // Set pin 3 high
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	61 e0       	ldi	r22, 0x01	; 1
    1984:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
  digitalWrite(4,LOW);       // Set pin 4 low
    1988:	84 e0       	ldi	r24, 0x04	; 4
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
 
  // connect Di2 to Di3 to enter Normal mode - Di2 is high
  // connect Di2 to Di4 to enter Bridge mode - Di2 is low
  // bridge mode allow direct communication between VRbot module and VRbot GUI software

  if (digitalRead(2)==LOW){   // if Di2 is LOW enter Bridge mode 
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	0e 94 83 1c 	call	0x3906	; 0x3906 <digitalRead>
    1996:	1e 82       	std	Y+6, r1	; 0x06
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	11 f4       	brne	.+4      	; 0x19a0 <_Z11vrbot_setupv+0x66>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	8e 83       	std	Y+6, r24	; 0x06
    19a0:	8e 81       	ldd	r24, Y+6	; 0x06
    19a2:	88 23       	and	r24, r24
    19a4:	11 f1       	breq	.+68     	; 0x19ea <_Z11vrbot_setupv+0xb0>

		lcd.setCursor(0, 1);      
    19a6:	88 e9       	ldi	r24, 0x98	; 152
    19a8:	95 e0       	ldi	r25, 0x05	; 5
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
        lcd.print("bridge mode");
    19b2:	88 e9       	ldi	r24, 0x98	; 152
    19b4:	95 e0       	ldi	r25, 0x05	; 5
    19b6:	22 eb       	ldi	r18, 0xB2	; 178
    19b8:	33 e0       	ldi	r19, 0x03	; 3
    19ba:	b9 01       	movw	r22, r18
    19bc:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
      while(1)
      {
        int pc2vr = digitalRead(0);
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	0e 94 83 1c 	call	0x3906	; 0x3906 <digitalRead>
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
        digitalWrite(13, pc2vr);
    19ca:	9b 81       	ldd	r25, Y+3	; 0x03
    19cc:	8d e0       	ldi	r24, 0x0D	; 13
    19ce:	69 2f       	mov	r22, r25
    19d0:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
    
        int vr2pc = digitalRead(12);
    19d4:	8c e0       	ldi	r24, 0x0C	; 12
    19d6:	0e 94 83 1c 	call	0x3906	; 0x3906 <digitalRead>
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
        digitalWrite(1, vr2pc);
    19de:	99 81       	ldd	r25, Y+1	; 0x01
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	69 2f       	mov	r22, r25
    19e4:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
    19e8:	eb cf       	rjmp	.-42     	; 0x19c0 <_Z11vrbot_setupv+0x86>
     }
  } 

  // if Di2 is HIGH enter Normal mode
  Serial.begin(9600);
    19ea:	88 ef       	ldi	r24, 0xF8	; 248
    19ec:	97 e0       	ldi	r25, 0x07	; 7
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	55 e2       	ldi	r21, 0x25	; 37
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN14HardwareSerial5beginEl>
  delay(200);
    19fa:	68 ec       	ldi	r22, 0xC8	; 200
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>
  Serial.println("Arduino 2009 VRBot control program");
    1a06:	88 ef       	ldi	r24, 0xF8	; 248
    1a08:	97 e0       	ldi	r25, 0x07	; 7
    1a0a:	2e eb       	ldi	r18, 0xBE	; 190
    1a0c:	33 e0       	ldi	r19, 0x03	; 3
    1a0e:	b9 01       	movw	r22, r18
    1a10:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
  Serial.println("Normal Mode");
    1a14:	88 ef       	ldi	r24, 0xF8	; 248
    1a16:	97 e0       	ldi	r25, 0x07	; 7
    1a18:	21 ee       	ldi	r18, 0xE1	; 225
    1a1a:	33 e0       	ldi	r19, 0x03	; 3
    1a1c:	b9 01       	movw	r22, r18
    1a1e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
  lcd.clear();
    1a22:	88 e9       	ldi	r24, 0x98	; 152
    1a24:	95 e0       	ldi	r25, 0x05	; 5
    1a26:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN13LiquidCrystal5clearEv>
  lcd.setCursor(0, 0);      
    1a2a:	88 e9       	ldi	r24, 0x98	; 152
    1a2c:	95 e0       	ldi	r25, 0x05	; 5
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
  lcd.print("normal mode");
    1a36:	88 e9       	ldi	r24, 0x98	; 152
    1a38:	95 e0       	ldi	r25, 0x05	; 5
    1a3a:	2d ee       	ldi	r18, 0xED	; 237
    1a3c:	33 e0       	ldi	r19, 0x03	; 3
    1a3e:	b9 01       	movw	r22, r18
    1a40:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
  
  // Set up and detect VRbot
  
  VRbot_setup_int();  
    1a44:	0e 94 01 0a 	call	0x1402	; 0x1402 <_Z15VRbot_setup_intv>
   lcd.clear();
    1a48:	88 e9       	ldi	r24, 0x98	; 152
    1a4a:	95 e0       	ldi	r25, 0x05	; 5
    1a4c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN13LiquidCrystal5clearEv>
  lcd.setCursor(0, 0);      
    1a50:	88 e9       	ldi	r24, 0x98	; 152
    1a52:	95 e0       	ldi	r25, 0x05	; 5
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
  lcd.print("normal mode2");
    1a5c:	88 e9       	ldi	r24, 0x98	; 152
    1a5e:	95 e0       	ldi	r25, 0x05	; 5
    1a60:	29 ef       	ldi	r18, 0xF9	; 249
    1a62:	33 e0       	ldi	r19, 0x03	; 3
    1a64:	b9 01       	movw	r22, r18
    1a66:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
  
  if (!VRbot_Detect())                 
    1a6a:	0e 94 00 0b 	call	0x1600	; 0x1600 <_Z12VRbot_Detectv>
    1a6e:	1d 82       	std	Y+5, r1	; 0x05
    1a70:	88 23       	and	r24, r24
    1a72:	11 f4       	brne	.+4      	; 0x1a78 <_Z11vrbot_setupv+0x13e>
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	88 23       	and	r24, r24
    1a7c:	41 f0       	breq	.+16     	; 0x1a8e <_Z11vrbot_setupv+0x154>
     Serial.println("VRbot NA");
    1a7e:	88 ef       	ldi	r24, 0xF8	; 248
    1a80:	97 e0       	ldi	r25, 0x07	; 7
    1a82:	26 e0       	ldi	r18, 0x06	; 6
    1a84:	34 e0       	ldi	r19, 0x04	; 4
    1a86:	b9 01       	movw	r22, r18
    1a88:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
    1a8c:	1b c0       	rjmp	.+54     	; 0x1ac4 <_Z11vrbot_setupv+0x18a>
  else {
       Serial.println("VRbot detected");
    1a8e:	88 ef       	ldi	r24, 0xF8	; 248
    1a90:	97 e0       	ldi	r25, 0x07	; 7
    1a92:	2f e0       	ldi	r18, 0x0F	; 15
    1a94:	34 e0       	ldi	r19, 0x04	; 4
    1a96:	b9 01       	movw	r22, r18
    1a98:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
       
       // Set VRbot timeout to 5 seconds
       Serial.println("Setting timeout to: 5 seconds");
    1a9c:	88 ef       	ldi	r24, 0xF8	; 248
    1a9e:	97 e0       	ldi	r25, 0x07	; 7
    1aa0:	2e e1       	ldi	r18, 0x1E	; 30
    1aa2:	34 e0       	ldi	r19, 0x04	; 4
    1aa4:	b9 01       	movw	r22, r18
    1aa6:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
       VRbot_SetTimeout(5);             
    1aaa:	85 e0       	ldi	r24, 0x05	; 5
    1aac:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z16VRbot_SetTimeouth>
       
       // Set VRbot language to English       
       Serial.println("Setting Language to: English");
    1ab0:	88 ef       	ldi	r24, 0xF8	; 248
    1ab2:	97 e0       	ldi	r25, 0x07	; 7
    1ab4:	2c e3       	ldi	r18, 0x3C	; 60
    1ab6:	34 e0       	ldi	r19, 0x04	; 4
    1ab8:	b9 01       	movw	r22, r18
    1aba:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5Print7printlnEPKc>
       VRbot_SetLanguage(0);  
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_Z17VRbot_SetLanguageh>
  }  
    lcd.setCursor(0, 0);      
    1ac4:	88 e9       	ldi	r24, 0x98	; 152
    1ac6:	95 e0       	ldi	r25, 0x05	; 5
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN13LiquidCrystal9setCursorEhh>
  lcd.print("normal mode3");
    1ad0:	88 e9       	ldi	r24, 0x98	; 152
    1ad2:	95 e0       	ldi	r25, 0x05	; 5
    1ad4:	29 e5       	ldi	r18, 0x59	; 89
    1ad6:	34 e0       	ldi	r19, 0x04	; 4
    1ad8:	b9 01       	movw	r22, r18
    1ada:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
  
}
    1ade:	26 96       	adiw	r28, 0x06	; 6
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <_Z15Radio_Drop_Ratev>:

	return result;
}

// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Drop_Rate()
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <_Z15Radio_Drop_Ratev+0x6>
    1af6:	0f 92       	push	r0
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
{
	uint16_t wh = tx_history;
    1afc:	80 91 66 04 	lds	r24, 0x0466
    1b00:	90 91 67 04 	lds	r25, 0x0467
    1b04:	9b 83       	std	Y+3, r25	; 0x03
    1b06:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t weight = 0;
    1b08:	19 82       	std	Y+1, r1	; 0x01
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <_Z15Radio_Drop_Ratev+0x3a>
	while (wh != 0)
	{
		if ((wh & 1) != 0) weight++;
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b10:	81 70       	andi	r24, 0x01	; 1
    1b12:	90 70       	andi	r25, 0x00	; 0
    1b14:	88 23       	and	r24, r24
    1b16:	19 f0       	breq	.+6      	; 0x1b1e <_Z15Radio_Drop_Ratev+0x2e>
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	89 83       	std	Y+1, r24	; 0x01
		wh >>= 1;
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	9b 81       	ldd	r25, Y+3	; 0x03
    1b22:	96 95       	lsr	r25
    1b24:	87 95       	ror	r24
    1b26:	9b 83       	std	Y+3, r25	; 0x03
    1b28:	8a 83       	std	Y+2, r24	; 0x02
// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
	uint8_t weight = 0;
	while (wh != 0)
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <_Z15Radio_Drop_Ratev+0x1c>
	{
		if ((wh & 1) != 0) weight++;
		wh >>= 1;
	}
	wh = (16 - weight) * 100;
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	80 e1       	ldi	r24, 0x10	; 16
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	42 1b       	sub	r20, r18
    1b40:	53 0b       	sbc	r21, r19
    1b42:	9a 01       	movw	r18, r20
    1b44:	84 e6       	ldi	r24, 0x64	; 100
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	ac 01       	movw	r20, r24
    1b4a:	24 9f       	mul	r18, r20
    1b4c:	c0 01       	movw	r24, r0
    1b4e:	25 9f       	mul	r18, r21
    1b50:	90 0d       	add	r25, r0
    1b52:	34 9f       	mul	r19, r20
    1b54:	90 0d       	add	r25, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	9b 83       	std	Y+3, r25	; 0x03
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
	wh /= 16;
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b60:	92 95       	swap	r25
    1b62:	82 95       	swap	r24
    1b64:	8f 70       	andi	r24, 0x0F	; 15
    1b66:	89 27       	eor	r24, r25
    1b68:	9f 70       	andi	r25, 0x0F	; 15
    1b6a:	89 27       	eor	r24, r25
    1b6c:	9b 83       	std	Y+3, r25	; 0x03
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
	return wh;
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <_ZL10get_statusv>:
extern void radio_rxhandler(uint8_t pipenumber);

/**
 * Retrieve the status register.
 */
static uint8_t get_status()
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	0f 92       	push	r0
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t status = 0;
    1b88:	19 82       	std	Y+1, r1	; 0x01
	CSN_LOW();
    1b8a:	8a e2       	ldi	r24, 0x2A	; 42
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	status = SPI_Write_Byte(NOP);
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	0e 94 65 12 	call	0x24ca	; 0x24ca <_Z14SPI_Write_Byteh>
    1b98:	89 83       	std	Y+1, r24	; 0x01

	CSN_HIGH();
    1b9a:	8a e2       	ldi	r24, 0x2A	; 42
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	return status;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <_ZL12set_registerhPhh>:
 * Set a register in the radio
 * \param reg The register value defined in nRF24L01.h (e.g. CONFIG, EN_AA, &c.).
 * \param value The value to write to the given register (the whole register is overwritten).
 * \return The status register.
 */
static uint8_t set_register(radio_register_t reg, uint8_t* value, uint8_t len)
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <_ZL12set_registerhPhh+0x6>
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <_ZL12set_registerhPhh+0x8>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	8a 83       	std	Y+2, r24	; 0x02
    1bbc:	7c 83       	std	Y+4, r23	; 0x04
    1bbe:	6b 83       	std	Y+3, r22	; 0x03
    1bc0:	4d 83       	std	Y+5, r20	; 0x05
{
	uint8_t status;
	CSN_LOW();
    1bc2:	8a e2       	ldi	r24, 0x2A	; 42
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	status = SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	8f 71       	andi	r24, 0x1F	; 31
    1bce:	80 62       	ori	r24, 0x20	; 32
    1bd0:	0e 94 65 12 	call	0x24ca	; 0x24ca <_Z14SPI_Write_Byteh>
    1bd4:	89 83       	std	Y+1, r24	; 0x01
	SPI_Write_Block(value, len);
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	6d 81       	ldd	r22, Y+5	; 0x05
    1bdc:	0e 94 33 12 	call	0x2466	; 0x2466 <_Z15SPI_Write_BlockPhh>

	CSN_HIGH();
    1be0:	8a e2       	ldi	r24, 0x2A	; 42
    1be2:	61 e0       	ldi	r22, 0x01	; 1
    1be4:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	return status;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <_Z17Radio_Set_Tx_AddrPh>:
	set_register(EN_RXADDR, &value, 1);

}

// default transmitter address is 0xe7e7e7e7e7.
void Radio_Set_Tx_Addr(uint8_t* address)
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <_Z17Radio_Set_Tx_AddrPh+0x6>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
{
	tx_address[0] = address[0];
    1c08:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 93 6f 04 	sts	0x046F, r24
	tx_address[1] = address[1];
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	fc 01       	movw	r30, r24
    1c18:	31 96       	adiw	r30, 0x01	; 1
    1c1a:	80 81       	ld	r24, Z
    1c1c:	80 93 70 04 	sts	0x0470, r24
	tx_address[2] = address[2];
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	fc 01       	movw	r30, r24
    1c26:	32 96       	adiw	r30, 0x02	; 2
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 93 71 04 	sts	0x0471, r24
	tx_address[3] = address[3];
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	fc 01       	movw	r30, r24
    1c34:	33 96       	adiw	r30, 0x03	; 3
    1c36:	80 81       	ld	r24, Z
    1c38:	80 93 72 04 	sts	0x0472, r24
	tx_address[4] = address[4];
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	fc 01       	movw	r30, r24
    1c42:	34 96       	adiw	r30, 0x04	; 4
    1c44:	80 81       	ld	r24, Z
    1c46:	80 93 73 04 	sts	0x0473, r24
	set_register(TX_ADDR, address, ADDRESS_LENGTH);
    1c4a:	29 81       	ldd	r18, Y+1	; 0x01
    1c4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c4e:	80 e1       	ldi	r24, 0x10	; 16
    1c50:	b9 01       	movw	r22, r18
    1c52:	45 e0       	ldi	r20, 0x05	; 5
    1c54:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <_ZL19reset_pipe0_addressv>:
/**
 * Reset the pipe 0 address if pipe 0 is enabled.  This is necessary when the radio is using Enhanced Shockburst, because
 * the pipe 0 address is set to the transmit address while the radio is transmitting (this is how the radio receives
 * auto-ack packets).
 */
static void reset_pipe0_address()
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	0f 92       	push	r0
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
{
	if (rx_pipe_widths[RADIO_PIPE_0] != 0)
    1c6c:	80 91 69 04 	lds	r24, 0x0469
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	88 23       	and	r24, r24
    1c76:	11 f0       	breq	.+4      	; 0x1c7c <_ZL19reset_pipe0_addressv+0x1a>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	88 23       	and	r24, r24
    1c80:	39 f0       	breq	.+14     	; 0x1c90 <_ZL19reset_pipe0_addressv+0x2e>
	{
		// reset the pipe 0 address if pipe 0 is enabled.
		set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
    1c82:	24 e7       	ldi	r18, 0x74	; 116
    1c84:	34 e0       	ldi	r19, 0x04	; 4
    1c86:	8a e0       	ldi	r24, 0x0A	; 10
    1c88:	b9 01       	movw	r22, r18
    1c8a:	45 e0       	ldi	r20, 0x05	; 5
    1c8c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>
	}
}
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <_ZL16send_instructionhPhS_h>:
 * \param instruction The instruction to send (see the bottom of nRF24L01.h)
 * \param data An array of argument data to the instruction.  If len is 0, then this may be NULL.
 * \param buffer An array for the instruction's return data.  This can be NULL if the instruction has no output.
 * \param len The length of the data and buffer arrays.
 */
static void send_instruction(uint8_t instruction, uint8_t* data, uint8_t* buffer, uint8_t len)
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <_ZL16send_instructionhPhS_h+0x6>
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <_ZL16send_instructionhPhS_h+0x8>
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <_ZL16send_instructionhPhS_h+0xa>
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	7b 83       	std	Y+3, r23	; 0x03
    1caa:	6a 83       	std	Y+2, r22	; 0x02
    1cac:	5d 83       	std	Y+5, r21	; 0x05
    1cae:	4c 83       	std	Y+4, r20	; 0x04
    1cb0:	2e 83       	std	Y+6, r18	; 0x06
{
    CSN_LOW();
    1cb2:	8a e2       	ldi	r24, 0x2A	; 42
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
	// send the instruction
	SPI_Write_Byte(instruction);
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	0e 94 65 12 	call	0x24ca	; 0x24ca <_Z14SPI_Write_Byteh>
	// pass in args
	if (len > 0)
    1cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc2:	88 23       	and	r24, r24
    1cc4:	91 f0       	breq	.+36     	; 0x1cea <_ZL16send_instructionhPhS_h+0x52>
	{
		if (buffer == NULL)	//
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	31 f4       	brne	.+12     	; 0x1cda <_ZL16send_instructionhPhS_h+0x42>
			SPI_Write_Block(data, len);
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd2:	6e 81       	ldd	r22, Y+6	; 0x06
    1cd4:	0e 94 33 12 	call	0x2466	; 0x2466 <_Z15SPI_Write_BlockPhh>
    1cd8:	08 c0       	rjmp	.+16     	; 0x1cea <_ZL16send_instructionhPhS_h+0x52>
		else
			SPI_ReadWrite_Block(data, buffer, len);
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cde:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce2:	b9 01       	movw	r22, r18
    1ce4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ce6:	0e 94 ef 11 	call	0x23de	; 0x23de <_Z19SPI_ReadWrite_BlockPhS_h>
	}
    // resynch SPI
    CSN_HIGH();
    1cea:	8a e2       	ldi	r24, 0x2A	; 42
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
}
    1cf2:	26 96       	adiw	r28, 0x06	; 6
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <_Z13Radio_ReceiveP3_rp>:
    }

    return RADIO_TX_SUCCESS;
}

RADIO_RX_STATUS Radio_Receive(radiopacket_t* buffer)
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	28 97       	sbiw	r28, 0x08	; 8
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	9f 83       	std	Y+7, r25	; 0x07
    1d1a:	8e 83       	std	Y+6, r24	; 0x06
{
	uint8_t len = 32;
    1d1c:	80 e2       	ldi	r24, 0x20	; 32
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t status;
	uint8_t pipe_number;
	uint8_t doMove = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	8a 83       	std	Y+2, r24	; 0x02
	RADIO_RX_STATUS result;

	transmit_lock = 0;
    1d24:	10 92 e7 05 	sts	0x05E7, r1

	CE_LOW();
    1d28:	8b e2       	ldi	r24, 0x2B	; 43
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

    status = get_status();
    1d30:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <_ZL10get_statusv>
    1d34:	8c 83       	std	Y+4, r24	; 0x04
	pipe_number =  (status & 0xE) >> 1;
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	8e 70       	andi	r24, 0x0E	; 14
    1d3e:	90 70       	andi	r25, 0x00	; 0
    1d40:	95 95       	asr	r25
    1d42:	87 95       	ror	r24
    1d44:	8b 83       	std	Y+3, r24	; 0x03

	if (pipe_number == RADIO_PIPE_EMPTY)
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	87 30       	cpi	r24, 0x07	; 7
    1d4a:	19 f4       	brne	.+6      	; 0x1d52 <_Z13Radio_ReceiveP3_rp+0x4e>
	{
		result = RADIO_RX_FIFO_EMPTY;
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	89 83       	std	Y+1, r24	; 0x01
		doMove = 0;
    1d50:	1a 82       	std	Y+2, r1	; 0x02
	}

	if (rx_pipe_widths[pipe_number] > len)
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e7 59       	subi	r30, 0x97	; 151
    1d5c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d5e:	90 81       	ld	r25, Z
    1d60:	18 86       	std	Y+8, r1	; 0x08
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	89 17       	cp	r24, r25
    1d66:	10 f4       	brcc	.+4      	; 0x1d6c <_Z13Radio_ReceiveP3_rp+0x68>
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	88 87       	std	Y+8, r24	; 0x08
    1d6c:	88 85       	ldd	r24, Y+8	; 0x08
    1d6e:	88 23       	and	r24, r24
    1d70:	11 f0       	breq	.+4      	; 0x1d76 <_Z13Radio_ReceiveP3_rp+0x72>
	{
		// the buffer isn't big enough, so don't copy the data.
		result = RADIO_RX_INVALID_ARGS;
    1d72:	19 82       	std	Y+1, r1	; 0x01
		doMove = 0;
    1d74:	1a 82       	std	Y+2, r1	; 0x02
	}

	if (doMove)
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	88 23       	and	r24, r24
    1d7a:	19 f1       	breq	.+70     	; 0x1dc2 <_Z13Radio_ReceiveP3_rp+0xbe>
	{
		// Move the data payload into the local
		send_instruction(R_RX_PAYLOAD, (uint8_t*)buffer, (uint8_t*)buffer, rx_pipe_widths[pipe_number]);
    1d7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d80:	4e 81       	ldd	r20, Y+6	; 0x06
    1d82:	5f 81       	ldd	r21, Y+7	; 0x07
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	e7 59       	subi	r30, 0x97	; 151
    1d8e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d90:	90 81       	ld	r25, Z
    1d92:	81 e6       	ldi	r24, 0x61	; 97
    1d94:	b9 01       	movw	r22, r18
    1d96:	29 2f       	mov	r18, r25
    1d98:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZL16send_instructionhPhS_h>

		status = get_status();
    1d9c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <_ZL10get_statusv>
    1da0:	8c 83       	std	Y+4, r24	; 0x04
		pipe_number =  (status & 0xE) >> 1;
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	8e 70       	andi	r24, 0x0E	; 14
    1daa:	90 70       	andi	r25, 0x00	; 0
    1dac:	95 95       	asr	r25
    1dae:	87 95       	ror	r24
    1db0:	8b 83       	std	Y+3, r24	; 0x03

		if (pipe_number != RADIO_PIPE_EMPTY)
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	87 30       	cpi	r24, 0x07	; 7
    1db6:	19 f0       	breq	.+6      	; 0x1dbe <_Z13Radio_ReceiveP3_rp+0xba>
			result = RADIO_RX_MORE_PACKETS;
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <_Z13Radio_ReceiveP3_rp+0xbe>
		else
			result = RADIO_RX_SUCCESS;
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	}

	CE_HIGH();
    1dc2:	8b e2       	ldi	r24, 0x2B	; 43
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	transmit_lock = 0;
    1dca:	10 92 e7 05 	sts	0x05E7, r1

	//release_radio();

	return result;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd0:	28 96       	adiw	r28, 0x08	; 8
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <_ZL19configure_registersv>:
/**
 * Configure radio defaults and turn on the radio in receive mode.
 * This configures the radio to its max-power, max-packet-header-length settings.  If you want to reduce power consumption
 * or increase on-air payload bandwidth, you'll have to change the config.
 */
static void configure_registers()
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	0f 92       	push	r0
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t value;

	SPI_Init();
    1dec:	0e 94 82 12 	call	0x2504	; 0x2504 <_Z8SPI_Initv>

	// set address width to 5 bytes.
	value = ADDRESS_LENGTH - 2;			// 0b11 for 5 bytes, 0b10 for 4 bytes, 0b01 for 3 bytes
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	89 83       	std	Y+1, r24	; 0x01
	set_register(SETUP_AW, &value, 1);
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	9e 01       	movw	r18, r28
    1df8:	2f 5f       	subi	r18, 0xFF	; 255
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	b9 01       	movw	r22, r18
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

	// set Enhanced Shockburst retry to every 586 us, up to 5 times.  If packet collisions are a problem even with AA enabled,
	// then consider changing the retry delay to be different on the different stations so that they do not keep colliding on each retry.
	value = 0x15;
    1e04:	85 e1       	ldi	r24, 0x15	; 21
    1e06:	89 83       	std	Y+1, r24	; 0x01
	//value = 0x10;
	set_register(SETUP_RETR, &value, 1);
    1e08:	84 e0       	ldi	r24, 0x04	; 4
    1e0a:	9e 01       	movw	r18, r28
    1e0c:	2f 5f       	subi	r18, 0xFF	; 255
    1e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e10:	b9 01       	movw	r22, r18
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

	// Set to use 2.4 GHz channel 110.
	value = CHANNEL;
    1e18:	80 e7       	ldi	r24, 0x70	; 112
    1e1a:	89 83       	std	Y+1, r24	; 0x01
	set_register(RF_CH, &value, 1);
    1e1c:	85 e0       	ldi	r24, 0x05	; 5
    1e1e:	9e 01       	movw	r18, r28
    1e20:	2f 5f       	subi	r18, 0xFF	; 255
    1e22:	3f 4f       	sbci	r19, 0xFF	; 255
    1e24:	b9 01       	movw	r22, r18
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

	// Set radio to 2 Mbps and high power.  Leave LNA_HCURR at its default.
	value = _BV(RF_DR) | _BV(LNA_HCURR);
    1e2c:	89 e0       	ldi	r24, 0x09	; 9
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	set_register(RF_SETUP, &value, 1);
    1e30:	86 e0       	ldi	r24, 0x06	; 6
    1e32:	9e 01       	movw	r18, r28
    1e34:	2f 5f       	subi	r18, 0xFF	; 255
    1e36:	3f 4f       	sbci	r19, 0xFF	; 255
    1e38:	b9 01       	movw	r22, r18
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

	// Enable 2-byte CRC and power up in receive mode.
	value = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
    1e40:	8f e0       	ldi	r24, 0x0F	; 15
    1e42:	89 83       	std	Y+1, r24	; 0x01
	set_register(CONFIG, &value, 1);
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	9e 01       	movw	r18, r28
    1e48:	2f 5f       	subi	r18, 0xFF	; 255
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	b9 01       	movw	r22, r18
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

	// clear the interrupt flags in case the radio's still asserting an old unhandled interrupt
    value = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1e54:	80 e7       	ldi	r24, 0x70	; 112
    1e56:	89 83       	std	Y+1, r24	; 0x01
    set_register(STATUS, &value, 1);
    1e58:	87 e0       	ldi	r24, 0x07	; 7
    1e5a:	9e 01       	movw	r18, r28
    1e5c:	2f 5f       	subi	r18, 0xFF	; 255
    1e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e60:	b9 01       	movw	r22, r18
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

    // flush the FIFOs in case there are old data in them.
	send_instruction(FLUSH_TX, NULL, NULL, 0);
    1e68:	81 ee       	ldi	r24, 0xE1	; 225
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	50 e0       	ldi	r21, 0x00	; 0
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZL16send_instructionhPhS_h>
	send_instruction(FLUSH_RX, NULL, NULL, 0);
    1e78:	82 ee       	ldi	r24, 0xE2	; 226
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZL16send_instructionhPhS_h>
}
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <_Z10Radio_Initv>:

void Radio_Init()
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
{
	pinMode(VCC_PIN, OUTPUT);
    1e98:	80 e3       	ldi	r24, 0x30	; 48
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>

	digitalWrite(VCC_PIN, LOW);
    1ea0:	80 e3       	ldi	r24, 0x30	; 48
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
	delay(50);
    1ea8:	62 e3       	ldi	r22, 0x32	; 50
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>
	digitalWrite(VCC_PIN, HIGH);
    1eb4:	80 e3       	ldi	r24, 0x30	; 48
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
	delay(50);
    1ebc:	62 e3       	ldi	r22, 0x32	; 50
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>

	transmit_lock = 0;
    1ec8:	10 92 e7 05 	sts	0x05E7, r1

	// disable radio during config
	CE_LOW();
    1ecc:	8b e2       	ldi	r24, 0x2B	; 43
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	// set as output AT90 pins connected to the radio's slave select and chip enable pins.
	//CE_DDR |= _BV(CE_PIN);
	//CSN_DDR |= _BV(CSN_PIN);
	pinMode(CE_PIN, OUTPUT);
    1ed4:	8b e2       	ldi	r24, 0x2B	; 43
    1ed6:	61 e0       	ldi	r22, 0x01	; 1
    1ed8:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
	pinMode(CSN_PIN, OUTPUT);
    1edc:	8a e2       	ldi	r24, 0x2A	; 42
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
	// Enable radio interrupt.  This interrupt is triggered when data are received and when a transmission completes.
	/*DDRE &= ~_BV(PORTE7);
	EICRB |= _BV(ISC71);
	EICRB &= ~_BV(ISC70);
	EIMSK |= _BV(INT7);*/
	attachInterrupt(4, int0handler, LOW);
    1ee4:	29 e7       	ldi	r18, 0x79	; 121
    1ee6:	31 e1       	ldi	r19, 0x11	; 17
    1ee8:	84 e0       	ldi	r24, 0x04	; 4
    1eea:	b9 01       	movw	r22, r18
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	0e 94 c0 18 	call	0x3180	; 0x3180 <attachInterrupt>

	// A 10.3 ms delay is required between power off and power on states (controlled by 3.3 V supply).
	delay(11);
    1ef4:	6b e0       	ldi	r22, 0x0B	; 11
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>

	// Configure the radio registers that are not application-dependent.
	configure_registers();
    1f00:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZL19configure_registersv>

	// A 1.5 ms delay is required between power down and power up states (controlled by PWR_UP bit in CONFIG)
	delay(2);
    1f04:	62 e0       	ldi	r22, 0x02	; 2
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <delay>

	// enable radio as a receiver
	CE_HIGH();
    1f10:	8b e2       	ldi	r24, 0x2B	; 43
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
}
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <_ZL12get_registerhPhh>:
 * \param reg The register value defined in nRF24L01.h (e.g. CONFIG, EN_AA, &c.).
 * \param buffer A contiguous memory block into which the register contents will be copied.  If the buffer is too long for the
 * 		register contents, then the remaining bytes will be overwritten with 0xFF.
 * \param len The length of the buffer.
 */
static uint8_t get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <_ZL12get_registerhPhh+0x6>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <_ZL12get_registerhPhh+0x8>
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <_ZL12get_registerhPhh+0xa>
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
    1f2e:	7d 83       	std	Y+5, r23	; 0x05
    1f30:	6c 83       	std	Y+4, r22	; 0x04
    1f32:	4e 83       	std	Y+6, r20	; 0x06
{
	uint8_t status, i;
	for (i = 0; i < len; i++)
    1f34:	19 82       	std	Y+1, r1	; 0x01
    1f36:	0d c0       	rjmp	.+26     	; 0x1f52 <_ZL12get_registerhPhh+0x34>
	{
		// If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
		// To remove the risk, we set the buffer elements to NOP instructions.
		buffer[i] = 0xFF;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	fc 01       	movw	r30, r24
    1f44:	e2 0f       	add	r30, r18
    1f46:	f3 1f       	adc	r31, r19
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	80 83       	st	Z, r24
 * \param len The length of the buffer.
 */
static uint8_t get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
	uint8_t status, i;
	for (i = 0; i < len; i++)
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	8f 5f       	subi	r24, 0xFF	; 255
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	99 81       	ldd	r25, Y+1	; 0x01
    1f54:	8e 81       	ldd	r24, Y+6	; 0x06
    1f56:	98 17       	cp	r25, r24
    1f58:	78 f3       	brcs	.-34     	; 0x1f38 <_ZL12get_registerhPhh+0x1a>
	{
		// If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
		// To remove the risk, we set the buffer elements to NOP instructions.
		buffer[i] = 0xFF;
	}
	CSN_LOW();
    1f5a:	8a e2       	ldi	r24, 0x2A	; 42
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	status = SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	8f 71       	andi	r24, 0x1F	; 31
    1f66:	0e 94 65 12 	call	0x24ca	; 0x24ca <_Z14SPI_Write_Byteh>
    1f6a:	8a 83       	std	Y+2, r24	; 0x02
	SPI_ReadWrite_Block(NULL, buffer, len);
    1f6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	b9 01       	movw	r22, r18
    1f76:	4e 81       	ldd	r20, Y+6	; 0x06
    1f78:	0e 94 ef 11 	call	0x23de	; 0x23de <_Z19SPI_ReadWrite_BlockPhS_h>

	CSN_HIGH();
    1f7c:	8a e2       	ldi	r24, 0x2A	; 42
    1f7e:	61 e0       	ldi	r22, 0x01	; 1
    1f80:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	return status;
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f86:	26 96       	adiw	r28, 0x06	; 6
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>:
	tx_address[3] = address[3];
	tx_address[4] = address[4];
	set_register(TX_ADDR, address, ADDRESS_LENGTH);
}

void Radio_Configure(RADIO_DATA_RATE dr, RADIO_TX_POWER power)
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x6>
    1f9e:	0f 92       	push	r0
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	8a 83       	std	Y+2, r24	; 0x02
    1fa6:	6b 83       	std	Y+3, r22	; 0x03

	// set the address
	//Radio_Set_Tx_Addr(address);

	// set the data rate and power bits in the RF_SETUP register
	get_register(RF_SETUP, &value, 1);
    1fa8:	86 e0       	ldi	r24, 0x06	; 6
    1faa:	9e 01       	movw	r18, r28
    1fac:	2f 5f       	subi	r18, 0xFF	; 255
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZL12get_registerhPhh>

	value |= 3 << RF_PWR;			// set the power bits so that the & will mask the power value in properly.
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	86 60       	ori	r24, 0x06	; 6
    1fbc:	89 83       	std	Y+1, r24	; 0x01
	value &= power << RF_PWR;		// mask the power value into the RF status byte.
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	88 2f       	mov	r24, r24
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	98 2f       	mov	r25, r24
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	89 23       	and	r24, r25
    1fce:	89 83       	std	Y+1, r24	; 0x01

	if (dr)
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	88 23       	and	r24, r24
    1fd4:	21 f0       	breq	.+8      	; 0x1fde <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x46>
		value |= _BV(RF_DR);
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	88 60       	ori	r24, 0x08	; 8
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	03 c0       	rjmp	.+6      	; 0x1fe4 <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x4c>
	else
		value &= ~_BV(RF_DR);
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	87 7f       	andi	r24, 0xF7	; 247
    1fe2:	89 83       	std	Y+1, r24	; 0x01

	set_register(RF_SETUP, &value, 1);
    1fe4:	86 e0       	ldi	r24, 0x06	; 6
    1fe6:	9e 01       	movw	r18, r28
    1fe8:	2f 5f       	subi	r18, 0xFF	; 255
    1fea:	3f 4f       	sbci	r19, 0xFF	; 255
    1fec:	b9 01       	movw	r22, r18
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>:
// default address for pipe 1 is 0xc2c2c2c2c2
// default address for pipe 2 is 0xc2c2c2c2c3 (disabled)
// default address for pipe 3 is 0xc2c2c2c2c4 (disabled)
// default address for pipe 4 is 0xc2c2c2c2c5 (disabled)
// default address for pipe 5 is 0xc2c2c2c2c6 (disabled)
void Radio_Configure_Rx(RADIO_PIPE pipe, uint8_t* address, ON_OFF enable)
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	2a 97       	sbiw	r28, 0x0a	; 10
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	8c 83       	std	Y+4, r24	; 0x04
    2016:	7e 83       	std	Y+6, r23	; 0x06
    2018:	6d 83       	std	Y+5, r22	; 0x05
    201a:	4f 83       	std	Y+7, r20	; 0x07
{
	uint8_t value;
	uint8_t use_aa = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t payload_width = 32;
    2020:	80 e2       	ldi	r24, 0x20	; 32
    2022:	89 83       	std	Y+1, r24	; 0x01
	if (payload_width < 1 || payload_width > 32 || pipe < RADIO_PIPE_0 || pipe > RADIO_PIPE_5) return;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	88 23       	and	r24, r24
    2028:	09 f4       	brne	.+2      	; 0x202c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x2c>
    202a:	bd c0       	rjmp	.+378    	; 0x21a6 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x1a6>
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	81 32       	cpi	r24, 0x21	; 33
    2030:	08 f0       	brcs	.+2      	; 0x2034 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x34>
    2032:	b9 c0       	rjmp	.+370    	; 0x21a6 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x1a6>
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	86 30       	cpi	r24, 0x06	; 6
    2038:	08 f0       	brcs	.+2      	; 0x203c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x3c>
    203a:	b5 c0       	rjmp	.+362    	; 0x21a6 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x1a6>

	// store the pipe 0 address so that it can be overwritten when transmitting with auto-ack enabled.
	if (pipe == RADIO_PIPE_0)
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	88 23       	and	r24, r24
    2040:	09 f5       	brne	.+66     	; 0x2084 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x84>
	{
		rx_pipe0_address[0] = address[0];
    2042:	ed 81       	ldd	r30, Y+5	; 0x05
    2044:	fe 81       	ldd	r31, Y+6	; 0x06
    2046:	80 81       	ld	r24, Z
    2048:	80 93 74 04 	sts	0x0474, r24
		rx_pipe0_address[1] = address[1];
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	fc 01       	movw	r30, r24
    2052:	31 96       	adiw	r30, 0x01	; 1
    2054:	80 81       	ld	r24, Z
    2056:	80 93 75 04 	sts	0x0475, r24
		rx_pipe0_address[2] = address[2];
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	fc 01       	movw	r30, r24
    2060:	32 96       	adiw	r30, 0x02	; 2
    2062:	80 81       	ld	r24, Z
    2064:	80 93 76 04 	sts	0x0476, r24
		rx_pipe0_address[3] = address[3];
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	fc 01       	movw	r30, r24
    206e:	33 96       	adiw	r30, 0x03	; 3
    2070:	80 81       	ld	r24, Z
    2072:	80 93 77 04 	sts	0x0477, r24
		rx_pipe0_address[4] = address[4];
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	fc 01       	movw	r30, r24
    207c:	34 96       	adiw	r30, 0x04	; 4
    207e:	80 81       	ld	r24, Z
    2080:	80 93 78 04 	sts	0x0478, r24
	}

	// Set the address.  We set this stuff even if the pipe is being disabled, because for example the transmitter
	// needs pipe 0 to have the same address as the Tx address for auto-ack to work, even if pipe 0 is disabled.
	set_register(RX_ADDR_P0 + pipe, address, pipe > RADIO_PIPE_1 ? 1 : ADDRESS_LENGTH);
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	98 2f       	mov	r25, r24
    2088:	96 5f       	subi	r25, 0xF6	; 246
    208a:	9a 87       	std	Y+10, r25	; 0x0a
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	18 f0       	brcs	.+6      	; 0x2098 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x98>
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	89 87       	std	Y+9, r24	; 0x09
    2096:	02 c0       	rjmp	.+4      	; 0x209c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x9c>
    2098:	95 e0       	ldi	r25, 0x05	; 5
    209a:	99 87       	std	Y+9, r25	; 0x09
    209c:	2d 81       	ldd	r18, Y+5	; 0x05
    209e:	3e 81       	ldd	r19, Y+6	; 0x06
    20a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a2:	b9 01       	movw	r22, r18
    20a4:	49 85       	ldd	r20, Y+9	; 0x09
    20a6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

	// Set auto-ack.
	get_register(EN_AA, &value, 1);
    20aa:	9e 01       	movw	r18, r28
    20ac:	2d 5f       	subi	r18, 0xFD	; 253
    20ae:	3f 4f       	sbci	r19, 0xFF	; 255
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	b9 01       	movw	r22, r18
    20b4:	41 e0       	ldi	r20, 0x01	; 1
    20b6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZL12get_registerhPhh>
	if (use_aa)
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	88 23       	and	r24, r24
    20be:	81 f0       	breq	.+32     	; 0x20e0 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xe0>
		value |= _BV(pipe);
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	02 2e       	mov	r0, r18
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xd2>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	0a 94       	dec	r0
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xce>
    20d6:	98 2f       	mov	r25, r24
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	89 2b       	or	r24, r25
    20dc:	8b 83       	std	Y+3, r24	; 0x03
    20de:	0f c0       	rjmp	.+30     	; 0x20fe <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xfe>
	else
		value &= ~_BV(pipe);
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xf0>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	2a 95       	dec	r18
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xec>
    20f4:	98 2f       	mov	r25, r24
    20f6:	90 95       	com	r25
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	89 23       	and	r24, r25
    20fc:	8b 83       	std	Y+3, r24	; 0x03
	set_register(EN_AA, &value, 1);
    20fe:	9e 01       	movw	r18, r28
    2100:	2d 5f       	subi	r18, 0xFD	; 253
    2102:	3f 4f       	sbci	r19, 0xFF	; 255
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	b9 01       	movw	r22, r18
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

	// Set the pipe's payload width.  If the pipe is being disabled, then the payload width is set to 0.
	value = enable ? payload_width : 0;
    210e:	8f 81       	ldd	r24, Y+7	; 0x07
    2110:	88 23       	and	r24, r24
    2112:	19 f0       	breq	.+6      	; 0x211a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x11a>
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	88 87       	std	Y+8, r24	; 0x08
    2118:	01 c0       	rjmp	.+2      	; 0x211c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x11c>
    211a:	18 86       	std	Y+8, r1	; 0x08
    211c:	98 85       	ldd	r25, Y+8	; 0x08
    211e:	9b 83       	std	Y+3, r25	; 0x03
	set_register(RX_PW_P0 + pipe, &value, 1);
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	8f 5e       	subi	r24, 0xEF	; 239
    2124:	9e 01       	movw	r18, r28
    2126:	2d 5f       	subi	r18, 0xFD	; 253
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	b9 01       	movw	r22, r18
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>
	rx_pipe_widths[pipe] = value;
    2132:	8c 81       	ldd	r24, Y+4	; 0x04
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	2b 81       	ldd	r18, Y+3	; 0x03
    213a:	fc 01       	movw	r30, r24
    213c:	e7 59       	subi	r30, 0x97	; 151
    213e:	fb 4f       	sbci	r31, 0xFB	; 251
    2140:	20 83       	st	Z, r18

	// Enable or disable the pipe.
	get_register(EN_RXADDR, &value, 1);
    2142:	9e 01       	movw	r18, r28
    2144:	2d 5f       	subi	r18, 0xFD	; 253
    2146:	3f 4f       	sbci	r19, 0xFF	; 255
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	b9 01       	movw	r22, r18
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZL12get_registerhPhh>
	if (enable)
    2152:	8f 81       	ldd	r24, Y+7	; 0x07
    2154:	88 23       	and	r24, r24
    2156:	81 f0       	breq	.+32     	; 0x2178 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x178>
		value |= _BV(pipe);
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	02 2e       	mov	r0, r18
    2164:	02 c0       	rjmp	.+4      	; 0x216a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x16a>
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	0a 94       	dec	r0
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x166>
    216e:	98 2f       	mov	r25, r24
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	89 2b       	or	r24, r25
    2174:	8b 83       	std	Y+3, r24	; 0x03
    2176:	0f c0       	rjmp	.+30     	; 0x2196 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x196>
	else
		value &= ~_BV(pipe);
    2178:	8c 81       	ldd	r24, Y+4	; 0x04
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x188>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	2a 95       	dec	r18
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x184>
    218c:	98 2f       	mov	r25, r24
    218e:	90 95       	com	r25
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	89 23       	and	r24, r25
    2194:	8b 83       	std	Y+3, r24	; 0x03
	set_register(EN_RXADDR, &value, 1);
    2196:	9e 01       	movw	r18, r28
    2198:	2d 5f       	subi	r18, 0xFD	; 253
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	b9 01       	movw	r22, r18
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

}
    21a6:	2a 96       	adiw	r28, 0x0a	; 10
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <_ZL11set_tx_modev>:
}

/**
 * Switch the radio to transmit mode.  If the radio is already in transmit mode, this does nothing.
 */
static void set_tx_mode()
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	0f 92       	push	r0
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t config;
	get_register(CONFIG, &config, 1);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	9e 01       	movw	r18, r28
    21c6:	2f 5f       	subi	r18, 0xFF	; 255
    21c8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ca:	b9 01       	movw	r22, r18
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZL12get_registerhPhh>
	if ((config & _BV(PRIM_RX)) != 0)
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	81 70       	andi	r24, 0x01	; 1
    21da:	90 70       	andi	r25, 0x00	; 0
    21dc:	88 23       	and	r24, r24
    21de:	99 f0       	breq	.+38     	; 0x2206 <__stack+0x7>
	{
		config &= ~_BV(PRIM_RX);
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	8e 7f       	andi	r24, 0xFE	; 254
    21e4:	89 83       	std	Y+1, r24	; 0x01
		set_register(CONFIG, &config, 1);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	9e 01       	movw	r18, r28
    21ea:	2f 5f       	subi	r18, 0xFF	; 255
    21ec:	3f 4f       	sbci	r19, 0xFF	; 255
    21ee:	b9 01       	movw	r22, r18
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>
		// The radio takes 130 us to power up the transmitter
		// You can delete this if you're sending large packets (I'm thinking > 25 bytes, but I'm not sure) because it
		// sending the bytes over SPI can take this long.
		delayMicroseconds(65);
    21f6:	81 e4       	ldi	r24, 0x41	; 65
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
		delayMicroseconds(65);
    21fe:	81 e4       	ldi	r24, 0x41	; 65
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
	}
}
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <_Z14Radio_TransmitP3_rp14_radio_tx_wait>:
		value &= ~_BV(RF_DR);

	set_register(RF_SETUP, &value, 1);
}

uint8_t Radio_Transmit(radiopacket_t* payload, RADIO_TX_WAIT wait)
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	00 d0       	rcall	.+0      	; 0x2214 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x6>
    2214:	00 d0       	rcall	.+0      	; 0x2216 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x8>
    2216:	00 d0       	rcall	.+0      	; 0x2218 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0xa>
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	9b 83       	std	Y+3, r25	; 0x03
    221e:	8a 83       	std	Y+2, r24	; 0x02
    2220:	6c 83       	std	Y+4, r22	; 0x04
{
	//if (block && transmit_lock) while (transmit_lock);
	//if (!block && transmit_lock) return 0;
	uint8_t len = 32;
    2222:	80 e2       	ldi	r24, 0x20	; 32
    2224:	89 83       	std	Y+1, r24	; 0x01

	// indicate that the driver is transmitting.
    transmit_lock = 1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	80 93 e7 05 	sts	0x05E7, r24

	// disable the radio while writing to the Tx FIFO.
    CE_LOW();
    222c:	8b e2       	ldi	r24, 0x2B	; 43
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	set_tx_mode();
    2234:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <_ZL11set_tx_modev>

    // for auto-ack to work, the pipe0 address must be set to the Tx address while the radio is transmitting.
    // The register will be set back to the original pipe 0 address when the TX_DS or MAX_RT interrupt is asserted.
    set_register(RX_ADDR_P0, (uint8_t*)tx_address, ADDRESS_LENGTH);
    2238:	2f e6       	ldi	r18, 0x6F	; 111
    223a:	34 e0       	ldi	r19, 0x04	; 4
    223c:	8a e0       	ldi	r24, 0x0A	; 10
    223e:	b9 01       	movw	r22, r18
    2240:	45 e0       	ldi	r20, 0x05	; 5
    2242:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

    // transfer the packet to the radio's Tx FIFO for transmission
    send_instruction(W_TX_PAYLOAD, (uint8_t*)payload, NULL, len);
    2246:	2a 81       	ldd	r18, Y+2	; 0x02
    2248:	3b 81       	ldd	r19, Y+3	; 0x03
    224a:	80 ea       	ldi	r24, 0xA0	; 160
    224c:	b9 01       	movw	r22, r18
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	29 81       	ldd	r18, Y+1	; 0x01
    2254:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZL16send_instructionhPhS_h>

    // start the transmission.
    CE_HIGH();
    2258:	8b e2       	ldi	r24, 0x2B	; 43
    225a:	61 e0       	ldi	r22, 0x01	; 1
    225c:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

    if (wait == RADIO_WAIT_FOR_TX)
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	88 23       	and	r24, r24
    2264:	79 f4       	brne	.+30     	; 0x2284 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x76>
    {
    	while (transmit_lock);
    2266:	80 91 e7 05 	lds	r24, 0x05E7
    226a:	8e 83       	std	Y+6, r24	; 0x06
    226c:	8e 81       	ldd	r24, Y+6	; 0x06
    226e:	88 23       	and	r24, r24
    2270:	11 f0       	breq	.+4      	; 0x2276 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x68>
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	8e 83       	std	Y+6, r24	; 0x06
    2276:	8e 81       	ldd	r24, Y+6	; 0x06
    2278:	88 23       	and	r24, r24
    227a:	a9 f7       	brne	.-22     	; 0x2266 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x58>
    	return tx_last_status;
    227c:	80 91 68 04 	lds	r24, 0x0468
    2280:	8d 83       	std	Y+5, r24	; 0x05
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x7a>
    }

    return RADIO_TX_SUCCESS;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	8d 83       	std	Y+5, r24	; 0x05
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
}
    228a:	26 96       	adiw	r28, 0x06	; 6
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <_ZL11set_rx_modev>:
}

/**
 * Switch the radio to receive mode.  If the radio is already in receive mode, this does nothing.
 */
static void set_rx_mode()
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	0f 92       	push	r0
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t config;
	get_register(CONFIG, &config, 1);
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	9e 01       	movw	r18, r28
    22aa:	2f 5f       	subi	r18, 0xFF	; 255
    22ac:	3f 4f       	sbci	r19, 0xFF	; 255
    22ae:	b9 01       	movw	r22, r18
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZL12get_registerhPhh>
	if ((config & _BV(PRIM_RX)) == 0)
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	81 70       	andi	r24, 0x01	; 1
    22be:	90 70       	andi	r25, 0x00	; 0
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	99 f4       	brne	.+38     	; 0x22ea <_ZL11set_rx_modev+0x4e>
	{
		config |= _BV(PRIM_RX);
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	81 60       	ori	r24, 0x01	; 1
    22c8:	89 83       	std	Y+1, r24	; 0x01
		set_register(CONFIG, &config, 1);
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	9e 01       	movw	r18, r28
    22ce:	2f 5f       	subi	r18, 0xFF	; 255
    22d0:	3f 4f       	sbci	r19, 0xFF	; 255
    22d2:	b9 01       	movw	r22, r18
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>
		// the radio takes 130 us to power up the receiver.
		delayMicroseconds(65);
    22da:	81 e4       	ldi	r24, 0x41	; 65
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
		delayMicroseconds(65);
    22e2:	81 e4       	ldi	r24, 0x41	; 65
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0e 94 96 1b 	call	0x372c	; 0x372c <delayMicroseconds>
	}
}
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <_Z11int0handlerv>:
	return wh;
}

// Interrupt handler
//ISR(INT7_vect)
void int0handler()
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <_Z11int0handlerv+0x6>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
{
    uint8_t status;
    uint8_t pipe_number;

    CE_LOW();
    22fc:	8b e2       	ldi	r24, 0x2B	; 43
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

    status = get_status();
    2304:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <_ZL10get_statusv>
    2308:	8a 83       	std	Y+2, r24	; 0x02

    if (status & _BV(RX_DR))
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	80 74       	andi	r24, 0x40	; 64
    2312:	90 70       	andi	r25, 0x00	; 0
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	59 f0       	breq	.+22     	; 0x232e <_Z11int0handlerv+0x3c>
    {
    	pipe_number =  (status & 0xE) >> 1;
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	8e 70       	andi	r24, 0x0E	; 14
    2320:	90 70       	andi	r25, 0x00	; 0
    2322:	95 95       	asr	r25
    2324:	87 95       	ror	r24
    2326:	89 83       	std	Y+1, r24	; 0x01
    	radio_rxhandler(pipe_number);
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	0e 94 37 09 	call	0x126e	; 0x126e <_Z15radio_rxhandlerh>
    }
    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS))
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	88 2f       	mov	r24, r24
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	80 72       	andi	r24, 0x20	; 32
    2336:	90 70       	andi	r25, 0x00	; 0
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	e9 f0       	breq	.+58     	; 0x2376 <_Z11int0handlerv+0x84>
    {
        // if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    233c:	10 92 e7 05 	sts	0x05E7, r1
        reset_pipe0_address();
    2340:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZL19reset_pipe0_addressv>
        set_rx_mode();
    2344:	0e 94 4e 11 	call	0x229c	; 0x229c <_ZL11set_rx_modev>

    	// indicate in the history that a packet was transmitted successfully by appending a 1.
    	tx_history <<= 1;
    2348:	80 91 66 04 	lds	r24, 0x0466
    234c:	90 91 67 04 	lds	r25, 0x0467
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	90 93 67 04 	sts	0x0467, r25
    2358:	80 93 66 04 	sts	0x0466, r24
    	tx_history |= 1;
    235c:	80 91 66 04 	lds	r24, 0x0466
    2360:	90 91 67 04 	lds	r25, 0x0467
    2364:	81 60       	ori	r24, 0x01	; 1
    2366:	90 93 67 04 	sts	0x0467, r25
    236a:	80 93 66 04 	sts	0x0466, r24

    	tx_last_status = RADIO_TX_SUCCESS;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	80 93 68 04 	sts	0x0468, r24
    2374:	21 c0       	rjmp	.+66     	; 0x23b8 <_Z11int0handlerv+0xc6>
    }
    else if (status & _BV(MAX_RT))
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	88 2f       	mov	r24, r24
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	80 71       	andi	r24, 0x10	; 16
    237e:	90 70       	andi	r25, 0x00	; 0
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	d1 f0       	breq	.+52     	; 0x23b8 <_Z11int0handlerv+0xc6>
    {
        send_instruction(FLUSH_TX, NULL, NULL, 0);
    2384:	81 ee       	ldi	r24, 0xE1	; 225
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZL16send_instructionhPhS_h>

    	transmit_lock = 0;
    2394:	10 92 e7 05 	sts	0x05E7, r1
    	reset_pipe0_address();
    2398:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZL19reset_pipe0_addressv>
		set_rx_mode();
    239c:	0e 94 4e 11 	call	0x229c	; 0x229c <_ZL11set_rx_modev>
    	// indicate in the history that a packet was dropped by appending a 0.
    	tx_history <<= 1;
    23a0:	80 91 66 04 	lds	r24, 0x0466
    23a4:	90 91 67 04 	lds	r25, 0x0467
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	90 93 67 04 	sts	0x0467, r25
    23b0:	80 93 66 04 	sts	0x0466, r24

    	tx_last_status = RADIO_TX_MAX_RT;
    23b4:	10 92 68 04 	sts	0x0468, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    23b8:	80 e7       	ldi	r24, 0x70	; 112
    23ba:	8a 83       	std	Y+2, r24	; 0x02
	set_register(STATUS, &status, 1);
    23bc:	9e 01       	movw	r18, r28
    23be:	2e 5f       	subi	r18, 0xFE	; 254
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	87 e0       	ldi	r24, 0x07	; 7
    23c4:	b9 01       	movw	r22, r18
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZL12set_registerhPhh>

    CE_HIGH();
    23cc:	8b e2       	ldi	r24, 0x2B	; 43
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
}
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <_Z19SPI_ReadWrite_BlockPhS_h>:

	//SPI_PORT &= ~_BV(SPI_SS);
	digitalWrite(SS, LOW);
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	27 97       	sbiw	r28, 0x07	; 7
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	9b 83       	std	Y+3, r25	; 0x03
    23f4:	8a 83       	std	Y+2, r24	; 0x02
    23f6:	7d 83       	std	Y+5, r23	; 0x05
    23f8:	6c 83       	std	Y+4, r22	; 0x04
    23fa:	4e 83       	std	Y+6, r20	; 0x06
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    23fc:	19 82       	std	Y+1, r1	; 0x01
    23fe:	26 c0       	rjmp	.+76     	; 0x244c <_Z19SPI_ReadWrite_BlockPhS_h+0x6e>
          SPDR = data[i];
    2400:	ae e4       	ldi	r26, 0x4E	; 78
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	fc 01       	movw	r30, r24
    2410:	e2 0f       	add	r30, r18
    2412:	f3 1f       	adc	r31, r19
    2414:	80 81       	ld	r24, Z
    2416:	8c 93       	st	X, r24
          SPI_WAIT();
    2418:	ed e4       	ldi	r30, 0x4D	; 77
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	1f 82       	std	Y+7, r1	; 0x07
    2420:	88 23       	and	r24, r24
    2422:	14 f0       	brlt	.+4      	; 0x2428 <_Z19SPI_ReadWrite_BlockPhS_h+0x4a>
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	8f 83       	std	Y+7, r24	; 0x07
    2428:	8f 81       	ldd	r24, Y+7	; 0x07
    242a:	88 23       	and	r24, r24
    242c:	a9 f7       	brne	.-22     	; 0x2418 <_Z19SPI_ReadWrite_BlockPhS_h+0x3a>
          buffer[i] = SPDR;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	9d 81       	ldd	r25, Y+5	; 0x05
    2438:	dc 01       	movw	r26, r24
    243a:	a2 0f       	add	r26, r18
    243c:	b3 1f       	adc	r27, r19
    243e:	ee e4       	ldi	r30, 0x4E	; 78
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	8c 93       	st	X, r24
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	8f 5f       	subi	r24, 0xFF	; 255
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	99 81       	ldd	r25, Y+1	; 0x01
    244e:	8e 81       	ldd	r24, Y+6	; 0x06
    2450:	98 17       	cp	r25, r24
    2452:	b0 f2       	brcs	.-84     	; 0x2400 <_Z19SPI_ReadWrite_BlockPhS_h+0x22>
          SPDR = data[i];
          SPI_WAIT();
          buffer[i] = SPDR;
    }
}
    2454:	27 96       	adiw	r28, 0x07	; 7
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <_Z15SPI_Write_BlockPhh>:

void SPI_Write_Block(uint8_t* data, uint8_t len)
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	00 d0       	rcall	.+0      	; 0x246c <_Z15SPI_Write_BlockPhh+0x6>
    246c:	00 d0       	rcall	.+0      	; 0x246e <_Z15SPI_Write_BlockPhh+0x8>
    246e:	0f 92       	push	r0
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	9b 83       	std	Y+3, r25	; 0x03
    2476:	8a 83       	std	Y+2, r24	; 0x02
    2478:	6c 83       	std	Y+4, r22	; 0x04
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    247a:	19 82       	std	Y+1, r1	; 0x01
    247c:	1a c0       	rjmp	.+52     	; 0x24b2 <_Z15SPI_Write_BlockPhh+0x4c>
          SPDR = data[i];
    247e:	ae e4       	ldi	r26, 0x4E	; 78
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	9b 81       	ldd	r25, Y+3	; 0x03
    248c:	fc 01       	movw	r30, r24
    248e:	e2 0f       	add	r30, r18
    2490:	f3 1f       	adc	r31, r19
    2492:	80 81       	ld	r24, Z
    2494:	8c 93       	st	X, r24
          SPI_WAIT();
    2496:	ed e4       	ldi	r30, 0x4D	; 77
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	1d 82       	std	Y+5, r1	; 0x05
    249e:	88 23       	and	r24, r24
    24a0:	14 f0       	brlt	.+4      	; 0x24a6 <_Z15SPI_Write_BlockPhh+0x40>
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	8d 83       	std	Y+5, r24	; 0x05
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	88 23       	and	r24, r24
    24aa:	a9 f7       	brne	.-22     	; 0x2496 <_Z15SPI_Write_BlockPhh+0x30>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	99 81       	ldd	r25, Y+1	; 0x01
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	98 17       	cp	r25, r24
    24b8:	10 f3       	brcs	.-60     	; 0x247e <_Z15SPI_Write_BlockPhh+0x18>
          SPDR = data[i];
          SPI_WAIT();
    }
}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <_Z14SPI_Write_Byteh>:

uint8_t SPI_Write_Byte(uint8_t byte)
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <_Z14SPI_Write_Byteh+0x6>
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	89 83       	std	Y+1, r24	; 0x01
{
    SPDR = byte;
    24d6:	ee e4       	ldi	r30, 0x4E	; 78
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	80 83       	st	Z, r24
    SPI_WAIT();
    24de:	ed e4       	ldi	r30, 0x4D	; 77
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	1a 82       	std	Y+2, r1	; 0x02
    24e6:	88 23       	and	r24, r24
    24e8:	14 f0       	brlt	.+4      	; 0x24ee <_Z14SPI_Write_Byteh+0x24>
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	8a 83       	std	Y+2, r24	; 0x02
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	88 23       	and	r24, r24
    24f2:	a9 f7       	brne	.-22     	; 0x24de <_Z14SPI_Write_Byteh+0x14>
    return SPDR;
    24f4:	ee e4       	ldi	r30, 0x4E	; 78
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
}
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <_Z8SPI_Initv>:
#define SS 53

// wait for an SPI read/write operation to complete
#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);

void SPI_Init()
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
	// The DDR operations are pretty fragile and doing this less awkwardly breaks SPI.  I don't care enough
	// to figure out why right now.  Note that SPI_SS is the actual SPI port's SS pin, which is not necessarily
	// the SS pin that's used for a given slave.  Anything that uses this driver must handle its own slave selection.
	// It must set its SS pin direction to output, set the pin low before doing an SPI operation, and set it high
	// when the SPI operation is complete.
	pinMode(MOSI, OUTPUT);
    250c:	83 e3       	ldi	r24, 0x33	; 51
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
	pinMode(MISO, INPUT);
    2514:	82 e3       	ldi	r24, 0x32	; 50
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
	pinMode(SCK, OUTPUT);
    251c:	84 e3       	ldi	r24, 0x34	; 52
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
	pinMode(SS, OUTPUT);
    2524:	85 e3       	ldi	r24, 0x35	; 53
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <pinMode>
	 * bit 0
	 */

    // Set the AT90's SS pin high during config (this disables the Flash RAM or something)
    //SPI_PORT |= _BV(SPI_SS);
	digitalWrite(SS, HIGH);
    252c:	85 e3       	ldi	r24, 0x35	; 53
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>

	SPCR = _BV(SPE) | _BV(MSTR);	// enable SPI, set as master, set prescaler to f(osc)/4
    2534:	ec e4       	ldi	r30, 0x4C	; 76
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 e5       	ldi	r24, 0x50	; 80
    253a:	80 83       	st	Z, r24

	//SPSR = _BV(SPI2X);							// Double SCK to f(osc)/2 (4 MHz)

	//SPI_PORT &= ~_BV(SPI_SS);
	digitalWrite(SS, LOW);
    253c:	85 e3       	ldi	r24, 0x35	; 53
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
}
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <_Z10store_charhP11ring_buffer>:
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	48 2f       	mov	r20, r24
    2554:	fb 01       	movw	r30, r22
    2556:	8b 01       	movw	r16, r22
    2558:	00 58       	subi	r16, 0x80	; 128
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	d8 01       	movw	r26, r16
    255e:	cd 91       	ld	r28, X+
    2560:	dc 91       	ld	r29, X
    2562:	ce 01       	movw	r24, r28
    2564:	01 96       	adiw	r24, 0x01	; 1
    2566:	60 e8       	ldi	r22, 0x80	; 128
    2568:	70 e0       	ldi	r23, 0x00	; 0
    256a:	0e 94 08 24 	call	0x4810	; 0x4810 <__divmodhi4>
    256e:	9c 01       	movw	r18, r24
    2570:	ee 57       	subi	r30, 0x7E	; 126
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	e2 58       	subi	r30, 0x82	; 130
    257a:	f0 40       	sbci	r31, 0x00	; 0
    257c:	28 17       	cp	r18, r24
    257e:	39 07       	cpc	r19, r25
    2580:	31 f0       	breq	.+12     	; 0x258e <_Z10store_charhP11ring_buffer+0x44>
    2582:	ce 0f       	add	r28, r30
    2584:	df 1f       	adc	r29, r31
    2586:	48 83       	st	Y, r20
    2588:	f8 01       	movw	r30, r16
    258a:	31 83       	std	Z+1, r19	; 0x01
    258c:	20 83       	st	Z, r18
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	08 95       	ret

00002598 <__vector_25>:
    2598:	1f 92       	push	r1
    259a:	0f 92       	push	r0
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	0f 92       	push	r0
    25a0:	0b b6       	in	r0, 0x3b	; 59
    25a2:	0f 92       	push	r0
    25a4:	11 24       	eor	r1, r1
    25a6:	2f 93       	push	r18
    25a8:	3f 93       	push	r19
    25aa:	4f 93       	push	r20
    25ac:	5f 93       	push	r21
    25ae:	6f 93       	push	r22
    25b0:	7f 93       	push	r23
    25b2:	8f 93       	push	r24
    25b4:	9f 93       	push	r25
    25b6:	af 93       	push	r26
    25b8:	bf 93       	push	r27
    25ba:	ef 93       	push	r30
    25bc:	ff 93       	push	r31
    25be:	80 91 c6 00 	lds	r24, 0x00C6
    25c2:	68 ee       	ldi	r22, 0xE8	; 232
    25c4:	75 e0       	ldi	r23, 0x05	; 5
    25c6:	0e 94 a5 12 	call	0x254a	; 0x254a <_Z10store_charhP11ring_buffer>
    25ca:	ff 91       	pop	r31
    25cc:	ef 91       	pop	r30
    25ce:	bf 91       	pop	r27
    25d0:	af 91       	pop	r26
    25d2:	9f 91       	pop	r25
    25d4:	8f 91       	pop	r24
    25d6:	7f 91       	pop	r23
    25d8:	6f 91       	pop	r22
    25da:	5f 91       	pop	r21
    25dc:	4f 91       	pop	r20
    25de:	3f 91       	pop	r19
    25e0:	2f 91       	pop	r18
    25e2:	0f 90       	pop	r0
    25e4:	0b be       	out	0x3b, r0	; 59
    25e6:	0f 90       	pop	r0
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	0f 90       	pop	r0
    25ec:	1f 90       	pop	r1
    25ee:	18 95       	reti

000025f0 <__vector_36>:
    25f0:	1f 92       	push	r1
    25f2:	0f 92       	push	r0
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	0f 92       	push	r0
    25f8:	0b b6       	in	r0, 0x3b	; 59
    25fa:	0f 92       	push	r0
    25fc:	11 24       	eor	r1, r1
    25fe:	2f 93       	push	r18
    2600:	3f 93       	push	r19
    2602:	4f 93       	push	r20
    2604:	5f 93       	push	r21
    2606:	6f 93       	push	r22
    2608:	7f 93       	push	r23
    260a:	8f 93       	push	r24
    260c:	9f 93       	push	r25
    260e:	af 93       	push	r26
    2610:	bf 93       	push	r27
    2612:	ef 93       	push	r30
    2614:	ff 93       	push	r31
    2616:	80 91 ce 00 	lds	r24, 0x00CE
    261a:	6c e6       	ldi	r22, 0x6C	; 108
    261c:	76 e0       	ldi	r23, 0x06	; 6
    261e:	0e 94 a5 12 	call	0x254a	; 0x254a <_Z10store_charhP11ring_buffer>
    2622:	ff 91       	pop	r31
    2624:	ef 91       	pop	r30
    2626:	bf 91       	pop	r27
    2628:	af 91       	pop	r26
    262a:	9f 91       	pop	r25
    262c:	8f 91       	pop	r24
    262e:	7f 91       	pop	r23
    2630:	6f 91       	pop	r22
    2632:	5f 91       	pop	r21
    2634:	4f 91       	pop	r20
    2636:	3f 91       	pop	r19
    2638:	2f 91       	pop	r18
    263a:	0f 90       	pop	r0
    263c:	0b be       	out	0x3b, r0	; 59
    263e:	0f 90       	pop	r0
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	0f 90       	pop	r0
    2644:	1f 90       	pop	r1
    2646:	18 95       	reti

00002648 <__vector_51>:
    2648:	1f 92       	push	r1
    264a:	0f 92       	push	r0
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	0f 92       	push	r0
    2650:	0b b6       	in	r0, 0x3b	; 59
    2652:	0f 92       	push	r0
    2654:	11 24       	eor	r1, r1
    2656:	2f 93       	push	r18
    2658:	3f 93       	push	r19
    265a:	4f 93       	push	r20
    265c:	5f 93       	push	r21
    265e:	6f 93       	push	r22
    2660:	7f 93       	push	r23
    2662:	8f 93       	push	r24
    2664:	9f 93       	push	r25
    2666:	af 93       	push	r26
    2668:	bf 93       	push	r27
    266a:	ef 93       	push	r30
    266c:	ff 93       	push	r31
    266e:	80 91 d6 00 	lds	r24, 0x00D6
    2672:	60 ef       	ldi	r22, 0xF0	; 240
    2674:	76 e0       	ldi	r23, 0x06	; 6
    2676:	0e 94 a5 12 	call	0x254a	; 0x254a <_Z10store_charhP11ring_buffer>
    267a:	ff 91       	pop	r31
    267c:	ef 91       	pop	r30
    267e:	bf 91       	pop	r27
    2680:	af 91       	pop	r26
    2682:	9f 91       	pop	r25
    2684:	8f 91       	pop	r24
    2686:	7f 91       	pop	r23
    2688:	6f 91       	pop	r22
    268a:	5f 91       	pop	r21
    268c:	4f 91       	pop	r20
    268e:	3f 91       	pop	r19
    2690:	2f 91       	pop	r18
    2692:	0f 90       	pop	r0
    2694:	0b be       	out	0x3b, r0	; 59
    2696:	0f 90       	pop	r0
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	0f 90       	pop	r0
    269c:	1f 90       	pop	r1
    269e:	18 95       	reti

000026a0 <__vector_54>:
    26a0:	1f 92       	push	r1
    26a2:	0f 92       	push	r0
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	0f 92       	push	r0
    26a8:	0b b6       	in	r0, 0x3b	; 59
    26aa:	0f 92       	push	r0
    26ac:	11 24       	eor	r1, r1
    26ae:	2f 93       	push	r18
    26b0:	3f 93       	push	r19
    26b2:	4f 93       	push	r20
    26b4:	5f 93       	push	r21
    26b6:	6f 93       	push	r22
    26b8:	7f 93       	push	r23
    26ba:	8f 93       	push	r24
    26bc:	9f 93       	push	r25
    26be:	af 93       	push	r26
    26c0:	bf 93       	push	r27
    26c2:	ef 93       	push	r30
    26c4:	ff 93       	push	r31
    26c6:	80 91 36 01 	lds	r24, 0x0136
    26ca:	64 e7       	ldi	r22, 0x74	; 116
    26cc:	77 e0       	ldi	r23, 0x07	; 7
    26ce:	0e 94 a5 12 	call	0x254a	; 0x254a <_Z10store_charhP11ring_buffer>
    26d2:	ff 91       	pop	r31
    26d4:	ef 91       	pop	r30
    26d6:	bf 91       	pop	r27
    26d8:	af 91       	pop	r26
    26da:	9f 91       	pop	r25
    26dc:	8f 91       	pop	r24
    26de:	7f 91       	pop	r23
    26e0:	6f 91       	pop	r22
    26e2:	5f 91       	pop	r21
    26e4:	4f 91       	pop	r20
    26e6:	3f 91       	pop	r19
    26e8:	2f 91       	pop	r18
    26ea:	0f 90       	pop	r0
    26ec:	0b be       	out	0x3b, r0	; 59
    26ee:	0f 90       	pop	r0
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	0f 90       	pop	r0
    26f4:	1f 90       	pop	r1
    26f6:	18 95       	reti

000026f8 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:
    26f8:	8f 92       	push	r8
    26fa:	af 92       	push	r10
    26fc:	cf 92       	push	r12
    26fe:	df 92       	push	r13
    2700:	ef 92       	push	r14
    2702:	ff 92       	push	r15
    2704:	0f 93       	push	r16
    2706:	1f 93       	push	r17
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	fc 01       	movw	r30, r24
    2712:	8d e7       	ldi	r24, 0x7D	; 125
    2714:	94 e0       	ldi	r25, 0x04	; 4
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	80 83       	st	Z, r24
    271a:	73 83       	std	Z+3, r23	; 0x03
    271c:	62 83       	std	Z+2, r22	; 0x02
    271e:	55 83       	std	Z+5, r21	; 0x05
    2720:	44 83       	std	Z+4, r20	; 0x04
    2722:	37 83       	std	Z+7, r19	; 0x07
    2724:	26 83       	std	Z+6, r18	; 0x06
    2726:	11 87       	std	Z+9, r17	; 0x09
    2728:	00 87       	std	Z+8, r16	; 0x08
    272a:	f3 86       	std	Z+11, r15	; 0x0b
    272c:	e2 86       	std	Z+10, r14	; 0x0a
    272e:	d5 86       	std	Z+13, r13	; 0x0d
    2730:	c4 86       	std	Z+12, r12	; 0x0c
    2732:	a6 86       	std	Z+14, r10	; 0x0e
    2734:	87 86       	std	Z+15, r8	; 0x0f
    2736:	8d 85       	ldd	r24, Y+13	; 0x0d
    2738:	80 8b       	std	Z+16, r24	; 0x10
    273a:	8e 85       	ldd	r24, Y+14	; 0x0e
    273c:	81 8b       	std	Z+17, r24	; 0x11
    273e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2740:	82 8b       	std	Z+18, r24	; 0x12
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	df 90       	pop	r13
    2750:	cf 90       	pop	r12
    2752:	af 90       	pop	r10
    2754:	8f 90       	pop	r8
    2756:	08 95       	ret

00002758 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:
    2758:	8f 92       	push	r8
    275a:	af 92       	push	r10
    275c:	cf 92       	push	r12
    275e:	df 92       	push	r13
    2760:	ef 92       	push	r14
    2762:	ff 92       	push	r15
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	fc 01       	movw	r30, r24
    2772:	8d e7       	ldi	r24, 0x7D	; 125
    2774:	94 e0       	ldi	r25, 0x04	; 4
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	80 83       	st	Z, r24
    277a:	73 83       	std	Z+3, r23	; 0x03
    277c:	62 83       	std	Z+2, r22	; 0x02
    277e:	55 83       	std	Z+5, r21	; 0x05
    2780:	44 83       	std	Z+4, r20	; 0x04
    2782:	37 83       	std	Z+7, r19	; 0x07
    2784:	26 83       	std	Z+6, r18	; 0x06
    2786:	11 87       	std	Z+9, r17	; 0x09
    2788:	00 87       	std	Z+8, r16	; 0x08
    278a:	f3 86       	std	Z+11, r15	; 0x0b
    278c:	e2 86       	std	Z+10, r14	; 0x0a
    278e:	d5 86       	std	Z+13, r13	; 0x0d
    2790:	c4 86       	std	Z+12, r12	; 0x0c
    2792:	a6 86       	std	Z+14, r10	; 0x0e
    2794:	87 86       	std	Z+15, r8	; 0x0f
    2796:	8d 85       	ldd	r24, Y+13	; 0x0d
    2798:	80 8b       	std	Z+16, r24	; 0x10
    279a:	8e 85       	ldd	r24, Y+14	; 0x0e
    279c:	81 8b       	std	Z+17, r24	; 0x11
    279e:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a0:	82 8b       	std	Z+18, r24	; 0x12
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	1f 91       	pop	r17
    27a8:	0f 91       	pop	r16
    27aa:	ff 90       	pop	r15
    27ac:	ef 90       	pop	r14
    27ae:	df 90       	pop	r13
    27b0:	cf 90       	pop	r12
    27b2:	af 90       	pop	r10
    27b4:	8f 90       	pop	r8
    27b6:	08 95       	ret

000027b8 <_ZN14HardwareSerial5beginEl>:
    27b8:	5f 92       	push	r5
    27ba:	6f 92       	push	r6
    27bc:	7f 92       	push	r7
    27be:	8f 92       	push	r8
    27c0:	9f 92       	push	r9
    27c2:	af 92       	push	r10
    27c4:	bf 92       	push	r11
    27c6:	cf 92       	push	r12
    27c8:	df 92       	push	r13
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	ec 01       	movw	r28, r24
    27d8:	5a 01       	movw	r10, r20
    27da:	6b 01       	movw	r12, r22
    27dc:	81 e4       	ldi	r24, 0x41	; 65
    27de:	a8 16       	cp	r10, r24
    27e0:	82 e4       	ldi	r24, 0x42	; 66
    27e2:	b8 06       	cpc	r11, r24
    27e4:	8f e0       	ldi	r24, 0x0F	; 15
    27e6:	c8 06       	cpc	r12, r24
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	d8 06       	cpc	r13, r24
    27ec:	08 f0       	brcs	.+2      	; 0x27f0 <_ZN14HardwareSerial5beginEl+0x38>
    27ee:	77 c0       	rjmp	.+238    	; 0x28de <_ZN14HardwareSerial5beginEl+0x126>
    27f0:	60 e8       	ldi	r22, 0x80	; 128
    27f2:	74 e8       	ldi	r23, 0x84	; 132
    27f4:	8e e1       	ldi	r24, 0x1E	; 30
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a6 01       	movw	r20, r12
    27fa:	95 01       	movw	r18, r10
    27fc:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmodsi4>
    2800:	39 01       	movw	r6, r18
    2802:	4a 01       	movw	r8, r20
    2804:	08 94       	sec
    2806:	61 08       	sbc	r6, r1
    2808:	71 08       	sbc	r7, r1
    280a:	81 08       	sbc	r8, r1
    280c:	91 08       	sbc	r9, r1
    280e:	96 94       	lsr	r9
    2810:	87 94       	ror	r8
    2812:	77 94       	ror	r7
    2814:	67 94       	ror	r6
    2816:	a4 01       	movw	r20, r8
    2818:	93 01       	movw	r18, r6
    281a:	2f 5f       	subi	r18, 0xFF	; 255
    281c:	3f 4f       	sbci	r19, 0xFF	; 255
    281e:	4f 4f       	sbci	r20, 0xFF	; 255
    2820:	5f 4f       	sbci	r21, 0xFF	; 255
    2822:	74 e0       	ldi	r23, 0x04	; 4
    2824:	22 0f       	add	r18, r18
    2826:	33 1f       	adc	r19, r19
    2828:	44 1f       	adc	r20, r20
    282a:	55 1f       	adc	r21, r21
    282c:	7a 95       	dec	r23
    282e:	d1 f7       	brne	.-12     	; 0x2824 <_ZN14HardwareSerial5beginEl+0x6c>
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	74 e2       	ldi	r23, 0x24	; 36
    2834:	84 ef       	ldi	r24, 0xF4	; 244
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmodsi4>
    283c:	ca 01       	movw	r24, r20
    283e:	b9 01       	movw	r22, r18
    2840:	2f ef       	ldi	r18, 0xFF	; 255
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <__mulsi3>
    284c:	a6 01       	movw	r20, r12
    284e:	95 01       	movw	r18, r10
    2850:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmodsi4>
    2854:	8f ef       	ldi	r24, 0xFF	; 255
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	82 1b       	sub	r24, r18
    285a:	93 0b       	sbc	r25, r19
    285c:	18 16       	cp	r1, r24
    285e:	19 06       	cpc	r1, r25
    2860:	1c f4       	brge	.+6      	; 0x2868 <_ZN14HardwareSerial5beginEl+0xb0>
    2862:	52 2e       	mov	r5, r18
    2864:	50 94       	com	r5
    2866:	02 c0       	rjmp	.+4      	; 0x286c <_ZN14HardwareSerial5beginEl+0xb4>
    2868:	52 2e       	mov	r5, r18
    286a:	53 94       	inc	r5
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	79 e0       	ldi	r23, 0x09	; 9
    2870:	8d e3       	ldi	r24, 0x3D	; 61
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a6 01       	movw	r20, r12
    2876:	95 01       	movw	r18, r10
    2878:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmodsi4>
    287c:	21 50       	subi	r18, 0x01	; 1
    287e:	30 40       	sbci	r19, 0x00	; 0
    2880:	40 40       	sbci	r20, 0x00	; 0
    2882:	50 40       	sbci	r21, 0x00	; 0
    2884:	56 95       	lsr	r21
    2886:	47 95       	ror	r20
    2888:	37 95       	ror	r19
    288a:	27 95       	ror	r18
    288c:	2f 5f       	subi	r18, 0xFF	; 255
    288e:	3f 4f       	sbci	r19, 0xFF	; 255
    2890:	4f 4f       	sbci	r20, 0xFF	; 255
    2892:	5f 4f       	sbci	r21, 0xFF	; 255
    2894:	93 e0       	ldi	r25, 0x03	; 3
    2896:	22 0f       	add	r18, r18
    2898:	33 1f       	adc	r19, r19
    289a:	44 1f       	adc	r20, r20
    289c:	55 1f       	adc	r21, r21
    289e:	9a 95       	dec	r25
    28a0:	d1 f7       	brne	.-12     	; 0x2896 <_ZN14HardwareSerial5beginEl+0xde>
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	74 e2       	ldi	r23, 0x24	; 36
    28a6:	84 ef       	ldi	r24, 0xF4	; 244
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmodsi4>
    28ae:	ca 01       	movw	r24, r20
    28b0:	b9 01       	movw	r22, r18
    28b2:	2f ef       	ldi	r18, 0xFF	; 255
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <__mulsi3>
    28be:	a6 01       	movw	r20, r12
    28c0:	95 01       	movw	r18, r10
    28c2:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmodsi4>
    28c6:	8f ef       	ldi	r24, 0xFF	; 255
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	82 1b       	sub	r24, r18
    28cc:	93 0b       	sbc	r25, r19
    28ce:	18 16       	cp	r1, r24
    28d0:	19 06       	cpc	r1, r25
    28d2:	14 f4       	brge	.+4      	; 0x28d8 <_ZN14HardwareSerial5beginEl+0x120>
    28d4:	20 95       	com	r18
    28d6:	01 c0       	rjmp	.+2      	; 0x28da <_ZN14HardwareSerial5beginEl+0x122>
    28d8:	2f 5f       	subi	r18, 0xFF	; 255
    28da:	25 15       	cp	r18, r5
    28dc:	f0 f4       	brcc	.+60     	; 0x291a <_ZN14HardwareSerial5beginEl+0x162>
    28de:	e8 85       	ldd	r30, Y+8	; 0x08
    28e0:	f9 85       	ldd	r31, Y+9	; 0x09
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0a 88       	ldd	r0, Y+18	; 0x12
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <_ZN14HardwareSerial5beginEl+0x136>
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	0a 94       	dec	r0
    28f0:	e2 f7       	brpl	.-8      	; 0x28ea <_ZN14HardwareSerial5beginEl+0x132>
    28f2:	80 83       	st	Z, r24
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	79 e0       	ldi	r23, 0x09	; 9
    28f8:	8d e3       	ldi	r24, 0x3D	; 61
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a6 01       	movw	r20, r12
    28fe:	95 01       	movw	r18, r10
    2900:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmodsi4>
    2904:	21 50       	subi	r18, 0x01	; 1
    2906:	30 40       	sbci	r19, 0x00	; 0
    2908:	40 40       	sbci	r20, 0x00	; 0
    290a:	50 40       	sbci	r21, 0x00	; 0
    290c:	56 95       	lsr	r21
    290e:	47 95       	ror	r20
    2910:	37 95       	ror	r19
    2912:	27 95       	ror	r18
    2914:	82 2f       	mov	r24, r18
    2916:	23 2f       	mov	r18, r19
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <_ZN14HardwareSerial5beginEl+0x16c>
    291a:	e8 85       	ldd	r30, Y+8	; 0x08
    291c:	f9 85       	ldd	r31, Y+9	; 0x09
    291e:	10 82       	st	Z, r1
    2920:	86 2d       	mov	r24, r6
    2922:	27 2d       	mov	r18, r7
    2924:	ec 81       	ldd	r30, Y+4	; 0x04
    2926:	fd 81       	ldd	r31, Y+5	; 0x05
    2928:	20 83       	st	Z, r18
    292a:	ee 81       	ldd	r30, Y+6	; 0x06
    292c:	ff 81       	ldd	r31, Y+7	; 0x07
    292e:	80 83       	st	Z, r24
    2930:	ea 85       	ldd	r30, Y+10	; 0x0a
    2932:	fb 85       	ldd	r31, Y+11	; 0x0b
    2934:	20 81       	ld	r18, Z
    2936:	41 e0       	ldi	r20, 0x01	; 1
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	ca 01       	movw	r24, r20
    293c:	0e 84       	ldd	r0, Y+14	; 0x0e
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <_ZN14HardwareSerial5beginEl+0x18c>
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	0a 94       	dec	r0
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <_ZN14HardwareSerial5beginEl+0x188>
    2948:	28 2b       	or	r18, r24
    294a:	20 83       	st	Z, r18
    294c:	ea 85       	ldd	r30, Y+10	; 0x0a
    294e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2950:	20 81       	ld	r18, Z
    2952:	ca 01       	movw	r24, r20
    2954:	0f 84       	ldd	r0, Y+15	; 0x0f
    2956:	02 c0       	rjmp	.+4      	; 0x295c <_ZN14HardwareSerial5beginEl+0x1a4>
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	0a 94       	dec	r0
    295e:	e2 f7       	brpl	.-8      	; 0x2958 <_ZN14HardwareSerial5beginEl+0x1a0>
    2960:	28 2b       	or	r18, r24
    2962:	20 83       	st	Z, r18
    2964:	ea 85       	ldd	r30, Y+10	; 0x0a
    2966:	fb 85       	ldd	r31, Y+11	; 0x0b
    2968:	80 81       	ld	r24, Z
    296a:	08 88       	ldd	r0, Y+16	; 0x10
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <_ZN14HardwareSerial5beginEl+0x1ba>
    296e:	44 0f       	add	r20, r20
    2970:	55 1f       	adc	r21, r21
    2972:	0a 94       	dec	r0
    2974:	e2 f7       	brpl	.-8      	; 0x296e <_ZN14HardwareSerial5beginEl+0x1b6>
    2976:	84 2b       	or	r24, r20
    2978:	80 83       	st	Z, r24
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	ff 90       	pop	r15
    2984:	ef 90       	pop	r14
    2986:	df 90       	pop	r13
    2988:	cf 90       	pop	r12
    298a:	bf 90       	pop	r11
    298c:	af 90       	pop	r10
    298e:	9f 90       	pop	r9
    2990:	8f 90       	pop	r8
    2992:	7f 90       	pop	r7
    2994:	6f 90       	pop	r6
    2996:	5f 90       	pop	r5
    2998:	08 95       	ret

0000299a <_ZN14HardwareSerial3endEv>:
    299a:	fc 01       	movw	r30, r24
    299c:	a2 85       	ldd	r26, Z+10	; 0x0a
    299e:	b3 85       	ldd	r27, Z+11	; 0x0b
    29a0:	4c 91       	ld	r20, X
    29a2:	21 e0       	ldi	r18, 0x01	; 1
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	c9 01       	movw	r24, r18
    29a8:	06 84       	ldd	r0, Z+14	; 0x0e
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <_ZN14HardwareSerial3endEv+0x16>
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	0a 94       	dec	r0
    29b2:	e2 f7       	brpl	.-8      	; 0x29ac <_ZN14HardwareSerial3endEv+0x12>
    29b4:	80 95       	com	r24
    29b6:	84 23       	and	r24, r20
    29b8:	8c 93       	st	X, r24
    29ba:	a2 85       	ldd	r26, Z+10	; 0x0a
    29bc:	b3 85       	ldd	r27, Z+11	; 0x0b
    29be:	4c 91       	ld	r20, X
    29c0:	c9 01       	movw	r24, r18
    29c2:	07 84       	ldd	r0, Z+15	; 0x0f
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <_ZN14HardwareSerial3endEv+0x30>
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	0a 94       	dec	r0
    29cc:	e2 f7       	brpl	.-8      	; 0x29c6 <_ZN14HardwareSerial3endEv+0x2c>
    29ce:	80 95       	com	r24
    29d0:	84 23       	and	r24, r20
    29d2:	8c 93       	st	X, r24
    29d4:	a2 85       	ldd	r26, Z+10	; 0x0a
    29d6:	b3 85       	ldd	r27, Z+11	; 0x0b
    29d8:	8c 91       	ld	r24, X
    29da:	00 88       	ldd	r0, Z+16	; 0x10
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <_ZN14HardwareSerial3endEv+0x48>
    29de:	22 0f       	add	r18, r18
    29e0:	33 1f       	adc	r19, r19
    29e2:	0a 94       	dec	r0
    29e4:	e2 f7       	brpl	.-8      	; 0x29de <_ZN14HardwareSerial3endEv+0x44>
    29e6:	20 95       	com	r18
    29e8:	28 23       	and	r18, r24
    29ea:	2c 93       	st	X, r18
    29ec:	08 95       	ret

000029ee <_ZN14HardwareSerial9availableEv>:
    29ee:	dc 01       	movw	r26, r24
    29f0:	12 96       	adiw	r26, 0x02	; 2
    29f2:	ed 91       	ld	r30, X+
    29f4:	fc 91       	ld	r31, X
    29f6:	13 97       	sbiw	r26, 0x03	; 3
    29f8:	e0 58       	subi	r30, 0x80	; 128
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	81 91       	ld	r24, Z+
    29fe:	91 91       	ld	r25, Z+
    2a00:	80 58       	subi	r24, 0x80	; 128
    2a02:	9f 4f       	sbci	r25, 0xFF	; 255
    2a04:	20 81       	ld	r18, Z
    2a06:	31 81       	ldd	r19, Z+1	; 0x01
    2a08:	82 1b       	sub	r24, r18
    2a0a:	93 0b       	sbc	r25, r19
    2a0c:	60 e8       	ldi	r22, 0x80	; 128
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	0e 94 08 24 	call	0x4810	; 0x4810 <__divmodhi4>
    2a14:	08 95       	ret

00002a16 <_ZN14HardwareSerial4readEv>:
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	12 96       	adiw	r26, 0x02	; 2
    2a1e:	ed 91       	ld	r30, X+
    2a20:	fc 91       	ld	r31, X
    2a22:	13 97       	sbiw	r26, 0x03	; 3
    2a24:	ef 01       	movw	r28, r30
    2a26:	ce 57       	subi	r28, 0x7E	; 126
    2a28:	df 4f       	sbci	r29, 0xFF	; 255
    2a2a:	48 81       	ld	r20, Y
    2a2c:	59 81       	ldd	r21, Y+1	; 0x01
    2a2e:	e0 58       	subi	r30, 0x80	; 128
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	91 81       	ldd	r25, Z+1	; 0x01
    2a36:	e0 58       	subi	r30, 0x80	; 128
    2a38:	f0 40       	sbci	r31, 0x00	; 0
    2a3a:	84 17       	cp	r24, r20
    2a3c:	95 07       	cpc	r25, r21
    2a3e:	19 f4       	brne	.+6      	; 0x2a46 <_ZN14HardwareSerial4readEv+0x30>
    2a40:	2f ef       	ldi	r18, 0xFF	; 255
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	0c c0       	rjmp	.+24     	; 0x2a5e <_ZN14HardwareSerial4readEv+0x48>
    2a46:	e4 0f       	add	r30, r20
    2a48:	f5 1f       	adc	r31, r21
    2a4a:	20 81       	ld	r18, Z
    2a4c:	ca 01       	movw	r24, r20
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	60 e8       	ldi	r22, 0x80	; 128
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	0e 94 08 24 	call	0x4810	; 0x4810 <__divmodhi4>
    2a58:	99 83       	std	Y+1, r25	; 0x01
    2a5a:	88 83       	st	Y, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	c9 01       	movw	r24, r18
    2a60:	df 91       	pop	r29
    2a62:	cf 91       	pop	r28
    2a64:	08 95       	ret

00002a66 <_ZN14HardwareSerial5flushEv>:
    2a66:	dc 01       	movw	r26, r24
    2a68:	12 96       	adiw	r26, 0x02	; 2
    2a6a:	ed 91       	ld	r30, X+
    2a6c:	fc 91       	ld	r31, X
    2a6e:	13 97       	sbiw	r26, 0x03	; 3
    2a70:	ee 57       	subi	r30, 0x7E	; 126
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	92 93       	st	-Z, r25
    2a7a:	82 93       	st	-Z, r24
    2a7c:	08 95       	ret

00002a7e <_ZN14HardwareSerial5writeEh>:
    2a7e:	fc 01       	movw	r30, r24
    2a80:	a0 85       	ldd	r26, Z+8	; 0x08
    2a82:	b1 85       	ldd	r27, Z+9	; 0x09
    2a84:	21 89       	ldd	r18, Z+17	; 0x11
    2a86:	8c 91       	ld	r24, X
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	02 2e       	mov	r0, r18
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <_ZN14HardwareSerial5writeEh+0x14>
    2a8e:	95 95       	asr	r25
    2a90:	87 95       	ror	r24
    2a92:	0a 94       	dec	r0
    2a94:	e2 f7       	brpl	.-8      	; 0x2a8e <_ZN14HardwareSerial5writeEh+0x10>
    2a96:	80 ff       	sbrs	r24, 0
    2a98:	f6 cf       	rjmp	.-20     	; 0x2a86 <_ZN14HardwareSerial5writeEh+0x8>
    2a9a:	04 84       	ldd	r0, Z+12	; 0x0c
    2a9c:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a9e:	e0 2d       	mov	r30, r0
    2aa0:	60 83       	st	Z, r22
    2aa2:	08 95       	ret

00002aa4 <_GLOBAL__I_rx_buffer>:
    2aa4:	2d e7       	ldi	r18, 0x7D	; 125
    2aa6:	34 e0       	ldi	r19, 0x04	; 4
    2aa8:	30 93 f9 07 	sts	0x07F9, r19
    2aac:	20 93 f8 07 	sts	0x07F8, r18
    2ab0:	88 ee       	ldi	r24, 0xE8	; 232
    2ab2:	95 e0       	ldi	r25, 0x05	; 5
    2ab4:	90 93 fb 07 	sts	0x07FB, r25
    2ab8:	80 93 fa 07 	sts	0x07FA, r24
    2abc:	85 ec       	ldi	r24, 0xC5	; 197
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	90 93 fd 07 	sts	0x07FD, r25
    2ac4:	80 93 fc 07 	sts	0x07FC, r24
    2ac8:	84 ec       	ldi	r24, 0xC4	; 196
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	90 93 ff 07 	sts	0x07FF, r25
    2ad0:	80 93 fe 07 	sts	0x07FE, r24
    2ad4:	80 ec       	ldi	r24, 0xC0	; 192
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	90 93 01 08 	sts	0x0801, r25
    2adc:	80 93 00 08 	sts	0x0800, r24
    2ae0:	81 ec       	ldi	r24, 0xC1	; 193
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	90 93 03 08 	sts	0x0803, r25
    2ae8:	80 93 02 08 	sts	0x0802, r24
    2aec:	86 ec       	ldi	r24, 0xC6	; 198
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	90 93 05 08 	sts	0x0805, r25
    2af4:	80 93 04 08 	sts	0x0804, r24
    2af8:	e4 e0       	ldi	r30, 0x04	; 4
    2afa:	e0 93 06 08 	sts	0x0806, r30
    2afe:	73 e0       	ldi	r23, 0x03	; 3
    2b00:	70 93 07 08 	sts	0x0807, r23
    2b04:	67 e0       	ldi	r22, 0x07	; 7
    2b06:	60 93 08 08 	sts	0x0808, r22
    2b0a:	55 e0       	ldi	r21, 0x05	; 5
    2b0c:	50 93 09 08 	sts	0x0809, r21
    2b10:	41 e0       	ldi	r20, 0x01	; 1
    2b12:	40 93 0a 08 	sts	0x080A, r20
    2b16:	30 93 0c 08 	sts	0x080C, r19
    2b1a:	20 93 0b 08 	sts	0x080B, r18
    2b1e:	8c e6       	ldi	r24, 0x6C	; 108
    2b20:	96 e0       	ldi	r25, 0x06	; 6
    2b22:	90 93 0e 08 	sts	0x080E, r25
    2b26:	80 93 0d 08 	sts	0x080D, r24
    2b2a:	8d ec       	ldi	r24, 0xCD	; 205
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	90 93 10 08 	sts	0x0810, r25
    2b32:	80 93 0f 08 	sts	0x080F, r24
    2b36:	8c ec       	ldi	r24, 0xCC	; 204
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	90 93 12 08 	sts	0x0812, r25
    2b3e:	80 93 11 08 	sts	0x0811, r24
    2b42:	88 ec       	ldi	r24, 0xC8	; 200
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	90 93 14 08 	sts	0x0814, r25
    2b4a:	80 93 13 08 	sts	0x0813, r24
    2b4e:	89 ec       	ldi	r24, 0xC9	; 201
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	90 93 16 08 	sts	0x0816, r25
    2b56:	80 93 15 08 	sts	0x0815, r24
    2b5a:	8e ec       	ldi	r24, 0xCE	; 206
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	90 93 18 08 	sts	0x0818, r25
    2b62:	80 93 17 08 	sts	0x0817, r24
    2b66:	e0 93 19 08 	sts	0x0819, r30
    2b6a:	70 93 1a 08 	sts	0x081A, r23
    2b6e:	60 93 1b 08 	sts	0x081B, r22
    2b72:	50 93 1c 08 	sts	0x081C, r21
    2b76:	40 93 1d 08 	sts	0x081D, r20
    2b7a:	30 93 1f 08 	sts	0x081F, r19
    2b7e:	20 93 1e 08 	sts	0x081E, r18
    2b82:	80 ef       	ldi	r24, 0xF0	; 240
    2b84:	96 e0       	ldi	r25, 0x06	; 6
    2b86:	90 93 21 08 	sts	0x0821, r25
    2b8a:	80 93 20 08 	sts	0x0820, r24
    2b8e:	85 ed       	ldi	r24, 0xD5	; 213
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	90 93 23 08 	sts	0x0823, r25
    2b96:	80 93 22 08 	sts	0x0822, r24
    2b9a:	84 ed       	ldi	r24, 0xD4	; 212
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	90 93 25 08 	sts	0x0825, r25
    2ba2:	80 93 24 08 	sts	0x0824, r24
    2ba6:	80 ed       	ldi	r24, 0xD0	; 208
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	90 93 27 08 	sts	0x0827, r25
    2bae:	80 93 26 08 	sts	0x0826, r24
    2bb2:	81 ed       	ldi	r24, 0xD1	; 209
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	90 93 29 08 	sts	0x0829, r25
    2bba:	80 93 28 08 	sts	0x0828, r24
    2bbe:	86 ed       	ldi	r24, 0xD6	; 214
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	90 93 2b 08 	sts	0x082B, r25
    2bc6:	80 93 2a 08 	sts	0x082A, r24
    2bca:	e0 93 2c 08 	sts	0x082C, r30
    2bce:	70 93 2d 08 	sts	0x082D, r23
    2bd2:	60 93 2e 08 	sts	0x082E, r22
    2bd6:	50 93 2f 08 	sts	0x082F, r21
    2bda:	40 93 30 08 	sts	0x0830, r20
    2bde:	30 93 32 08 	sts	0x0832, r19
    2be2:	20 93 31 08 	sts	0x0831, r18
    2be6:	84 e7       	ldi	r24, 0x74	; 116
    2be8:	97 e0       	ldi	r25, 0x07	; 7
    2bea:	90 93 34 08 	sts	0x0834, r25
    2bee:	80 93 33 08 	sts	0x0833, r24
    2bf2:	85 e3       	ldi	r24, 0x35	; 53
    2bf4:	91 e0       	ldi	r25, 0x01	; 1
    2bf6:	90 93 36 08 	sts	0x0836, r25
    2bfa:	80 93 35 08 	sts	0x0835, r24
    2bfe:	84 e3       	ldi	r24, 0x34	; 52
    2c00:	91 e0       	ldi	r25, 0x01	; 1
    2c02:	90 93 38 08 	sts	0x0838, r25
    2c06:	80 93 37 08 	sts	0x0837, r24
    2c0a:	80 e3       	ldi	r24, 0x30	; 48
    2c0c:	91 e0       	ldi	r25, 0x01	; 1
    2c0e:	90 93 3a 08 	sts	0x083A, r25
    2c12:	80 93 39 08 	sts	0x0839, r24
    2c16:	81 e3       	ldi	r24, 0x31	; 49
    2c18:	91 e0       	ldi	r25, 0x01	; 1
    2c1a:	90 93 3c 08 	sts	0x083C, r25
    2c1e:	80 93 3b 08 	sts	0x083B, r24
    2c22:	86 e3       	ldi	r24, 0x36	; 54
    2c24:	91 e0       	ldi	r25, 0x01	; 1
    2c26:	90 93 3e 08 	sts	0x083E, r25
    2c2a:	80 93 3d 08 	sts	0x083D, r24
    2c2e:	e0 93 3f 08 	sts	0x083F, r30
    2c32:	70 93 40 08 	sts	0x0840, r23
    2c36:	60 93 41 08 	sts	0x0841, r22
    2c3a:	50 93 42 08 	sts	0x0842, r21
    2c3e:	40 93 43 08 	sts	0x0843, r20
    2c42:	08 95       	ret

00002c44 <_ZN5Print5writeEPKc>:
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	8c 01       	movw	r16, r24
    2c4e:	eb 01       	movw	r28, r22
    2c50:	09 c0       	rjmp	.+18     	; 0x2c64 <_ZN5Print5writeEPKc+0x20>
    2c52:	21 96       	adiw	r28, 0x01	; 1
    2c54:	d8 01       	movw	r26, r16
    2c56:	ed 91       	ld	r30, X+
    2c58:	fc 91       	ld	r31, X
    2c5a:	01 90       	ld	r0, Z+
    2c5c:	f0 81       	ld	r31, Z
    2c5e:	e0 2d       	mov	r30, r0
    2c60:	c8 01       	movw	r24, r16
    2c62:	09 95       	icall
    2c64:	68 81       	ld	r22, Y
    2c66:	66 23       	and	r22, r22
    2c68:	a1 f7       	brne	.-24     	; 0x2c52 <_ZN5Print5writeEPKc+0xe>
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	08 95       	ret

00002c74 <_ZN5Print5writeEPKhj>:
    2c74:	ef 92       	push	r14
    2c76:	ff 92       	push	r15
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	8c 01       	movw	r16, r24
    2c82:	7b 01       	movw	r14, r22
    2c84:	ea 01       	movw	r28, r20
    2c86:	0c c0       	rjmp	.+24     	; 0x2ca0 <_ZN5Print5writeEPKhj+0x2c>
    2c88:	d7 01       	movw	r26, r14
    2c8a:	6d 91       	ld	r22, X+
    2c8c:	7d 01       	movw	r14, r26
    2c8e:	d8 01       	movw	r26, r16
    2c90:	ed 91       	ld	r30, X+
    2c92:	fc 91       	ld	r31, X
    2c94:	01 90       	ld	r0, Z+
    2c96:	f0 81       	ld	r31, Z
    2c98:	e0 2d       	mov	r30, r0
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	09 95       	icall
    2c9e:	21 97       	sbiw	r28, 0x01	; 1
    2ca0:	20 97       	sbiw	r28, 0x00	; 0
    2ca2:	91 f7       	brne	.-28     	; 0x2c88 <_ZN5Print5writeEPKhj+0x14>
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	1f 91       	pop	r17
    2caa:	0f 91       	pop	r16
    2cac:	ff 90       	pop	r15
    2cae:	ef 90       	pop	r14
    2cb0:	08 95       	ret

00002cb2 <_ZN5Print5printEPKc>:
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	ed 91       	ld	r30, X+
    2cb6:	fc 91       	ld	r31, X
    2cb8:	02 80       	ldd	r0, Z+2	; 0x02
    2cba:	f3 81       	ldd	r31, Z+3	; 0x03
    2cbc:	e0 2d       	mov	r30, r0
    2cbe:	09 95       	icall
    2cc0:	08 95       	ret

00002cc2 <_ZN5Print11printNumberEmh>:
    2cc2:	2f 92       	push	r2
    2cc4:	3f 92       	push	r3
    2cc6:	4f 92       	push	r4
    2cc8:	5f 92       	push	r5
    2cca:	6f 92       	push	r6
    2ccc:	7f 92       	push	r7
    2cce:	8f 92       	push	r8
    2cd0:	9f 92       	push	r9
    2cd2:	af 92       	push	r10
    2cd4:	bf 92       	push	r11
    2cd6:	cf 92       	push	r12
    2cd8:	df 92       	push	r13
    2cda:	ef 92       	push	r14
    2cdc:	ff 92       	push	r15
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	df 93       	push	r29
    2ce4:	cf 93       	push	r28
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	a0 97       	sbiw	r28, 0x20	; 32
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	1c 01       	movw	r2, r24
    2cf8:	6a 01       	movw	r12, r20
    2cfa:	7b 01       	movw	r14, r22
    2cfc:	41 15       	cp	r20, r1
    2cfe:	51 05       	cpc	r21, r1
    2d00:	61 05       	cpc	r22, r1
    2d02:	71 05       	cpc	r23, r1
    2d04:	49 f4       	brne	.+18     	; 0x2d18 <_ZN5Print11printNumberEmh+0x56>
    2d06:	40 e3       	ldi	r20, 0x30	; 48
    2d08:	50 e0       	ldi	r21, 0x00	; 0
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    2d16:	54 c0       	rjmp	.+168    	; 0x2dc0 <_ZN5Print11printNumberEmh+0xfe>
    2d18:	88 24       	eor	r8, r8
    2d1a:	99 24       	eor	r9, r9
    2d1c:	54 01       	movw	r10, r8
    2d1e:	42 2e       	mov	r4, r18
    2d20:	55 24       	eor	r5, r5
    2d22:	66 24       	eor	r6, r6
    2d24:	77 24       	eor	r7, r7
    2d26:	01 e0       	ldi	r16, 0x01	; 1
    2d28:	10 e0       	ldi	r17, 0x00	; 0
    2d2a:	0c 0f       	add	r16, r28
    2d2c:	1d 1f       	adc	r17, r29
    2d2e:	08 0d       	add	r16, r8
    2d30:	19 1d       	adc	r17, r9
    2d32:	c7 01       	movw	r24, r14
    2d34:	b6 01       	movw	r22, r12
    2d36:	a3 01       	movw	r20, r6
    2d38:	92 01       	movw	r18, r4
    2d3a:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmodsi4>
    2d3e:	f8 01       	movw	r30, r16
    2d40:	60 83       	st	Z, r22
    2d42:	08 94       	sec
    2d44:	81 1c       	adc	r8, r1
    2d46:	91 1c       	adc	r9, r1
    2d48:	a1 1c       	adc	r10, r1
    2d4a:	b1 1c       	adc	r11, r1
    2d4c:	c7 01       	movw	r24, r14
    2d4e:	b6 01       	movw	r22, r12
    2d50:	a3 01       	movw	r20, r6
    2d52:	92 01       	movw	r18, r4
    2d54:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmodsi4>
    2d58:	c9 01       	movw	r24, r18
    2d5a:	da 01       	movw	r26, r20
    2d5c:	6c 01       	movw	r12, r24
    2d5e:	7d 01       	movw	r14, r26
    2d60:	c1 14       	cp	r12, r1
    2d62:	d1 04       	cpc	r13, r1
    2d64:	e1 04       	cpc	r14, r1
    2d66:	f1 04       	cpc	r15, r1
    2d68:	f1 f6       	brne	.-68     	; 0x2d26 <_ZN5Print11printNumberEmh+0x64>
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	e8 2e       	mov	r14, r24
    2d6e:	f1 2c       	mov	r15, r1
    2d70:	ec 0e       	add	r14, r28
    2d72:	fd 1e       	adc	r15, r29
    2d74:	e8 0c       	add	r14, r8
    2d76:	f9 1c       	adc	r15, r9
    2d78:	3e 01       	movw	r6, r28
    2d7a:	08 94       	sec
    2d7c:	61 1c       	adc	r6, r1
    2d7e:	71 1c       	adc	r7, r1
    2d80:	d5 01       	movw	r26, r10
    2d82:	c4 01       	movw	r24, r8
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	a1 09       	sbc	r26, r1
    2d88:	b1 09       	sbc	r27, r1
    2d8a:	6c 01       	movw	r12, r24
    2d8c:	c8 18       	sub	r12, r8
    2d8e:	d9 08       	sbc	r13, r9
    2d90:	14 c0       	rjmp	.+40     	; 0x2dba <_ZN5Print11printNumberEmh+0xf8>
    2d92:	f6 01       	movw	r30, r12
    2d94:	ee 0d       	add	r30, r14
    2d96:	ff 1d       	adc	r31, r15
    2d98:	40 81       	ld	r20, Z
    2d9a:	4a 30       	cpi	r20, 0x0A	; 10
    2d9c:	10 f4       	brcc	.+4      	; 0x2da2 <_ZN5Print11printNumberEmh+0xe0>
    2d9e:	40 5d       	subi	r20, 0xD0	; 208
    2da0:	01 c0       	rjmp	.+2      	; 0x2da4 <_ZN5Print11printNumberEmh+0xe2>
    2da2:	49 5c       	subi	r20, 0xC9	; 201
    2da4:	50 e0       	ldi	r21, 0x00	; 0
    2da6:	60 e0       	ldi	r22, 0x00	; 0
    2da8:	70 e0       	ldi	r23, 0x00	; 0
    2daa:	c1 01       	movw	r24, r2
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    2db4:	08 94       	sec
    2db6:	e1 08       	sbc	r14, r1
    2db8:	f1 08       	sbc	r15, r1
    2dba:	6e 14       	cp	r6, r14
    2dbc:	7f 04       	cpc	r7, r15
    2dbe:	49 f7       	brne	.-46     	; 0x2d92 <_ZN5Print11printNumberEmh+0xd0>
    2dc0:	a0 96       	adiw	r28, 0x20	; 32
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	1f 91       	pop	r17
    2dd2:	0f 91       	pop	r16
    2dd4:	ff 90       	pop	r15
    2dd6:	ef 90       	pop	r14
    2dd8:	df 90       	pop	r13
    2dda:	cf 90       	pop	r12
    2ddc:	bf 90       	pop	r11
    2dde:	af 90       	pop	r10
    2de0:	9f 90       	pop	r9
    2de2:	8f 90       	pop	r8
    2de4:	7f 90       	pop	r7
    2de6:	6f 90       	pop	r6
    2de8:	5f 90       	pop	r5
    2dea:	4f 90       	pop	r4
    2dec:	3f 90       	pop	r3
    2dee:	2f 90       	pop	r2
    2df0:	08 95       	ret

00002df2 <_ZN5Print5printEmi>:
    2df2:	dc 01       	movw	r26, r24
    2df4:	21 15       	cp	r18, r1
    2df6:	31 05       	cpc	r19, r1
    2df8:	41 f4       	brne	.+16     	; 0x2e0a <_ZN5Print5printEmi+0x18>
    2dfa:	ed 91       	ld	r30, X+
    2dfc:	fc 91       	ld	r31, X
    2dfe:	01 90       	ld	r0, Z+
    2e00:	f0 81       	ld	r31, Z
    2e02:	e0 2d       	mov	r30, r0
    2e04:	64 2f       	mov	r22, r20
    2e06:	09 95       	icall
    2e08:	08 95       	ret
    2e0a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <_ZN5Print11printNumberEmh>
    2e0e:	08 95       	ret

00002e10 <_ZN5Print5printEji>:
    2e10:	ef 92       	push	r14
    2e12:	ff 92       	push	r15
    2e14:	0f 93       	push	r16
    2e16:	1f 93       	push	r17
    2e18:	9a 01       	movw	r18, r20
    2e1a:	7b 01       	movw	r14, r22
    2e1c:	00 e0       	ldi	r16, 0x00	; 0
    2e1e:	10 e0       	ldi	r17, 0x00	; 0
    2e20:	b8 01       	movw	r22, r16
    2e22:	a7 01       	movw	r20, r14
    2e24:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN5Print5printEmi>
    2e28:	1f 91       	pop	r17
    2e2a:	0f 91       	pop	r16
    2e2c:	ff 90       	pop	r15
    2e2e:	ef 90       	pop	r14
    2e30:	08 95       	ret

00002e32 <_ZN5Print5printEhi>:
    2e32:	ef 92       	push	r14
    2e34:	ff 92       	push	r15
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	9a 01       	movw	r18, r20
    2e3c:	e6 2e       	mov	r14, r22
    2e3e:	ff 24       	eor	r15, r15
    2e40:	00 e0       	ldi	r16, 0x00	; 0
    2e42:	10 e0       	ldi	r17, 0x00	; 0
    2e44:	b8 01       	movw	r22, r16
    2e46:	a7 01       	movw	r20, r14
    2e48:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN5Print5printEmi>
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	ff 90       	pop	r15
    2e52:	ef 90       	pop	r14
    2e54:	08 95       	ret

00002e56 <_ZN5Print5printEli>:
    2e56:	ef 92       	push	r14
    2e58:	ff 92       	push	r15
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	cf 93       	push	r28
    2e60:	df 93       	push	r29
    2e62:	ec 01       	movw	r28, r24
    2e64:	7a 01       	movw	r14, r20
    2e66:	8b 01       	movw	r16, r22
    2e68:	21 15       	cp	r18, r1
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	41 f4       	brne	.+16     	; 0x2e7e <_ZN5Print5printEli+0x28>
    2e6e:	e8 81       	ld	r30, Y
    2e70:	f9 81       	ldd	r31, Y+1	; 0x01
    2e72:	01 90       	ld	r0, Z+
    2e74:	f0 81       	ld	r31, Z
    2e76:	e0 2d       	mov	r30, r0
    2e78:	64 2f       	mov	r22, r20
    2e7a:	09 95       	icall
    2e7c:	1b c0       	rjmp	.+54     	; 0x2eb4 <_ZN5Print5printEli+0x5e>
    2e7e:	2a 30       	cpi	r18, 0x0A	; 10
    2e80:	31 05       	cpc	r19, r1
    2e82:	b1 f4       	brne	.+44     	; 0x2eb0 <_ZN5Print5printEli+0x5a>
    2e84:	77 ff       	sbrs	r23, 7
    2e86:	10 c0       	rjmp	.+32     	; 0x2ea8 <_ZN5Print5printEli+0x52>
    2e88:	4d e2       	ldi	r20, 0x2D	; 45
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	70 e0       	ldi	r23, 0x00	; 0
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    2e98:	10 95       	com	r17
    2e9a:	00 95       	com	r16
    2e9c:	f0 94       	com	r15
    2e9e:	e0 94       	com	r14
    2ea0:	e1 1c       	adc	r14, r1
    2ea2:	f1 1c       	adc	r15, r1
    2ea4:	01 1d       	adc	r16, r1
    2ea6:	11 1d       	adc	r17, r1
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	b8 01       	movw	r22, r16
    2eac:	a7 01       	movw	r20, r14
    2eae:	2a e0       	ldi	r18, 0x0A	; 10
    2eb0:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <_ZN5Print11printNumberEmh>
    2eb4:	df 91       	pop	r29
    2eb6:	cf 91       	pop	r28
    2eb8:	1f 91       	pop	r17
    2eba:	0f 91       	pop	r16
    2ebc:	ff 90       	pop	r15
    2ebe:	ef 90       	pop	r14
    2ec0:	08 95       	ret

00002ec2 <_ZN5Print5printEii>:
    2ec2:	ef 92       	push	r14
    2ec4:	ff 92       	push	r15
    2ec6:	0f 93       	push	r16
    2ec8:	1f 93       	push	r17
    2eca:	7b 01       	movw	r14, r22
    2ecc:	9a 01       	movw	r18, r20
    2ece:	00 27       	eor	r16, r16
    2ed0:	f7 fc       	sbrc	r15, 7
    2ed2:	00 95       	com	r16
    2ed4:	10 2f       	mov	r17, r16
    2ed6:	b8 01       	movw	r22, r16
    2ed8:	a7 01       	movw	r20, r14
    2eda:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	ff 90       	pop	r15
    2ee4:	ef 90       	pop	r14
    2ee6:	08 95       	ret

00002ee8 <_ZN5Print5printEci>:
    2ee8:	ef 92       	push	r14
    2eea:	ff 92       	push	r15
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	9a 01       	movw	r18, r20
    2ef2:	e6 2e       	mov	r14, r22
    2ef4:	ff 24       	eor	r15, r15
    2ef6:	00 e0       	ldi	r16, 0x00	; 0
    2ef8:	10 e0       	ldi	r17, 0x00	; 0
    2efa:	b8 01       	movw	r22, r16
    2efc:	a7 01       	movw	r20, r14
    2efe:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	ff 90       	pop	r15
    2f08:	ef 90       	pop	r14
    2f0a:	08 95       	ret

00002f0c <_ZN5Print7printlnEv>:
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	8c 01       	movw	r16, r24
    2f12:	4d e0       	ldi	r20, 0x0D	; 13
    2f14:	50 e0       	ldi	r21, 0x00	; 0
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    2f22:	c8 01       	movw	r24, r16
    2f24:	4a e0       	ldi	r20, 0x0A	; 10
    2f26:	50 e0       	ldi	r21, 0x00	; 0
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	70 e0       	ldi	r23, 0x00	; 0
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	08 95       	ret

00002f3a <_ZN5Print7printlnEmi>:
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	8c 01       	movw	r16, r24
    2f40:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN5Print5printEmi>
    2f44:	c8 01       	movw	r24, r16
    2f46:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print7printlnEv>
    2f4a:	1f 91       	pop	r17
    2f4c:	0f 91       	pop	r16
    2f4e:	08 95       	ret

00002f50 <_ZN5Print7printlnEji>:
    2f50:	cf 92       	push	r12
    2f52:	df 92       	push	r13
    2f54:	ef 92       	push	r14
    2f56:	ff 92       	push	r15
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	8c 01       	movw	r16, r24
    2f5e:	9a 01       	movw	r18, r20
    2f60:	6b 01       	movw	r12, r22
    2f62:	ee 24       	eor	r14, r14
    2f64:	ff 24       	eor	r15, r15
    2f66:	b7 01       	movw	r22, r14
    2f68:	a6 01       	movw	r20, r12
    2f6a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN5Print5printEmi>
    2f6e:	c8 01       	movw	r24, r16
    2f70:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print7printlnEv>
    2f74:	1f 91       	pop	r17
    2f76:	0f 91       	pop	r16
    2f78:	ff 90       	pop	r15
    2f7a:	ef 90       	pop	r14
    2f7c:	df 90       	pop	r13
    2f7e:	cf 90       	pop	r12
    2f80:	08 95       	ret

00002f82 <_ZN5Print7printlnEhi>:
    2f82:	cf 92       	push	r12
    2f84:	df 92       	push	r13
    2f86:	ef 92       	push	r14
    2f88:	ff 92       	push	r15
    2f8a:	0f 93       	push	r16
    2f8c:	1f 93       	push	r17
    2f8e:	8c 01       	movw	r16, r24
    2f90:	9a 01       	movw	r18, r20
    2f92:	c6 2e       	mov	r12, r22
    2f94:	dd 24       	eor	r13, r13
    2f96:	ee 24       	eor	r14, r14
    2f98:	ff 24       	eor	r15, r15
    2f9a:	b7 01       	movw	r22, r14
    2f9c:	a6 01       	movw	r20, r12
    2f9e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN5Print5printEmi>
    2fa2:	c8 01       	movw	r24, r16
    2fa4:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print7printlnEv>
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	ff 90       	pop	r15
    2fae:	ef 90       	pop	r14
    2fb0:	df 90       	pop	r13
    2fb2:	cf 90       	pop	r12
    2fb4:	08 95       	ret

00002fb6 <_ZN5Print7printlnEPKc>:
    2fb6:	0f 93       	push	r16
    2fb8:	1f 93       	push	r17
    2fba:	8c 01       	movw	r16, r24
    2fbc:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
    2fc0:	c8 01       	movw	r24, r16
    2fc2:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print7printlnEv>
    2fc6:	1f 91       	pop	r17
    2fc8:	0f 91       	pop	r16
    2fca:	08 95       	ret

00002fcc <_ZN5Print7printlnEli>:
    2fcc:	0f 93       	push	r16
    2fce:	1f 93       	push	r17
    2fd0:	8c 01       	movw	r16, r24
    2fd2:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    2fd6:	c8 01       	movw	r24, r16
    2fd8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print7printlnEv>
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	08 95       	ret

00002fe2 <_ZN5Print7printlnEii>:
    2fe2:	cf 92       	push	r12
    2fe4:	df 92       	push	r13
    2fe6:	ef 92       	push	r14
    2fe8:	ff 92       	push	r15
    2fea:	0f 93       	push	r16
    2fec:	1f 93       	push	r17
    2fee:	8c 01       	movw	r16, r24
    2ff0:	6b 01       	movw	r12, r22
    2ff2:	9a 01       	movw	r18, r20
    2ff4:	ee 24       	eor	r14, r14
    2ff6:	d7 fc       	sbrc	r13, 7
    2ff8:	e0 94       	com	r14
    2ffa:	fe 2c       	mov	r15, r14
    2ffc:	b7 01       	movw	r22, r14
    2ffe:	a6 01       	movw	r20, r12
    3000:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    3004:	c8 01       	movw	r24, r16
    3006:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print7printlnEv>
    300a:	1f 91       	pop	r17
    300c:	0f 91       	pop	r16
    300e:	ff 90       	pop	r15
    3010:	ef 90       	pop	r14
    3012:	df 90       	pop	r13
    3014:	cf 90       	pop	r12
    3016:	08 95       	ret

00003018 <_ZN5Print7printlnEci>:
    3018:	cf 92       	push	r12
    301a:	df 92       	push	r13
    301c:	ef 92       	push	r14
    301e:	ff 92       	push	r15
    3020:	0f 93       	push	r16
    3022:	1f 93       	push	r17
    3024:	8c 01       	movw	r16, r24
    3026:	9a 01       	movw	r18, r20
    3028:	c6 2e       	mov	r12, r22
    302a:	dd 24       	eor	r13, r13
    302c:	ee 24       	eor	r14, r14
    302e:	ff 24       	eor	r15, r15
    3030:	b7 01       	movw	r22, r14
    3032:	a6 01       	movw	r20, r12
    3034:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    3038:	c8 01       	movw	r24, r16
    303a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print7printlnEv>
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	ff 90       	pop	r15
    3044:	ef 90       	pop	r14
    3046:	df 90       	pop	r13
    3048:	cf 90       	pop	r12
    304a:	08 95       	ret

0000304c <_ZN5Print10printFloatEdh>:
    304c:	9f 92       	push	r9
    304e:	af 92       	push	r10
    3050:	bf 92       	push	r11
    3052:	cf 92       	push	r12
    3054:	df 92       	push	r13
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	ec 01       	movw	r28, r24
    3064:	7a 01       	movw	r14, r20
    3066:	8b 01       	movw	r16, r22
    3068:	92 2e       	mov	r9, r18
    306a:	cb 01       	movw	r24, r22
    306c:	ba 01       	movw	r22, r20
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	0e 94 99 20 	call	0x4132	; 0x4132 <__ltsf2>
    307a:	88 23       	and	r24, r24
    307c:	6c f4       	brge	.+26     	; 0x3098 <_ZN5Print10printFloatEdh+0x4c>
    307e:	ce 01       	movw	r24, r28
    3080:	4d e2       	ldi	r20, 0x2D	; 45
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	60 e0       	ldi	r22, 0x00	; 0
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    3090:	17 fb       	bst	r17, 7
    3092:	10 95       	com	r17
    3094:	17 f9       	bld	r17, 7
    3096:	10 95       	com	r17
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	5f e3       	ldi	r21, 0x3F	; 63
    30a0:	aa 24       	eor	r10, r10
    30a2:	0b c0       	rjmp	.+22     	; 0x30ba <_ZN5Print10printFloatEdh+0x6e>
    30a4:	ca 01       	movw	r24, r20
    30a6:	b9 01       	movw	r22, r18
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e2       	ldi	r20, 0x20	; 32
    30ae:	51 e4       	ldi	r21, 0x41	; 65
    30b0:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__divsf3>
    30b4:	9b 01       	movw	r18, r22
    30b6:	ac 01       	movw	r20, r24
    30b8:	a3 94       	inc	r10
    30ba:	a9 14       	cp	r10, r9
    30bc:	98 f3       	brcs	.-26     	; 0x30a4 <_ZN5Print10printFloatEdh+0x58>
    30be:	c8 01       	movw	r24, r16
    30c0:	b7 01       	movw	r22, r14
    30c2:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__addsf3>
    30c6:	5b 01       	movw	r10, r22
    30c8:	6c 01       	movw	r12, r24
    30ca:	0e 94 ed 1c 	call	0x39da	; 0x39da <__fixunssfsi>
    30ce:	7b 01       	movw	r14, r22
    30d0:	8c 01       	movw	r16, r24
    30d2:	ce 01       	movw	r24, r28
    30d4:	b8 01       	movw	r22, r16
    30d6:	a7 01       	movw	r20, r14
    30d8:	2a e0       	ldi	r18, 0x0A	; 10
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN5Print5printEmi>
    30e0:	99 20       	and	r9, r9
    30e2:	29 f0       	breq	.+10     	; 0x30ee <_ZN5Print10printFloatEdh+0xa2>
    30e4:	ce 01       	movw	r24, r28
    30e6:	63 e8       	ldi	r22, 0x83	; 131
    30e8:	74 e0       	ldi	r23, 0x04	; 4
    30ea:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print5printEPKc>
    30ee:	c8 01       	movw	r24, r16
    30f0:	b7 01       	movw	r22, r14
    30f2:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__floatunsisf>
    30f6:	9b 01       	movw	r18, r22
    30f8:	ac 01       	movw	r20, r24
    30fa:	c6 01       	movw	r24, r12
    30fc:	b5 01       	movw	r22, r10
    30fe:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__subsf3>
    3102:	22 c0       	rjmp	.+68     	; 0x3148 <_ZN5Print10printFloatEdh+0xfc>
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e2       	ldi	r20, 0x20	; 32
    310a:	51 e4       	ldi	r21, 0x41	; 65
    310c:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__mulsf3>
    3110:	7b 01       	movw	r14, r22
    3112:	8c 01       	movw	r16, r24
    3114:	0e 94 27 21 	call	0x424e	; 0x424e <__fixsfsi>
    3118:	5b 01       	movw	r10, r22
    311a:	6c 01       	movw	r12, r24
    311c:	cc 24       	eor	r12, r12
    311e:	b7 fc       	sbrc	r11, 7
    3120:	c0 94       	com	r12
    3122:	dc 2c       	mov	r13, r12
    3124:	ce 01       	movw	r24, r28
    3126:	b6 01       	movw	r22, r12
    3128:	a5 01       	movw	r20, r10
    312a:	2a e0       	ldi	r18, 0x0A	; 10
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN5Print5printEli>
    3132:	c6 01       	movw	r24, r12
    3134:	b5 01       	movw	r22, r10
    3136:	0e 94 c9 20 	call	0x4192	; 0x4192 <__floatsisf>
    313a:	9b 01       	movw	r18, r22
    313c:	ac 01       	movw	r20, r24
    313e:	c8 01       	movw	r24, r16
    3140:	b7 01       	movw	r22, r14
    3142:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__subsf3>
    3146:	9a 94       	dec	r9
    3148:	99 20       	and	r9, r9
    314a:	e1 f6       	brne	.-72     	; 0x3104 <_ZN5Print10printFloatEdh+0xb8>
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	1f 91       	pop	r17
    3152:	0f 91       	pop	r16
    3154:	ff 90       	pop	r15
    3156:	ef 90       	pop	r14
    3158:	df 90       	pop	r13
    315a:	cf 90       	pop	r12
    315c:	bf 90       	pop	r11
    315e:	af 90       	pop	r10
    3160:	9f 90       	pop	r9
    3162:	08 95       	ret

00003164 <_ZN5Print5printEdi>:
    3164:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN5Print10printFloatEdh>
    3168:	08 95       	ret

0000316a <_ZN5Print7printlnEdi>:
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	8c 01       	movw	r16, r24
    3170:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN5Print10printFloatEdh>
    3174:	c8 01       	movw	r24, r16
    3176:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN5Print7printlnEv>
    317a:	1f 91       	pop	r17
    317c:	0f 91       	pop	r16
    317e:	08 95       	ret

00003180 <attachInterrupt>:
    3180:	88 30       	cpi	r24, 0x08	; 8
    3182:	08 f0       	brcs	.+2      	; 0x3186 <attachInterrupt+0x6>
    3184:	78 c0       	rjmp	.+240    	; 0x3276 <attachInterrupt+0xf6>
    3186:	e8 2f       	mov	r30, r24
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	ee 0f       	add	r30, r30
    318c:	ff 1f       	adc	r31, r31
    318e:	ec 5b       	subi	r30, 0xBC	; 188
    3190:	f7 4f       	sbci	r31, 0xF7	; 247
    3192:	71 83       	std	Z+1, r23	; 0x01
    3194:	60 83       	st	Z, r22
    3196:	83 30       	cpi	r24, 0x03	; 3
    3198:	d9 f0       	breq	.+54     	; 0x31d0 <attachInterrupt+0x50>
    319a:	84 30       	cpi	r24, 0x04	; 4
    319c:	30 f4       	brcc	.+12     	; 0x31aa <attachInterrupt+0x2a>
    319e:	81 30       	cpi	r24, 0x01	; 1
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <attachInterrupt+0x24>
    31a2:	44 c0       	rjmp	.+136    	; 0x322c <attachInterrupt+0xac>
    31a4:	82 30       	cpi	r24, 0x02	; 2
    31a6:	60 f4       	brcc	.+24     	; 0x31c0 <attachInterrupt+0x40>
    31a8:	39 c0       	rjmp	.+114    	; 0x321c <attachInterrupt+0x9c>
    31aa:	85 30       	cpi	r24, 0x05	; 5
    31ac:	51 f1       	breq	.+84     	; 0x3202 <attachInterrupt+0x82>
    31ae:	85 30       	cpi	r24, 0x05	; 5
    31b0:	d8 f0       	brcs	.+54     	; 0x31e8 <attachInterrupt+0x68>
    31b2:	86 30       	cpi	r24, 0x06	; 6
    31b4:	09 f4       	brne	.+2      	; 0x31b8 <attachInterrupt+0x38>
    31b6:	46 c0       	rjmp	.+140    	; 0x3244 <attachInterrupt+0xc4>
    31b8:	87 30       	cpi	r24, 0x07	; 7
    31ba:	09 f0       	breq	.+2      	; 0x31be <attachInterrupt+0x3e>
    31bc:	5c c0       	rjmp	.+184    	; 0x3276 <attachInterrupt+0xf6>
    31be:	4f c0       	rjmp	.+158    	; 0x325e <attachInterrupt+0xde>
    31c0:	80 91 69 00 	lds	r24, 0x0069
    31c4:	8c 7f       	andi	r24, 0xFC	; 252
    31c6:	84 2b       	or	r24, r20
    31c8:	80 93 69 00 	sts	0x0069, r24
    31cc:	e8 9a       	sbi	0x1d, 0	; 29
    31ce:	08 95       	ret
    31d0:	80 91 69 00 	lds	r24, 0x0069
    31d4:	44 0f       	add	r20, r20
    31d6:	55 1f       	adc	r21, r21
    31d8:	44 0f       	add	r20, r20
    31da:	55 1f       	adc	r21, r21
    31dc:	83 7f       	andi	r24, 0xF3	; 243
    31de:	84 2b       	or	r24, r20
    31e0:	80 93 69 00 	sts	0x0069, r24
    31e4:	e9 9a       	sbi	0x1d, 1	; 29
    31e6:	08 95       	ret
    31e8:	80 91 69 00 	lds	r24, 0x0069
    31ec:	74 e0       	ldi	r23, 0x04	; 4
    31ee:	44 0f       	add	r20, r20
    31f0:	55 1f       	adc	r21, r21
    31f2:	7a 95       	dec	r23
    31f4:	e1 f7       	brne	.-8      	; 0x31ee <attachInterrupt+0x6e>
    31f6:	8f 7c       	andi	r24, 0xCF	; 207
    31f8:	84 2b       	or	r24, r20
    31fa:	80 93 69 00 	sts	0x0069, r24
    31fe:	ea 9a       	sbi	0x1d, 2	; 29
    3200:	08 95       	ret
    3202:	80 91 69 00 	lds	r24, 0x0069
    3206:	66 e0       	ldi	r22, 0x06	; 6
    3208:	44 0f       	add	r20, r20
    320a:	55 1f       	adc	r21, r21
    320c:	6a 95       	dec	r22
    320e:	e1 f7       	brne	.-8      	; 0x3208 <attachInterrupt+0x88>
    3210:	8f 73       	andi	r24, 0x3F	; 63
    3212:	84 2b       	or	r24, r20
    3214:	80 93 69 00 	sts	0x0069, r24
    3218:	eb 9a       	sbi	0x1d, 3	; 29
    321a:	08 95       	ret
    321c:	80 91 6a 00 	lds	r24, 0x006A
    3220:	8c 7f       	andi	r24, 0xFC	; 252
    3222:	84 2b       	or	r24, r20
    3224:	80 93 6a 00 	sts	0x006A, r24
    3228:	ec 9a       	sbi	0x1d, 4	; 29
    322a:	08 95       	ret
    322c:	80 91 6a 00 	lds	r24, 0x006A
    3230:	44 0f       	add	r20, r20
    3232:	55 1f       	adc	r21, r21
    3234:	44 0f       	add	r20, r20
    3236:	55 1f       	adc	r21, r21
    3238:	83 7f       	andi	r24, 0xF3	; 243
    323a:	84 2b       	or	r24, r20
    323c:	80 93 6a 00 	sts	0x006A, r24
    3240:	ed 9a       	sbi	0x1d, 5	; 29
    3242:	08 95       	ret
    3244:	80 91 6a 00 	lds	r24, 0x006A
    3248:	24 e0       	ldi	r18, 0x04	; 4
    324a:	44 0f       	add	r20, r20
    324c:	55 1f       	adc	r21, r21
    324e:	2a 95       	dec	r18
    3250:	e1 f7       	brne	.-8      	; 0x324a <attachInterrupt+0xca>
    3252:	8f 7c       	andi	r24, 0xCF	; 207
    3254:	84 2b       	or	r24, r20
    3256:	80 93 6a 00 	sts	0x006A, r24
    325a:	ee 9a       	sbi	0x1d, 6	; 29
    325c:	08 95       	ret
    325e:	80 91 6a 00 	lds	r24, 0x006A
    3262:	96 e0       	ldi	r25, 0x06	; 6
    3264:	44 0f       	add	r20, r20
    3266:	55 1f       	adc	r21, r21
    3268:	9a 95       	dec	r25
    326a:	e1 f7       	brne	.-8      	; 0x3264 <attachInterrupt+0xe4>
    326c:	8f 73       	andi	r24, 0x3F	; 63
    326e:	84 2b       	or	r24, r20
    3270:	80 93 6a 00 	sts	0x006A, r24
    3274:	ef 9a       	sbi	0x1d, 7	; 29
    3276:	08 95       	ret

00003278 <detachInterrupt>:
    3278:	88 30       	cpi	r24, 0x08	; 8
    327a:	48 f5       	brcc	.+82     	; 0x32ce <detachInterrupt+0x56>
    327c:	83 30       	cpi	r24, 0x03	; 3
    327e:	91 f0       	breq	.+36     	; 0x32a4 <detachInterrupt+0x2c>
    3280:	84 30       	cpi	r24, 0x04	; 4
    3282:	28 f4       	brcc	.+10     	; 0x328e <detachInterrupt+0x16>
    3284:	81 30       	cpi	r24, 0x01	; 1
    3286:	b1 f0       	breq	.+44     	; 0x32b4 <detachInterrupt+0x3c>
    3288:	82 30       	cpi	r24, 0x02	; 2
    328a:	50 f4       	brcc	.+20     	; 0x32a0 <detachInterrupt+0x28>
    328c:	11 c0       	rjmp	.+34     	; 0x32b0 <detachInterrupt+0x38>
    328e:	85 30       	cpi	r24, 0x05	; 5
    3290:	69 f0       	breq	.+26     	; 0x32ac <detachInterrupt+0x34>
    3292:	85 30       	cpi	r24, 0x05	; 5
    3294:	48 f0       	brcs	.+18     	; 0x32a8 <detachInterrupt+0x30>
    3296:	86 30       	cpi	r24, 0x06	; 6
    3298:	79 f0       	breq	.+30     	; 0x32b8 <detachInterrupt+0x40>
    329a:	87 30       	cpi	r24, 0x07	; 7
    329c:	81 f4       	brne	.+32     	; 0x32be <detachInterrupt+0x46>
    329e:	0e c0       	rjmp	.+28     	; 0x32bc <detachInterrupt+0x44>
    32a0:	e8 98       	cbi	0x1d, 0	; 29
    32a2:	0d c0       	rjmp	.+26     	; 0x32be <detachInterrupt+0x46>
    32a4:	e9 98       	cbi	0x1d, 1	; 29
    32a6:	0b c0       	rjmp	.+22     	; 0x32be <detachInterrupt+0x46>
    32a8:	ea 98       	cbi	0x1d, 2	; 29
    32aa:	09 c0       	rjmp	.+18     	; 0x32be <detachInterrupt+0x46>
    32ac:	eb 98       	cbi	0x1d, 3	; 29
    32ae:	07 c0       	rjmp	.+14     	; 0x32be <detachInterrupt+0x46>
    32b0:	ec 98       	cbi	0x1d, 4	; 29
    32b2:	05 c0       	rjmp	.+10     	; 0x32be <detachInterrupt+0x46>
    32b4:	ed 98       	cbi	0x1d, 5	; 29
    32b6:	03 c0       	rjmp	.+6      	; 0x32be <detachInterrupt+0x46>
    32b8:	ee 98       	cbi	0x1d, 6	; 29
    32ba:	01 c0       	rjmp	.+2      	; 0x32be <detachInterrupt+0x46>
    32bc:	ef 98       	cbi	0x1d, 7	; 29
    32be:	e8 2f       	mov	r30, r24
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	ee 0f       	add	r30, r30
    32c4:	ff 1f       	adc	r31, r31
    32c6:	ec 5b       	subi	r30, 0xBC	; 188
    32c8:	f7 4f       	sbci	r31, 0xF7	; 247
    32ca:	11 82       	std	Z+1, r1	; 0x01
    32cc:	10 82       	st	Z, r1
    32ce:	08 95       	ret

000032d0 <__vector_1>:
    32d0:	1f 92       	push	r1
    32d2:	0f 92       	push	r0
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	0f 92       	push	r0
    32d8:	0b b6       	in	r0, 0x3b	; 59
    32da:	0f 92       	push	r0
    32dc:	11 24       	eor	r1, r1
    32de:	2f 93       	push	r18
    32e0:	3f 93       	push	r19
    32e2:	4f 93       	push	r20
    32e4:	5f 93       	push	r21
    32e6:	6f 93       	push	r22
    32e8:	7f 93       	push	r23
    32ea:	8f 93       	push	r24
    32ec:	9f 93       	push	r25
    32ee:	af 93       	push	r26
    32f0:	bf 93       	push	r27
    32f2:	ef 93       	push	r30
    32f4:	ff 93       	push	r31
    32f6:	80 91 48 08 	lds	r24, 0x0848
    32fa:	90 91 49 08 	lds	r25, 0x0849
    32fe:	89 2b       	or	r24, r25
    3300:	29 f0       	breq	.+10     	; 0x330c <__vector_1+0x3c>
    3302:	e0 91 48 08 	lds	r30, 0x0848
    3306:	f0 91 49 08 	lds	r31, 0x0849
    330a:	09 95       	icall
    330c:	ff 91       	pop	r31
    330e:	ef 91       	pop	r30
    3310:	bf 91       	pop	r27
    3312:	af 91       	pop	r26
    3314:	9f 91       	pop	r25
    3316:	8f 91       	pop	r24
    3318:	7f 91       	pop	r23
    331a:	6f 91       	pop	r22
    331c:	5f 91       	pop	r21
    331e:	4f 91       	pop	r20
    3320:	3f 91       	pop	r19
    3322:	2f 91       	pop	r18
    3324:	0f 90       	pop	r0
    3326:	0b be       	out	0x3b, r0	; 59
    3328:	0f 90       	pop	r0
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	0f 90       	pop	r0
    332e:	1f 90       	pop	r1
    3330:	18 95       	reti

00003332 <__vector_2>:
    3332:	1f 92       	push	r1
    3334:	0f 92       	push	r0
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	0f 92       	push	r0
    333a:	0b b6       	in	r0, 0x3b	; 59
    333c:	0f 92       	push	r0
    333e:	11 24       	eor	r1, r1
    3340:	2f 93       	push	r18
    3342:	3f 93       	push	r19
    3344:	4f 93       	push	r20
    3346:	5f 93       	push	r21
    3348:	6f 93       	push	r22
    334a:	7f 93       	push	r23
    334c:	8f 93       	push	r24
    334e:	9f 93       	push	r25
    3350:	af 93       	push	r26
    3352:	bf 93       	push	r27
    3354:	ef 93       	push	r30
    3356:	ff 93       	push	r31
    3358:	80 91 4a 08 	lds	r24, 0x084A
    335c:	90 91 4b 08 	lds	r25, 0x084B
    3360:	89 2b       	or	r24, r25
    3362:	29 f0       	breq	.+10     	; 0x336e <__vector_2+0x3c>
    3364:	e0 91 4a 08 	lds	r30, 0x084A
    3368:	f0 91 4b 08 	lds	r31, 0x084B
    336c:	09 95       	icall
    336e:	ff 91       	pop	r31
    3370:	ef 91       	pop	r30
    3372:	bf 91       	pop	r27
    3374:	af 91       	pop	r26
    3376:	9f 91       	pop	r25
    3378:	8f 91       	pop	r24
    337a:	7f 91       	pop	r23
    337c:	6f 91       	pop	r22
    337e:	5f 91       	pop	r21
    3380:	4f 91       	pop	r20
    3382:	3f 91       	pop	r19
    3384:	2f 91       	pop	r18
    3386:	0f 90       	pop	r0
    3388:	0b be       	out	0x3b, r0	; 59
    338a:	0f 90       	pop	r0
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	0f 90       	pop	r0
    3390:	1f 90       	pop	r1
    3392:	18 95       	reti

00003394 <__vector_3>:
    3394:	1f 92       	push	r1
    3396:	0f 92       	push	r0
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	0f 92       	push	r0
    339c:	0b b6       	in	r0, 0x3b	; 59
    339e:	0f 92       	push	r0
    33a0:	11 24       	eor	r1, r1
    33a2:	2f 93       	push	r18
    33a4:	3f 93       	push	r19
    33a6:	4f 93       	push	r20
    33a8:	5f 93       	push	r21
    33aa:	6f 93       	push	r22
    33ac:	7f 93       	push	r23
    33ae:	8f 93       	push	r24
    33b0:	9f 93       	push	r25
    33b2:	af 93       	push	r26
    33b4:	bf 93       	push	r27
    33b6:	ef 93       	push	r30
    33b8:	ff 93       	push	r31
    33ba:	80 91 4c 08 	lds	r24, 0x084C
    33be:	90 91 4d 08 	lds	r25, 0x084D
    33c2:	89 2b       	or	r24, r25
    33c4:	29 f0       	breq	.+10     	; 0x33d0 <__vector_3+0x3c>
    33c6:	e0 91 4c 08 	lds	r30, 0x084C
    33ca:	f0 91 4d 08 	lds	r31, 0x084D
    33ce:	09 95       	icall
    33d0:	ff 91       	pop	r31
    33d2:	ef 91       	pop	r30
    33d4:	bf 91       	pop	r27
    33d6:	af 91       	pop	r26
    33d8:	9f 91       	pop	r25
    33da:	8f 91       	pop	r24
    33dc:	7f 91       	pop	r23
    33de:	6f 91       	pop	r22
    33e0:	5f 91       	pop	r21
    33e2:	4f 91       	pop	r20
    33e4:	3f 91       	pop	r19
    33e6:	2f 91       	pop	r18
    33e8:	0f 90       	pop	r0
    33ea:	0b be       	out	0x3b, r0	; 59
    33ec:	0f 90       	pop	r0
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	0f 90       	pop	r0
    33f2:	1f 90       	pop	r1
    33f4:	18 95       	reti

000033f6 <__vector_4>:
    33f6:	1f 92       	push	r1
    33f8:	0f 92       	push	r0
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	0f 92       	push	r0
    33fe:	0b b6       	in	r0, 0x3b	; 59
    3400:	0f 92       	push	r0
    3402:	11 24       	eor	r1, r1
    3404:	2f 93       	push	r18
    3406:	3f 93       	push	r19
    3408:	4f 93       	push	r20
    340a:	5f 93       	push	r21
    340c:	6f 93       	push	r22
    340e:	7f 93       	push	r23
    3410:	8f 93       	push	r24
    3412:	9f 93       	push	r25
    3414:	af 93       	push	r26
    3416:	bf 93       	push	r27
    3418:	ef 93       	push	r30
    341a:	ff 93       	push	r31
    341c:	80 91 4e 08 	lds	r24, 0x084E
    3420:	90 91 4f 08 	lds	r25, 0x084F
    3424:	89 2b       	or	r24, r25
    3426:	29 f0       	breq	.+10     	; 0x3432 <__vector_4+0x3c>
    3428:	e0 91 4e 08 	lds	r30, 0x084E
    342c:	f0 91 4f 08 	lds	r31, 0x084F
    3430:	09 95       	icall
    3432:	ff 91       	pop	r31
    3434:	ef 91       	pop	r30
    3436:	bf 91       	pop	r27
    3438:	af 91       	pop	r26
    343a:	9f 91       	pop	r25
    343c:	8f 91       	pop	r24
    343e:	7f 91       	pop	r23
    3440:	6f 91       	pop	r22
    3442:	5f 91       	pop	r21
    3444:	4f 91       	pop	r20
    3446:	3f 91       	pop	r19
    3448:	2f 91       	pop	r18
    344a:	0f 90       	pop	r0
    344c:	0b be       	out	0x3b, r0	; 59
    344e:	0f 90       	pop	r0
    3450:	0f be       	out	0x3f, r0	; 63
    3452:	0f 90       	pop	r0
    3454:	1f 90       	pop	r1
    3456:	18 95       	reti

00003458 <__vector_5>:
    3458:	1f 92       	push	r1
    345a:	0f 92       	push	r0
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	0f 92       	push	r0
    3460:	0b b6       	in	r0, 0x3b	; 59
    3462:	0f 92       	push	r0
    3464:	11 24       	eor	r1, r1
    3466:	2f 93       	push	r18
    3468:	3f 93       	push	r19
    346a:	4f 93       	push	r20
    346c:	5f 93       	push	r21
    346e:	6f 93       	push	r22
    3470:	7f 93       	push	r23
    3472:	8f 93       	push	r24
    3474:	9f 93       	push	r25
    3476:	af 93       	push	r26
    3478:	bf 93       	push	r27
    347a:	ef 93       	push	r30
    347c:	ff 93       	push	r31
    347e:	80 91 44 08 	lds	r24, 0x0844
    3482:	90 91 45 08 	lds	r25, 0x0845
    3486:	89 2b       	or	r24, r25
    3488:	29 f0       	breq	.+10     	; 0x3494 <__vector_5+0x3c>
    348a:	e0 91 44 08 	lds	r30, 0x0844
    348e:	f0 91 45 08 	lds	r31, 0x0845
    3492:	09 95       	icall
    3494:	ff 91       	pop	r31
    3496:	ef 91       	pop	r30
    3498:	bf 91       	pop	r27
    349a:	af 91       	pop	r26
    349c:	9f 91       	pop	r25
    349e:	8f 91       	pop	r24
    34a0:	7f 91       	pop	r23
    34a2:	6f 91       	pop	r22
    34a4:	5f 91       	pop	r21
    34a6:	4f 91       	pop	r20
    34a8:	3f 91       	pop	r19
    34aa:	2f 91       	pop	r18
    34ac:	0f 90       	pop	r0
    34ae:	0b be       	out	0x3b, r0	; 59
    34b0:	0f 90       	pop	r0
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	0f 90       	pop	r0
    34b6:	1f 90       	pop	r1
    34b8:	18 95       	reti

000034ba <__vector_6>:
    34ba:	1f 92       	push	r1
    34bc:	0f 92       	push	r0
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	0f 92       	push	r0
    34c2:	0b b6       	in	r0, 0x3b	; 59
    34c4:	0f 92       	push	r0
    34c6:	11 24       	eor	r1, r1
    34c8:	2f 93       	push	r18
    34ca:	3f 93       	push	r19
    34cc:	4f 93       	push	r20
    34ce:	5f 93       	push	r21
    34d0:	6f 93       	push	r22
    34d2:	7f 93       	push	r23
    34d4:	8f 93       	push	r24
    34d6:	9f 93       	push	r25
    34d8:	af 93       	push	r26
    34da:	bf 93       	push	r27
    34dc:	ef 93       	push	r30
    34de:	ff 93       	push	r31
    34e0:	80 91 46 08 	lds	r24, 0x0846
    34e4:	90 91 47 08 	lds	r25, 0x0847
    34e8:	89 2b       	or	r24, r25
    34ea:	29 f0       	breq	.+10     	; 0x34f6 <__vector_6+0x3c>
    34ec:	e0 91 46 08 	lds	r30, 0x0846
    34f0:	f0 91 47 08 	lds	r31, 0x0847
    34f4:	09 95       	icall
    34f6:	ff 91       	pop	r31
    34f8:	ef 91       	pop	r30
    34fa:	bf 91       	pop	r27
    34fc:	af 91       	pop	r26
    34fe:	9f 91       	pop	r25
    3500:	8f 91       	pop	r24
    3502:	7f 91       	pop	r23
    3504:	6f 91       	pop	r22
    3506:	5f 91       	pop	r21
    3508:	4f 91       	pop	r20
    350a:	3f 91       	pop	r19
    350c:	2f 91       	pop	r18
    350e:	0f 90       	pop	r0
    3510:	0b be       	out	0x3b, r0	; 59
    3512:	0f 90       	pop	r0
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	0f 90       	pop	r0
    3518:	1f 90       	pop	r1
    351a:	18 95       	reti

0000351c <__vector_7>:
    351c:	1f 92       	push	r1
    351e:	0f 92       	push	r0
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	0f 92       	push	r0
    3524:	0b b6       	in	r0, 0x3b	; 59
    3526:	0f 92       	push	r0
    3528:	11 24       	eor	r1, r1
    352a:	2f 93       	push	r18
    352c:	3f 93       	push	r19
    352e:	4f 93       	push	r20
    3530:	5f 93       	push	r21
    3532:	6f 93       	push	r22
    3534:	7f 93       	push	r23
    3536:	8f 93       	push	r24
    3538:	9f 93       	push	r25
    353a:	af 93       	push	r26
    353c:	bf 93       	push	r27
    353e:	ef 93       	push	r30
    3540:	ff 93       	push	r31
    3542:	80 91 50 08 	lds	r24, 0x0850
    3546:	90 91 51 08 	lds	r25, 0x0851
    354a:	89 2b       	or	r24, r25
    354c:	29 f0       	breq	.+10     	; 0x3558 <__vector_7+0x3c>
    354e:	e0 91 50 08 	lds	r30, 0x0850
    3552:	f0 91 51 08 	lds	r31, 0x0851
    3556:	09 95       	icall
    3558:	ff 91       	pop	r31
    355a:	ef 91       	pop	r30
    355c:	bf 91       	pop	r27
    355e:	af 91       	pop	r26
    3560:	9f 91       	pop	r25
    3562:	8f 91       	pop	r24
    3564:	7f 91       	pop	r23
    3566:	6f 91       	pop	r22
    3568:	5f 91       	pop	r21
    356a:	4f 91       	pop	r20
    356c:	3f 91       	pop	r19
    356e:	2f 91       	pop	r18
    3570:	0f 90       	pop	r0
    3572:	0b be       	out	0x3b, r0	; 59
    3574:	0f 90       	pop	r0
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	0f 90       	pop	r0
    357a:	1f 90       	pop	r1
    357c:	18 95       	reti

0000357e <__vector_8>:
    357e:	1f 92       	push	r1
    3580:	0f 92       	push	r0
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	0f 92       	push	r0
    3586:	0b b6       	in	r0, 0x3b	; 59
    3588:	0f 92       	push	r0
    358a:	11 24       	eor	r1, r1
    358c:	2f 93       	push	r18
    358e:	3f 93       	push	r19
    3590:	4f 93       	push	r20
    3592:	5f 93       	push	r21
    3594:	6f 93       	push	r22
    3596:	7f 93       	push	r23
    3598:	8f 93       	push	r24
    359a:	9f 93       	push	r25
    359c:	af 93       	push	r26
    359e:	bf 93       	push	r27
    35a0:	ef 93       	push	r30
    35a2:	ff 93       	push	r31
    35a4:	80 91 52 08 	lds	r24, 0x0852
    35a8:	90 91 53 08 	lds	r25, 0x0853
    35ac:	89 2b       	or	r24, r25
    35ae:	29 f0       	breq	.+10     	; 0x35ba <__vector_8+0x3c>
    35b0:	e0 91 52 08 	lds	r30, 0x0852
    35b4:	f0 91 53 08 	lds	r31, 0x0853
    35b8:	09 95       	icall
    35ba:	ff 91       	pop	r31
    35bc:	ef 91       	pop	r30
    35be:	bf 91       	pop	r27
    35c0:	af 91       	pop	r26
    35c2:	9f 91       	pop	r25
    35c4:	8f 91       	pop	r24
    35c6:	7f 91       	pop	r23
    35c8:	6f 91       	pop	r22
    35ca:	5f 91       	pop	r21
    35cc:	4f 91       	pop	r20
    35ce:	3f 91       	pop	r19
    35d0:	2f 91       	pop	r18
    35d2:	0f 90       	pop	r0
    35d4:	0b be       	out	0x3b, r0	; 59
    35d6:	0f 90       	pop	r0
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	0f 90       	pop	r0
    35dc:	1f 90       	pop	r1
    35de:	18 95       	reti

000035e0 <__vector_23>:
    35e0:	1f 92       	push	r1
    35e2:	0f 92       	push	r0
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	0f 92       	push	r0
    35e8:	11 24       	eor	r1, r1
    35ea:	2f 93       	push	r18
    35ec:	3f 93       	push	r19
    35ee:	8f 93       	push	r24
    35f0:	9f 93       	push	r25
    35f2:	af 93       	push	r26
    35f4:	bf 93       	push	r27
    35f6:	80 91 58 08 	lds	r24, 0x0858
    35fa:	90 91 59 08 	lds	r25, 0x0859
    35fe:	a0 91 5a 08 	lds	r26, 0x085A
    3602:	b0 91 5b 08 	lds	r27, 0x085B
    3606:	30 91 5c 08 	lds	r19, 0x085C
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	a1 1d       	adc	r26, r1
    360e:	b1 1d       	adc	r27, r1
    3610:	23 2f       	mov	r18, r19
    3612:	2d 5f       	subi	r18, 0xFD	; 253
    3614:	2d 37       	cpi	r18, 0x7D	; 125
    3616:	20 f0       	brcs	.+8      	; 0x3620 <__vector_23+0x40>
    3618:	2d 57       	subi	r18, 0x7D	; 125
    361a:	01 96       	adiw	r24, 0x01	; 1
    361c:	a1 1d       	adc	r26, r1
    361e:	b1 1d       	adc	r27, r1
    3620:	20 93 5c 08 	sts	0x085C, r18
    3624:	80 93 58 08 	sts	0x0858, r24
    3628:	90 93 59 08 	sts	0x0859, r25
    362c:	a0 93 5a 08 	sts	0x085A, r26
    3630:	b0 93 5b 08 	sts	0x085B, r27
    3634:	80 91 54 08 	lds	r24, 0x0854
    3638:	90 91 55 08 	lds	r25, 0x0855
    363c:	a0 91 56 08 	lds	r26, 0x0856
    3640:	b0 91 57 08 	lds	r27, 0x0857
    3644:	01 96       	adiw	r24, 0x01	; 1
    3646:	a1 1d       	adc	r26, r1
    3648:	b1 1d       	adc	r27, r1
    364a:	80 93 54 08 	sts	0x0854, r24
    364e:	90 93 55 08 	sts	0x0855, r25
    3652:	a0 93 56 08 	sts	0x0856, r26
    3656:	b0 93 57 08 	sts	0x0857, r27
    365a:	bf 91       	pop	r27
    365c:	af 91       	pop	r26
    365e:	9f 91       	pop	r25
    3660:	8f 91       	pop	r24
    3662:	3f 91       	pop	r19
    3664:	2f 91       	pop	r18
    3666:	0f 90       	pop	r0
    3668:	0f be       	out	0x3f, r0	; 63
    366a:	0f 90       	pop	r0
    366c:	1f 90       	pop	r1
    366e:	18 95       	reti

00003670 <millis>:
    3670:	8f b7       	in	r24, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	20 91 58 08 	lds	r18, 0x0858
    3678:	30 91 59 08 	lds	r19, 0x0859
    367c:	40 91 5a 08 	lds	r20, 0x085A
    3680:	50 91 5b 08 	lds	r21, 0x085B
    3684:	8f bf       	out	0x3f, r24	; 63
    3686:	b9 01       	movw	r22, r18
    3688:	ca 01       	movw	r24, r20
    368a:	08 95       	ret

0000368c <micros>:
    368c:	9f b7       	in	r25, 0x3f	; 63
    368e:	f8 94       	cli
    3690:	20 91 54 08 	lds	r18, 0x0854
    3694:	30 91 55 08 	lds	r19, 0x0855
    3698:	40 91 56 08 	lds	r20, 0x0856
    369c:	50 91 57 08 	lds	r21, 0x0857
    36a0:	86 b5       	in	r24, 0x26	; 38
    36a2:	a8 9b       	sbis	0x15, 0	; 21
    36a4:	06 c0       	rjmp	.+12     	; 0x36b2 <micros+0x26>
    36a6:	8f 3f       	cpi	r24, 0xFF	; 255
    36a8:	21 f0       	breq	.+8      	; 0x36b2 <micros+0x26>
    36aa:	2f 5f       	subi	r18, 0xFF	; 255
    36ac:	3f 4f       	sbci	r19, 0xFF	; 255
    36ae:	4f 4f       	sbci	r20, 0xFF	; 255
    36b0:	5f 4f       	sbci	r21, 0xFF	; 255
    36b2:	9f bf       	out	0x3f, r25	; 63
    36b4:	54 2f       	mov	r21, r20
    36b6:	43 2f       	mov	r20, r19
    36b8:	32 2f       	mov	r19, r18
    36ba:	22 27       	eor	r18, r18
    36bc:	28 0f       	add	r18, r24
    36be:	31 1d       	adc	r19, r1
    36c0:	41 1d       	adc	r20, r1
    36c2:	51 1d       	adc	r21, r1
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	22 0f       	add	r18, r18
    36c8:	33 1f       	adc	r19, r19
    36ca:	44 1f       	adc	r20, r20
    36cc:	55 1f       	adc	r21, r21
    36ce:	8a 95       	dec	r24
    36d0:	d1 f7       	brne	.-12     	; 0x36c6 <micros+0x3a>
    36d2:	b9 01       	movw	r22, r18
    36d4:	ca 01       	movw	r24, r20
    36d6:	08 95       	ret

000036d8 <delay>:
    36d8:	ef 92       	push	r14
    36da:	ff 92       	push	r15
    36dc:	0f 93       	push	r16
    36de:	1f 93       	push	r17
    36e0:	7b 01       	movw	r14, r22
    36e2:	8c 01       	movw	r16, r24
    36e4:	8f b7       	in	r24, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	40 91 58 08 	lds	r20, 0x0858
    36ec:	50 91 59 08 	lds	r21, 0x0859
    36f0:	60 91 5a 08 	lds	r22, 0x085A
    36f4:	70 91 5b 08 	lds	r23, 0x085B
    36f8:	8f bf       	out	0x3f, r24	; 63
    36fa:	2f b7       	in	r18, 0x3f	; 63
    36fc:	f8 94       	cli
    36fe:	80 91 58 08 	lds	r24, 0x0858
    3702:	90 91 59 08 	lds	r25, 0x0859
    3706:	a0 91 5a 08 	lds	r26, 0x085A
    370a:	b0 91 5b 08 	lds	r27, 0x085B
    370e:	2f bf       	out	0x3f, r18	; 63
    3710:	84 1b       	sub	r24, r20
    3712:	95 0b       	sbc	r25, r21
    3714:	a6 0b       	sbc	r26, r22
    3716:	b7 0b       	sbc	r27, r23
    3718:	e8 16       	cp	r14, r24
    371a:	f9 06       	cpc	r15, r25
    371c:	0a 07       	cpc	r16, r26
    371e:	1b 07       	cpc	r17, r27
    3720:	60 f7       	brcc	.-40     	; 0x36fa <delay+0x22>
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	ff 90       	pop	r15
    3728:	ef 90       	pop	r14
    372a:	08 95       	ret

0000372c <delayMicroseconds>:
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	39 f0       	breq	.+14     	; 0x373e <delayMicroseconds+0x12>
    3730:	88 0f       	add	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	02 97       	sbiw	r24, 0x02	; 2
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <delayMicroseconds+0xe>
    373e:	08 95       	ret

00003740 <init>:
    3740:	78 94       	sei
    3742:	84 b5       	in	r24, 0x24	; 36
    3744:	82 60       	ori	r24, 0x02	; 2
    3746:	84 bd       	out	0x24, r24	; 36
    3748:	84 b5       	in	r24, 0x24	; 36
    374a:	81 60       	ori	r24, 0x01	; 1
    374c:	84 bd       	out	0x24, r24	; 36
    374e:	85 b5       	in	r24, 0x25	; 37
    3750:	82 60       	ori	r24, 0x02	; 2
    3752:	85 bd       	out	0x25, r24	; 37
    3754:	85 b5       	in	r24, 0x25	; 37
    3756:	81 60       	ori	r24, 0x01	; 1
    3758:	85 bd       	out	0x25, r24	; 37
    375a:	ee e6       	ldi	r30, 0x6E	; 110
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 81       	ld	r24, Z
    3760:	81 60       	ori	r24, 0x01	; 1
    3762:	80 83       	st	Z, r24
    3764:	e1 eb       	ldi	r30, 0xB1	; 177
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	84 60       	ori	r24, 0x04	; 4
    376c:	80 83       	st	Z, r24
    376e:	e0 eb       	ldi	r30, 0xB0	; 176
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	81 60       	ori	r24, 0x01	; 1
    3776:	80 83       	st	Z, r24
    3778:	e1 e9       	ldi	r30, 0x91	; 145
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 81       	ld	r24, Z
    377e:	82 60       	ori	r24, 0x02	; 2
    3780:	80 83       	st	Z, r24
    3782:	80 81       	ld	r24, Z
    3784:	81 60       	ori	r24, 0x01	; 1
    3786:	80 83       	st	Z, r24
    3788:	e1 ea       	ldi	r30, 0xA1	; 161
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	82 60       	ori	r24, 0x02	; 2
    3790:	80 83       	st	Z, r24
    3792:	80 81       	ld	r24, Z
    3794:	81 60       	ori	r24, 0x01	; 1
    3796:	80 83       	st	Z, r24
    3798:	e1 e2       	ldi	r30, 0x21	; 33
    379a:	f1 e0       	ldi	r31, 0x01	; 1
    379c:	80 81       	ld	r24, Z
    379e:	82 60       	ori	r24, 0x02	; 2
    37a0:	80 83       	st	Z, r24
    37a2:	80 81       	ld	r24, Z
    37a4:	81 60       	ori	r24, 0x01	; 1
    37a6:	80 83       	st	Z, r24
    37a8:	e0 e9       	ldi	r30, 0x90	; 144
    37aa:	f0 e0       	ldi	r31, 0x00	; 0
    37ac:	80 81       	ld	r24, Z
    37ae:	81 60       	ori	r24, 0x01	; 1
    37b0:	80 83       	st	Z, r24
    37b2:	e0 ea       	ldi	r30, 0xA0	; 160
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	81 60       	ori	r24, 0x01	; 1
    37ba:	80 83       	st	Z, r24
    37bc:	e0 e2       	ldi	r30, 0x20	; 32
    37be:	f1 e0       	ldi	r31, 0x01	; 1
    37c0:	80 81       	ld	r24, Z
    37c2:	81 60       	ori	r24, 0x01	; 1
    37c4:	80 83       	st	Z, r24
    37c6:	ea e7       	ldi	r30, 0x7A	; 122
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	80 81       	ld	r24, Z
    37cc:	84 60       	ori	r24, 0x04	; 4
    37ce:	80 83       	st	Z, r24
    37d0:	80 81       	ld	r24, Z
    37d2:	82 60       	ori	r24, 0x02	; 2
    37d4:	80 83       	st	Z, r24
    37d6:	80 81       	ld	r24, Z
    37d8:	81 60       	ori	r24, 0x01	; 1
    37da:	80 83       	st	Z, r24
    37dc:	80 81       	ld	r24, Z
    37de:	80 68       	ori	r24, 0x80	; 128
    37e0:	80 83       	st	Z, r24
    37e2:	10 92 c1 00 	sts	0x00C1, r1
    37e6:	08 95       	ret

000037e8 <__cxa_pure_virtual>:
    37e8:	8d e0       	ldi	r24, 0x0D	; 13
    37ea:	61 e0       	ldi	r22, 0x01	; 1
    37ec:	0e 94 1a 1c 	call	0x3834	; 0x3834 <digitalWrite>
    37f0:	f8 94       	cli
    37f2:	ff cf       	rjmp	.-2      	; 0x37f2 <__cxa_pure_virtual+0xa>

000037f4 <pinMode>:
    37f4:	28 2f       	mov	r18, r24
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	c9 01       	movw	r24, r18
    37fa:	88 58       	subi	r24, 0x88	; 136
    37fc:	9e 4f       	sbci	r25, 0xFE	; 254
    37fe:	fc 01       	movw	r30, r24
    3800:	94 91       	lpm	r25, Z+
    3802:	2e 5c       	subi	r18, 0xCE	; 206
    3804:	3e 4f       	sbci	r19, 0xFE	; 254
    3806:	f9 01       	movw	r30, r18
    3808:	84 91       	lpm	r24, Z+
    380a:	88 23       	and	r24, r24
    380c:	91 f0       	breq	.+36     	; 0x3832 <pinMode+0x3e>
    380e:	e8 2f       	mov	r30, r24
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	ee 0f       	add	r30, r30
    3814:	ff 1f       	adc	r31, r31
    3816:	ec 51       	subi	r30, 0x1C	; 28
    3818:	ff 4f       	sbci	r31, 0xFF	; 255
    381a:	a5 91       	lpm	r26, Z+
    381c:	b4 91       	lpm	r27, Z+
    381e:	66 23       	and	r22, r22
    3820:	29 f4       	brne	.+10     	; 0x382c <pinMode+0x38>
    3822:	8c 91       	ld	r24, X
    3824:	90 95       	com	r25
    3826:	89 23       	and	r24, r25
    3828:	8c 93       	st	X, r24
    382a:	08 95       	ret
    382c:	8c 91       	ld	r24, X
    382e:	89 2b       	or	r24, r25
    3830:	8c 93       	st	X, r24
    3832:	08 95       	ret

00003834 <digitalWrite>:
    3834:	48 2f       	mov	r20, r24
    3836:	50 e0       	ldi	r21, 0x00	; 0
    3838:	ca 01       	movw	r24, r20
    383a:	82 54       	subi	r24, 0x42	; 66
    383c:	9e 4f       	sbci	r25, 0xFE	; 254
    383e:	fc 01       	movw	r30, r24
    3840:	24 91       	lpm	r18, Z+
    3842:	ca 01       	movw	r24, r20
    3844:	88 58       	subi	r24, 0x88	; 136
    3846:	9e 4f       	sbci	r25, 0xFE	; 254
    3848:	fc 01       	movw	r30, r24
    384a:	94 91       	lpm	r25, Z+
    384c:	4e 5c       	subi	r20, 0xCE	; 206
    384e:	5e 4f       	sbci	r21, 0xFE	; 254
    3850:	fa 01       	movw	r30, r20
    3852:	34 91       	lpm	r19, Z+
    3854:	33 23       	and	r19, r19
    3856:	09 f4       	brne	.+2      	; 0x385a <digitalWrite+0x26>
    3858:	55 c0       	rjmp	.+170    	; 0x3904 <digitalWrite+0xd0>
    385a:	22 23       	and	r18, r18
    385c:	09 f4       	brne	.+2      	; 0x3860 <digitalWrite+0x2c>
    385e:	40 c0       	rjmp	.+128    	; 0x38e0 <digitalWrite+0xac>
    3860:	21 30       	cpi	r18, 0x01	; 1
    3862:	19 f4       	brne	.+6      	; 0x386a <digitalWrite+0x36>
    3864:	84 b5       	in	r24, 0x24	; 36
    3866:	8f 77       	andi	r24, 0x7F	; 127
    3868:	04 c0       	rjmp	.+8      	; 0x3872 <digitalWrite+0x3e>
    386a:	22 30       	cpi	r18, 0x02	; 2
    386c:	21 f4       	brne	.+8      	; 0x3876 <digitalWrite+0x42>
    386e:	84 b5       	in	r24, 0x24	; 36
    3870:	8f 7d       	andi	r24, 0xDF	; 223
    3872:	84 bd       	out	0x24, r24	; 36
    3874:	35 c0       	rjmp	.+106    	; 0x38e0 <digitalWrite+0xac>
    3876:	26 30       	cpi	r18, 0x06	; 6
    3878:	21 f4       	brne	.+8      	; 0x3882 <digitalWrite+0x4e>
    387a:	80 91 b0 00 	lds	r24, 0x00B0
    387e:	8f 77       	andi	r24, 0x7F	; 127
    3880:	05 c0       	rjmp	.+10     	; 0x388c <digitalWrite+0x58>
    3882:	27 30       	cpi	r18, 0x07	; 7
    3884:	31 f4       	brne	.+12     	; 0x3892 <digitalWrite+0x5e>
    3886:	80 91 b0 00 	lds	r24, 0x00B0
    388a:	8f 7d       	andi	r24, 0xDF	; 223
    388c:	80 93 b0 00 	sts	0x00B0, r24
    3890:	27 c0       	rjmp	.+78     	; 0x38e0 <digitalWrite+0xac>
    3892:	28 30       	cpi	r18, 0x08	; 8
    3894:	21 f4       	brne	.+8      	; 0x389e <digitalWrite+0x6a>
    3896:	80 91 90 00 	lds	r24, 0x0090
    389a:	8f 77       	andi	r24, 0x7F	; 127
    389c:	0b c0       	rjmp	.+22     	; 0x38b4 <digitalWrite+0x80>
    389e:	29 30       	cpi	r18, 0x09	; 9
    38a0:	21 f4       	brne	.+8      	; 0x38aa <digitalWrite+0x76>
    38a2:	80 91 90 00 	lds	r24, 0x0090
    38a6:	8f 7d       	andi	r24, 0xDF	; 223
    38a8:	05 c0       	rjmp	.+10     	; 0x38b4 <digitalWrite+0x80>
    38aa:	2a 30       	cpi	r18, 0x0A	; 10
    38ac:	31 f4       	brne	.+12     	; 0x38ba <digitalWrite+0x86>
    38ae:	80 91 90 00 	lds	r24, 0x0090
    38b2:	87 7f       	andi	r24, 0xF7	; 247
    38b4:	80 93 90 00 	sts	0x0090, r24
    38b8:	13 c0       	rjmp	.+38     	; 0x38e0 <digitalWrite+0xac>
    38ba:	2b 30       	cpi	r18, 0x0B	; 11
    38bc:	21 f4       	brne	.+8      	; 0x38c6 <digitalWrite+0x92>
    38be:	80 91 a0 00 	lds	r24, 0x00A0
    38c2:	8f 77       	andi	r24, 0x7F	; 127
    38c4:	0b c0       	rjmp	.+22     	; 0x38dc <digitalWrite+0xa8>
    38c6:	2c 30       	cpi	r18, 0x0C	; 12
    38c8:	21 f4       	brne	.+8      	; 0x38d2 <digitalWrite+0x9e>
    38ca:	80 91 a0 00 	lds	r24, 0x00A0
    38ce:	8f 7d       	andi	r24, 0xDF	; 223
    38d0:	05 c0       	rjmp	.+10     	; 0x38dc <digitalWrite+0xa8>
    38d2:	2d 30       	cpi	r18, 0x0D	; 13
    38d4:	29 f4       	brne	.+10     	; 0x38e0 <digitalWrite+0xac>
    38d6:	80 91 a0 00 	lds	r24, 0x00A0
    38da:	87 7f       	andi	r24, 0xF7	; 247
    38dc:	80 93 a0 00 	sts	0x00A0, r24
    38e0:	e3 2f       	mov	r30, r19
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	ee 0f       	add	r30, r30
    38e6:	ff 1f       	adc	r31, r31
    38e8:	e2 50       	subi	r30, 0x02	; 2
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	a5 91       	lpm	r26, Z+
    38ee:	b4 91       	lpm	r27, Z+
    38f0:	66 23       	and	r22, r22
    38f2:	29 f4       	brne	.+10     	; 0x38fe <digitalWrite+0xca>
    38f4:	8c 91       	ld	r24, X
    38f6:	90 95       	com	r25
    38f8:	89 23       	and	r24, r25
    38fa:	8c 93       	st	X, r24
    38fc:	08 95       	ret
    38fe:	8c 91       	ld	r24, X
    3900:	89 2b       	or	r24, r25
    3902:	8c 93       	st	X, r24
    3904:	08 95       	ret

00003906 <digitalRead>:
    3906:	68 2f       	mov	r22, r24
    3908:	70 e0       	ldi	r23, 0x00	; 0
    390a:	cb 01       	movw	r24, r22
    390c:	82 54       	subi	r24, 0x42	; 66
    390e:	9e 4f       	sbci	r25, 0xFE	; 254
    3910:	fc 01       	movw	r30, r24
    3912:	24 91       	lpm	r18, Z+
    3914:	cb 01       	movw	r24, r22
    3916:	88 58       	subi	r24, 0x88	; 136
    3918:	9e 4f       	sbci	r25, 0xFE	; 254
    391a:	fc 01       	movw	r30, r24
    391c:	44 91       	lpm	r20, Z+
    391e:	6e 5c       	subi	r22, 0xCE	; 206
    3920:	7e 4f       	sbci	r23, 0xFE	; 254
    3922:	fb 01       	movw	r30, r22
    3924:	94 91       	lpm	r25, Z+
    3926:	99 23       	and	r25, r25
    3928:	19 f4       	brne	.+6      	; 0x3930 <digitalRead+0x2a>
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	53 c0       	rjmp	.+166    	; 0x39d6 <digitalRead+0xd0>
    3930:	22 23       	and	r18, r18
    3932:	09 f4       	brne	.+2      	; 0x3936 <digitalRead+0x30>
    3934:	40 c0       	rjmp	.+128    	; 0x39b6 <digitalRead+0xb0>
    3936:	21 30       	cpi	r18, 0x01	; 1
    3938:	19 f4       	brne	.+6      	; 0x3940 <digitalRead+0x3a>
    393a:	84 b5       	in	r24, 0x24	; 36
    393c:	8f 77       	andi	r24, 0x7F	; 127
    393e:	04 c0       	rjmp	.+8      	; 0x3948 <digitalRead+0x42>
    3940:	22 30       	cpi	r18, 0x02	; 2
    3942:	21 f4       	brne	.+8      	; 0x394c <digitalRead+0x46>
    3944:	84 b5       	in	r24, 0x24	; 36
    3946:	8f 7d       	andi	r24, 0xDF	; 223
    3948:	84 bd       	out	0x24, r24	; 36
    394a:	35 c0       	rjmp	.+106    	; 0x39b6 <digitalRead+0xb0>
    394c:	26 30       	cpi	r18, 0x06	; 6
    394e:	21 f4       	brne	.+8      	; 0x3958 <digitalRead+0x52>
    3950:	80 91 b0 00 	lds	r24, 0x00B0
    3954:	8f 77       	andi	r24, 0x7F	; 127
    3956:	05 c0       	rjmp	.+10     	; 0x3962 <digitalRead+0x5c>
    3958:	27 30       	cpi	r18, 0x07	; 7
    395a:	31 f4       	brne	.+12     	; 0x3968 <digitalRead+0x62>
    395c:	80 91 b0 00 	lds	r24, 0x00B0
    3960:	8f 7d       	andi	r24, 0xDF	; 223
    3962:	80 93 b0 00 	sts	0x00B0, r24
    3966:	27 c0       	rjmp	.+78     	; 0x39b6 <digitalRead+0xb0>
    3968:	28 30       	cpi	r18, 0x08	; 8
    396a:	21 f4       	brne	.+8      	; 0x3974 <digitalRead+0x6e>
    396c:	80 91 90 00 	lds	r24, 0x0090
    3970:	8f 77       	andi	r24, 0x7F	; 127
    3972:	0b c0       	rjmp	.+22     	; 0x398a <digitalRead+0x84>
    3974:	29 30       	cpi	r18, 0x09	; 9
    3976:	21 f4       	brne	.+8      	; 0x3980 <digitalRead+0x7a>
    3978:	80 91 90 00 	lds	r24, 0x0090
    397c:	8f 7d       	andi	r24, 0xDF	; 223
    397e:	05 c0       	rjmp	.+10     	; 0x398a <digitalRead+0x84>
    3980:	2a 30       	cpi	r18, 0x0A	; 10
    3982:	31 f4       	brne	.+12     	; 0x3990 <digitalRead+0x8a>
    3984:	80 91 90 00 	lds	r24, 0x0090
    3988:	87 7f       	andi	r24, 0xF7	; 247
    398a:	80 93 90 00 	sts	0x0090, r24
    398e:	13 c0       	rjmp	.+38     	; 0x39b6 <digitalRead+0xb0>
    3990:	2b 30       	cpi	r18, 0x0B	; 11
    3992:	21 f4       	brne	.+8      	; 0x399c <digitalRead+0x96>
    3994:	80 91 a0 00 	lds	r24, 0x00A0
    3998:	8f 77       	andi	r24, 0x7F	; 127
    399a:	0b c0       	rjmp	.+22     	; 0x39b2 <digitalRead+0xac>
    399c:	2c 30       	cpi	r18, 0x0C	; 12
    399e:	21 f4       	brne	.+8      	; 0x39a8 <digitalRead+0xa2>
    39a0:	80 91 a0 00 	lds	r24, 0x00A0
    39a4:	8f 7d       	andi	r24, 0xDF	; 223
    39a6:	05 c0       	rjmp	.+10     	; 0x39b2 <digitalRead+0xac>
    39a8:	2d 30       	cpi	r18, 0x0D	; 13
    39aa:	29 f4       	brne	.+10     	; 0x39b6 <digitalRead+0xb0>
    39ac:	80 91 a0 00 	lds	r24, 0x00A0
    39b0:	87 7f       	andi	r24, 0xF7	; 247
    39b2:	80 93 a0 00 	sts	0x00A0, r24
    39b6:	89 2f       	mov	r24, r25
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	88 0f       	add	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	88 5e       	subi	r24, 0xE8	; 232
    39c0:	9e 4f       	sbci	r25, 0xFE	; 254
    39c2:	fc 01       	movw	r30, r24
    39c4:	a5 91       	lpm	r26, Z+
    39c6:	b4 91       	lpm	r27, Z+
    39c8:	8c 91       	ld	r24, X
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	84 23       	and	r24, r20
    39d0:	11 f0       	breq	.+4      	; 0x39d6 <digitalRead+0xd0>
    39d2:	21 e0       	ldi	r18, 0x01	; 1
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	c9 01       	movw	r24, r18
    39d8:	08 95       	ret

000039da <__fixunssfsi>:
    39da:	ef 92       	push	r14
    39dc:	ff 92       	push	r15
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	7b 01       	movw	r14, r22
    39e4:	8c 01       	movw	r16, r24
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e0       	ldi	r20, 0x00	; 0
    39ec:	5f e4       	ldi	r21, 0x4F	; 79
    39ee:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__gesf2>
    39f2:	88 23       	and	r24, r24
    39f4:	8c f0       	brlt	.+34     	; 0x3a18 <__fixunssfsi+0x3e>
    39f6:	c8 01       	movw	r24, r16
    39f8:	b7 01       	movw	r22, r14
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e0       	ldi	r20, 0x00	; 0
    3a00:	5f e4       	ldi	r21, 0x4F	; 79
    3a02:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__subsf3>
    3a06:	0e 94 27 21 	call	0x424e	; 0x424e <__fixsfsi>
    3a0a:	9b 01       	movw	r18, r22
    3a0c:	ac 01       	movw	r20, r24
    3a0e:	20 50       	subi	r18, 0x00	; 0
    3a10:	30 40       	sbci	r19, 0x00	; 0
    3a12:	40 40       	sbci	r20, 0x00	; 0
    3a14:	50 48       	sbci	r21, 0x80	; 128
    3a16:	06 c0       	rjmp	.+12     	; 0x3a24 <__fixunssfsi+0x4a>
    3a18:	c8 01       	movw	r24, r16
    3a1a:	b7 01       	movw	r22, r14
    3a1c:	0e 94 27 21 	call	0x424e	; 0x424e <__fixsfsi>
    3a20:	9b 01       	movw	r18, r22
    3a22:	ac 01       	movw	r20, r24
    3a24:	b9 01       	movw	r22, r18
    3a26:	ca 01       	movw	r24, r20
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	ff 90       	pop	r15
    3a2e:	ef 90       	pop	r14
    3a30:	08 95       	ret

00003a32 <_fpadd_parts>:
    3a32:	a0 e0       	ldi	r26, 0x00	; 0
    3a34:	b0 e0       	ldi	r27, 0x00	; 0
    3a36:	ef e1       	ldi	r30, 0x1F	; 31
    3a38:	fd e1       	ldi	r31, 0x1D	; 29
    3a3a:	0c 94 6c 24 	jmp	0x48d8	; 0x48d8 <__prologue_saves__>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	2b 01       	movw	r4, r22
    3a42:	fa 01       	movw	r30, r20
    3a44:	9c 91       	ld	r25, X
    3a46:	92 30       	cpi	r25, 0x02	; 2
    3a48:	08 f4       	brcc	.+2      	; 0x3a4c <_fpadd_parts+0x1a>
    3a4a:	39 c1       	rjmp	.+626    	; 0x3cbe <_fpadd_parts+0x28c>
    3a4c:	eb 01       	movw	r28, r22
    3a4e:	88 81       	ld	r24, Y
    3a50:	82 30       	cpi	r24, 0x02	; 2
    3a52:	08 f4       	brcc	.+2      	; 0x3a56 <_fpadd_parts+0x24>
    3a54:	33 c1       	rjmp	.+614    	; 0x3cbc <_fpadd_parts+0x28a>
    3a56:	94 30       	cpi	r25, 0x04	; 4
    3a58:	69 f4       	brne	.+26     	; 0x3a74 <_fpadd_parts+0x42>
    3a5a:	84 30       	cpi	r24, 0x04	; 4
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <_fpadd_parts+0x2e>
    3a5e:	2f c1       	rjmp	.+606    	; 0x3cbe <_fpadd_parts+0x28c>
    3a60:	11 96       	adiw	r26, 0x01	; 1
    3a62:	9c 91       	ld	r25, X
    3a64:	11 97       	sbiw	r26, 0x01	; 1
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	98 17       	cp	r25, r24
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <_fpadd_parts+0x3c>
    3a6c:	28 c1       	rjmp	.+592    	; 0x3cbe <_fpadd_parts+0x28c>
    3a6e:	af e8       	ldi	r26, 0x8F	; 143
    3a70:	b4 e0       	ldi	r27, 0x04	; 4
    3a72:	25 c1       	rjmp	.+586    	; 0x3cbe <_fpadd_parts+0x28c>
    3a74:	84 30       	cpi	r24, 0x04	; 4
    3a76:	09 f4       	brne	.+2      	; 0x3a7a <_fpadd_parts+0x48>
    3a78:	21 c1       	rjmp	.+578    	; 0x3cbc <_fpadd_parts+0x28a>
    3a7a:	82 30       	cpi	r24, 0x02	; 2
    3a7c:	a9 f4       	brne	.+42     	; 0x3aa8 <_fpadd_parts+0x76>
    3a7e:	92 30       	cpi	r25, 0x02	; 2
    3a80:	09 f0       	breq	.+2      	; 0x3a84 <_fpadd_parts+0x52>
    3a82:	1d c1       	rjmp	.+570    	; 0x3cbe <_fpadd_parts+0x28c>
    3a84:	9a 01       	movw	r18, r20
    3a86:	ad 01       	movw	r20, r26
    3a88:	88 e0       	ldi	r24, 0x08	; 8
    3a8a:	ea 01       	movw	r28, r20
    3a8c:	09 90       	ld	r0, Y+
    3a8e:	ae 01       	movw	r20, r28
    3a90:	e9 01       	movw	r28, r18
    3a92:	09 92       	st	Y+, r0
    3a94:	9e 01       	movw	r18, r28
    3a96:	81 50       	subi	r24, 0x01	; 1
    3a98:	c1 f7       	brne	.-16     	; 0x3a8a <_fpadd_parts+0x58>
    3a9a:	e2 01       	movw	r28, r4
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	11 96       	adiw	r26, 0x01	; 1
    3aa0:	9c 91       	ld	r25, X
    3aa2:	89 23       	and	r24, r25
    3aa4:	81 83       	std	Z+1, r24	; 0x01
    3aa6:	08 c1       	rjmp	.+528    	; 0x3cb8 <_fpadd_parts+0x286>
    3aa8:	92 30       	cpi	r25, 0x02	; 2
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <_fpadd_parts+0x7c>
    3aac:	07 c1       	rjmp	.+526    	; 0x3cbc <_fpadd_parts+0x28a>
    3aae:	12 96       	adiw	r26, 0x02	; 2
    3ab0:	2d 90       	ld	r2, X+
    3ab2:	3c 90       	ld	r3, X
    3ab4:	13 97       	sbiw	r26, 0x03	; 3
    3ab6:	eb 01       	movw	r28, r22
    3ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aba:	9b 81       	ldd	r25, Y+3	; 0x03
    3abc:	14 96       	adiw	r26, 0x04	; 4
    3abe:	ad 90       	ld	r10, X+
    3ac0:	bd 90       	ld	r11, X+
    3ac2:	cd 90       	ld	r12, X+
    3ac4:	dc 90       	ld	r13, X
    3ac6:	17 97       	sbiw	r26, 0x07	; 7
    3ac8:	ec 80       	ldd	r14, Y+4	; 0x04
    3aca:	fd 80       	ldd	r15, Y+5	; 0x05
    3acc:	0e 81       	ldd	r16, Y+6	; 0x06
    3ace:	1f 81       	ldd	r17, Y+7	; 0x07
    3ad0:	91 01       	movw	r18, r2
    3ad2:	28 1b       	sub	r18, r24
    3ad4:	39 0b       	sbc	r19, r25
    3ad6:	b9 01       	movw	r22, r18
    3ad8:	37 ff       	sbrs	r19, 7
    3ada:	04 c0       	rjmp	.+8      	; 0x3ae4 <_fpadd_parts+0xb2>
    3adc:	66 27       	eor	r22, r22
    3ade:	77 27       	eor	r23, r23
    3ae0:	62 1b       	sub	r22, r18
    3ae2:	73 0b       	sbc	r23, r19
    3ae4:	60 32       	cpi	r22, 0x20	; 32
    3ae6:	71 05       	cpc	r23, r1
    3ae8:	0c f0       	brlt	.+2      	; 0x3aec <_fpadd_parts+0xba>
    3aea:	61 c0       	rjmp	.+194    	; 0x3bae <_fpadd_parts+0x17c>
    3aec:	12 16       	cp	r1, r18
    3aee:	13 06       	cpc	r1, r19
    3af0:	6c f5       	brge	.+90     	; 0x3b4c <_fpadd_parts+0x11a>
    3af2:	37 01       	movw	r6, r14
    3af4:	48 01       	movw	r8, r16
    3af6:	06 2e       	mov	r0, r22
    3af8:	04 c0       	rjmp	.+8      	; 0x3b02 <_fpadd_parts+0xd0>
    3afa:	96 94       	lsr	r9
    3afc:	87 94       	ror	r8
    3afe:	77 94       	ror	r7
    3b00:	67 94       	ror	r6
    3b02:	0a 94       	dec	r0
    3b04:	d2 f7       	brpl	.-12     	; 0x3afa <_fpadd_parts+0xc8>
    3b06:	21 e0       	ldi	r18, 0x01	; 1
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e0       	ldi	r20, 0x00	; 0
    3b0c:	50 e0       	ldi	r21, 0x00	; 0
    3b0e:	04 c0       	rjmp	.+8      	; 0x3b18 <_fpadd_parts+0xe6>
    3b10:	22 0f       	add	r18, r18
    3b12:	33 1f       	adc	r19, r19
    3b14:	44 1f       	adc	r20, r20
    3b16:	55 1f       	adc	r21, r21
    3b18:	6a 95       	dec	r22
    3b1a:	d2 f7       	brpl	.-12     	; 0x3b10 <_fpadd_parts+0xde>
    3b1c:	21 50       	subi	r18, 0x01	; 1
    3b1e:	30 40       	sbci	r19, 0x00	; 0
    3b20:	40 40       	sbci	r20, 0x00	; 0
    3b22:	50 40       	sbci	r21, 0x00	; 0
    3b24:	2e 21       	and	r18, r14
    3b26:	3f 21       	and	r19, r15
    3b28:	40 23       	and	r20, r16
    3b2a:	51 23       	and	r21, r17
    3b2c:	21 15       	cp	r18, r1
    3b2e:	31 05       	cpc	r19, r1
    3b30:	41 05       	cpc	r20, r1
    3b32:	51 05       	cpc	r21, r1
    3b34:	21 f0       	breq	.+8      	; 0x3b3e <_fpadd_parts+0x10c>
    3b36:	21 e0       	ldi	r18, 0x01	; 1
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	40 e0       	ldi	r20, 0x00	; 0
    3b3c:	50 e0       	ldi	r21, 0x00	; 0
    3b3e:	79 01       	movw	r14, r18
    3b40:	8a 01       	movw	r16, r20
    3b42:	e6 28       	or	r14, r6
    3b44:	f7 28       	or	r15, r7
    3b46:	08 29       	or	r16, r8
    3b48:	19 29       	or	r17, r9
    3b4a:	3c c0       	rjmp	.+120    	; 0x3bc4 <_fpadd_parts+0x192>
    3b4c:	23 2b       	or	r18, r19
    3b4e:	d1 f1       	breq	.+116    	; 0x3bc4 <_fpadd_parts+0x192>
    3b50:	26 0e       	add	r2, r22
    3b52:	37 1e       	adc	r3, r23
    3b54:	35 01       	movw	r6, r10
    3b56:	46 01       	movw	r8, r12
    3b58:	06 2e       	mov	r0, r22
    3b5a:	04 c0       	rjmp	.+8      	; 0x3b64 <_fpadd_parts+0x132>
    3b5c:	96 94       	lsr	r9
    3b5e:	87 94       	ror	r8
    3b60:	77 94       	ror	r7
    3b62:	67 94       	ror	r6
    3b64:	0a 94       	dec	r0
    3b66:	d2 f7       	brpl	.-12     	; 0x3b5c <_fpadd_parts+0x12a>
    3b68:	21 e0       	ldi	r18, 0x01	; 1
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	40 e0       	ldi	r20, 0x00	; 0
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	04 c0       	rjmp	.+8      	; 0x3b7a <_fpadd_parts+0x148>
    3b72:	22 0f       	add	r18, r18
    3b74:	33 1f       	adc	r19, r19
    3b76:	44 1f       	adc	r20, r20
    3b78:	55 1f       	adc	r21, r21
    3b7a:	6a 95       	dec	r22
    3b7c:	d2 f7       	brpl	.-12     	; 0x3b72 <_fpadd_parts+0x140>
    3b7e:	21 50       	subi	r18, 0x01	; 1
    3b80:	30 40       	sbci	r19, 0x00	; 0
    3b82:	40 40       	sbci	r20, 0x00	; 0
    3b84:	50 40       	sbci	r21, 0x00	; 0
    3b86:	2a 21       	and	r18, r10
    3b88:	3b 21       	and	r19, r11
    3b8a:	4c 21       	and	r20, r12
    3b8c:	5d 21       	and	r21, r13
    3b8e:	21 15       	cp	r18, r1
    3b90:	31 05       	cpc	r19, r1
    3b92:	41 05       	cpc	r20, r1
    3b94:	51 05       	cpc	r21, r1
    3b96:	21 f0       	breq	.+8      	; 0x3ba0 <_fpadd_parts+0x16e>
    3b98:	21 e0       	ldi	r18, 0x01	; 1
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	40 e0       	ldi	r20, 0x00	; 0
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	59 01       	movw	r10, r18
    3ba2:	6a 01       	movw	r12, r20
    3ba4:	a6 28       	or	r10, r6
    3ba6:	b7 28       	or	r11, r7
    3ba8:	c8 28       	or	r12, r8
    3baa:	d9 28       	or	r13, r9
    3bac:	0b c0       	rjmp	.+22     	; 0x3bc4 <_fpadd_parts+0x192>
    3bae:	82 15       	cp	r24, r2
    3bb0:	93 05       	cpc	r25, r3
    3bb2:	2c f0       	brlt	.+10     	; 0x3bbe <_fpadd_parts+0x18c>
    3bb4:	1c 01       	movw	r2, r24
    3bb6:	aa 24       	eor	r10, r10
    3bb8:	bb 24       	eor	r11, r11
    3bba:	65 01       	movw	r12, r10
    3bbc:	03 c0       	rjmp	.+6      	; 0x3bc4 <_fpadd_parts+0x192>
    3bbe:	ee 24       	eor	r14, r14
    3bc0:	ff 24       	eor	r15, r15
    3bc2:	87 01       	movw	r16, r14
    3bc4:	11 96       	adiw	r26, 0x01	; 1
    3bc6:	9c 91       	ld	r25, X
    3bc8:	d2 01       	movw	r26, r4
    3bca:	11 96       	adiw	r26, 0x01	; 1
    3bcc:	8c 91       	ld	r24, X
    3bce:	98 17       	cp	r25, r24
    3bd0:	09 f4       	brne	.+2      	; 0x3bd4 <_fpadd_parts+0x1a2>
    3bd2:	45 c0       	rjmp	.+138    	; 0x3c5e <_fpadd_parts+0x22c>
    3bd4:	99 23       	and	r25, r25
    3bd6:	39 f0       	breq	.+14     	; 0x3be6 <_fpadd_parts+0x1b4>
    3bd8:	a8 01       	movw	r20, r16
    3bda:	97 01       	movw	r18, r14
    3bdc:	2a 19       	sub	r18, r10
    3bde:	3b 09       	sbc	r19, r11
    3be0:	4c 09       	sbc	r20, r12
    3be2:	5d 09       	sbc	r21, r13
    3be4:	06 c0       	rjmp	.+12     	; 0x3bf2 <_fpadd_parts+0x1c0>
    3be6:	a6 01       	movw	r20, r12
    3be8:	95 01       	movw	r18, r10
    3bea:	2e 19       	sub	r18, r14
    3bec:	3f 09       	sbc	r19, r15
    3bee:	40 0b       	sbc	r20, r16
    3bf0:	51 0b       	sbc	r21, r17
    3bf2:	57 fd       	sbrc	r21, 7
    3bf4:	08 c0       	rjmp	.+16     	; 0x3c06 <_fpadd_parts+0x1d4>
    3bf6:	11 82       	std	Z+1, r1	; 0x01
    3bf8:	33 82       	std	Z+3, r3	; 0x03
    3bfa:	22 82       	std	Z+2, r2	; 0x02
    3bfc:	24 83       	std	Z+4, r18	; 0x04
    3bfe:	35 83       	std	Z+5, r19	; 0x05
    3c00:	46 83       	std	Z+6, r20	; 0x06
    3c02:	57 83       	std	Z+7, r21	; 0x07
    3c04:	1d c0       	rjmp	.+58     	; 0x3c40 <_fpadd_parts+0x20e>
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	81 83       	std	Z+1, r24	; 0x01
    3c0a:	33 82       	std	Z+3, r3	; 0x03
    3c0c:	22 82       	std	Z+2, r2	; 0x02
    3c0e:	88 27       	eor	r24, r24
    3c10:	99 27       	eor	r25, r25
    3c12:	dc 01       	movw	r26, r24
    3c14:	82 1b       	sub	r24, r18
    3c16:	93 0b       	sbc	r25, r19
    3c18:	a4 0b       	sbc	r26, r20
    3c1a:	b5 0b       	sbc	r27, r21
    3c1c:	84 83       	std	Z+4, r24	; 0x04
    3c1e:	95 83       	std	Z+5, r25	; 0x05
    3c20:	a6 83       	std	Z+6, r26	; 0x06
    3c22:	b7 83       	std	Z+7, r27	; 0x07
    3c24:	0d c0       	rjmp	.+26     	; 0x3c40 <_fpadd_parts+0x20e>
    3c26:	22 0f       	add	r18, r18
    3c28:	33 1f       	adc	r19, r19
    3c2a:	44 1f       	adc	r20, r20
    3c2c:	55 1f       	adc	r21, r21
    3c2e:	24 83       	std	Z+4, r18	; 0x04
    3c30:	35 83       	std	Z+5, r19	; 0x05
    3c32:	46 83       	std	Z+6, r20	; 0x06
    3c34:	57 83       	std	Z+7, r21	; 0x07
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	93 83       	std	Z+3, r25	; 0x03
    3c3e:	82 83       	std	Z+2, r24	; 0x02
    3c40:	24 81       	ldd	r18, Z+4	; 0x04
    3c42:	35 81       	ldd	r19, Z+5	; 0x05
    3c44:	46 81       	ldd	r20, Z+6	; 0x06
    3c46:	57 81       	ldd	r21, Z+7	; 0x07
    3c48:	da 01       	movw	r26, r20
    3c4a:	c9 01       	movw	r24, r18
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	a1 09       	sbc	r26, r1
    3c50:	b1 09       	sbc	r27, r1
    3c52:	8f 5f       	subi	r24, 0xFF	; 255
    3c54:	9f 4f       	sbci	r25, 0xFF	; 255
    3c56:	af 4f       	sbci	r26, 0xFF	; 255
    3c58:	bf 43       	sbci	r27, 0x3F	; 63
    3c5a:	28 f3       	brcs	.-54     	; 0x3c26 <_fpadd_parts+0x1f4>
    3c5c:	0b c0       	rjmp	.+22     	; 0x3c74 <_fpadd_parts+0x242>
    3c5e:	91 83       	std	Z+1, r25	; 0x01
    3c60:	33 82       	std	Z+3, r3	; 0x03
    3c62:	22 82       	std	Z+2, r2	; 0x02
    3c64:	ea 0c       	add	r14, r10
    3c66:	fb 1c       	adc	r15, r11
    3c68:	0c 1d       	adc	r16, r12
    3c6a:	1d 1d       	adc	r17, r13
    3c6c:	e4 82       	std	Z+4, r14	; 0x04
    3c6e:	f5 82       	std	Z+5, r15	; 0x05
    3c70:	06 83       	std	Z+6, r16	; 0x06
    3c72:	17 83       	std	Z+7, r17	; 0x07
    3c74:	83 e0       	ldi	r24, 0x03	; 3
    3c76:	80 83       	st	Z, r24
    3c78:	24 81       	ldd	r18, Z+4	; 0x04
    3c7a:	35 81       	ldd	r19, Z+5	; 0x05
    3c7c:	46 81       	ldd	r20, Z+6	; 0x06
    3c7e:	57 81       	ldd	r21, Z+7	; 0x07
    3c80:	57 ff       	sbrs	r21, 7
    3c82:	1a c0       	rjmp	.+52     	; 0x3cb8 <_fpadd_parts+0x286>
    3c84:	c9 01       	movw	r24, r18
    3c86:	aa 27       	eor	r26, r26
    3c88:	97 fd       	sbrc	r25, 7
    3c8a:	a0 95       	com	r26
    3c8c:	ba 2f       	mov	r27, r26
    3c8e:	81 70       	andi	r24, 0x01	; 1
    3c90:	90 70       	andi	r25, 0x00	; 0
    3c92:	a0 70       	andi	r26, 0x00	; 0
    3c94:	b0 70       	andi	r27, 0x00	; 0
    3c96:	56 95       	lsr	r21
    3c98:	47 95       	ror	r20
    3c9a:	37 95       	ror	r19
    3c9c:	27 95       	ror	r18
    3c9e:	82 2b       	or	r24, r18
    3ca0:	93 2b       	or	r25, r19
    3ca2:	a4 2b       	or	r26, r20
    3ca4:	b5 2b       	or	r27, r21
    3ca6:	84 83       	std	Z+4, r24	; 0x04
    3ca8:	95 83       	std	Z+5, r25	; 0x05
    3caa:	a6 83       	std	Z+6, r26	; 0x06
    3cac:	b7 83       	std	Z+7, r27	; 0x07
    3cae:	82 81       	ldd	r24, Z+2	; 0x02
    3cb0:	93 81       	ldd	r25, Z+3	; 0x03
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	93 83       	std	Z+3, r25	; 0x03
    3cb6:	82 83       	std	Z+2, r24	; 0x02
    3cb8:	df 01       	movw	r26, r30
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <_fpadd_parts+0x28c>
    3cbc:	d2 01       	movw	r26, r4
    3cbe:	cd 01       	movw	r24, r26
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
    3cc4:	e2 e1       	ldi	r30, 0x12	; 18
    3cc6:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__epilogue_restores__>

00003cca <__subsf3>:
    3cca:	a0 e2       	ldi	r26, 0x20	; 32
    3ccc:	b0 e0       	ldi	r27, 0x00	; 0
    3cce:	eb e6       	ldi	r30, 0x6B	; 107
    3cd0:	fe e1       	ldi	r31, 0x1E	; 30
    3cd2:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__prologue_saves__+0x18>
    3cd6:	69 83       	std	Y+1, r22	; 0x01
    3cd8:	7a 83       	std	Y+2, r23	; 0x02
    3cda:	8b 83       	std	Y+3, r24	; 0x03
    3cdc:	9c 83       	std	Y+4, r25	; 0x04
    3cde:	2d 83       	std	Y+5, r18	; 0x05
    3ce0:	3e 83       	std	Y+6, r19	; 0x06
    3ce2:	4f 83       	std	Y+7, r20	; 0x07
    3ce4:	58 87       	std	Y+8, r21	; 0x08
    3ce6:	e9 e0       	ldi	r30, 0x09	; 9
    3ce8:	ee 2e       	mov	r14, r30
    3cea:	f1 2c       	mov	r15, r1
    3cec:	ec 0e       	add	r14, r28
    3cee:	fd 1e       	adc	r15, r29
    3cf0:	ce 01       	movw	r24, r28
    3cf2:	01 96       	adiw	r24, 0x01	; 1
    3cf4:	b7 01       	movw	r22, r14
    3cf6:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    3cfa:	8e 01       	movw	r16, r28
    3cfc:	0f 5e       	subi	r16, 0xEF	; 239
    3cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    3d00:	ce 01       	movw	r24, r28
    3d02:	05 96       	adiw	r24, 0x05	; 5
    3d04:	b8 01       	movw	r22, r16
    3d06:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    3d0a:	8a 89       	ldd	r24, Y+18	; 0x12
    3d0c:	91 e0       	ldi	r25, 0x01	; 1
    3d0e:	89 27       	eor	r24, r25
    3d10:	8a 8b       	std	Y+18, r24	; 0x12
    3d12:	c7 01       	movw	r24, r14
    3d14:	b8 01       	movw	r22, r16
    3d16:	ae 01       	movw	r20, r28
    3d18:	47 5e       	subi	r20, 0xE7	; 231
    3d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d1c:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_fpadd_parts>
    3d20:	0e 94 43 22 	call	0x4486	; 0x4486 <__pack_f>
    3d24:	a0 96       	adiw	r28, 0x20	; 32
    3d26:	e6 e0       	ldi	r30, 0x06	; 6
    3d28:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__epilogue_restores__+0x18>

00003d2c <__addsf3>:
    3d2c:	a0 e2       	ldi	r26, 0x20	; 32
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	ec e9       	ldi	r30, 0x9C	; 156
    3d32:	fe e1       	ldi	r31, 0x1E	; 30
    3d34:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__prologue_saves__+0x18>
    3d38:	69 83       	std	Y+1, r22	; 0x01
    3d3a:	7a 83       	std	Y+2, r23	; 0x02
    3d3c:	8b 83       	std	Y+3, r24	; 0x03
    3d3e:	9c 83       	std	Y+4, r25	; 0x04
    3d40:	2d 83       	std	Y+5, r18	; 0x05
    3d42:	3e 83       	std	Y+6, r19	; 0x06
    3d44:	4f 83       	std	Y+7, r20	; 0x07
    3d46:	58 87       	std	Y+8, r21	; 0x08
    3d48:	f9 e0       	ldi	r31, 0x09	; 9
    3d4a:	ef 2e       	mov	r14, r31
    3d4c:	f1 2c       	mov	r15, r1
    3d4e:	ec 0e       	add	r14, r28
    3d50:	fd 1e       	adc	r15, r29
    3d52:	ce 01       	movw	r24, r28
    3d54:	01 96       	adiw	r24, 0x01	; 1
    3d56:	b7 01       	movw	r22, r14
    3d58:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    3d5c:	8e 01       	movw	r16, r28
    3d5e:	0f 5e       	subi	r16, 0xEF	; 239
    3d60:	1f 4f       	sbci	r17, 0xFF	; 255
    3d62:	ce 01       	movw	r24, r28
    3d64:	05 96       	adiw	r24, 0x05	; 5
    3d66:	b8 01       	movw	r22, r16
    3d68:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    3d6c:	c7 01       	movw	r24, r14
    3d6e:	b8 01       	movw	r22, r16
    3d70:	ae 01       	movw	r20, r28
    3d72:	47 5e       	subi	r20, 0xE7	; 231
    3d74:	5f 4f       	sbci	r21, 0xFF	; 255
    3d76:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_fpadd_parts>
    3d7a:	0e 94 43 22 	call	0x4486	; 0x4486 <__pack_f>
    3d7e:	a0 96       	adiw	r28, 0x20	; 32
    3d80:	e6 e0       	ldi	r30, 0x06	; 6
    3d82:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__epilogue_restores__+0x18>

00003d86 <__mulsf3>:
    3d86:	a0 e2       	ldi	r26, 0x20	; 32
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	e9 ec       	ldi	r30, 0xC9	; 201
    3d8c:	fe e1       	ldi	r31, 0x1E	; 30
    3d8e:	0c 94 6c 24 	jmp	0x48d8	; 0x48d8 <__prologue_saves__>
    3d92:	69 83       	std	Y+1, r22	; 0x01
    3d94:	7a 83       	std	Y+2, r23	; 0x02
    3d96:	8b 83       	std	Y+3, r24	; 0x03
    3d98:	9c 83       	std	Y+4, r25	; 0x04
    3d9a:	2d 83       	std	Y+5, r18	; 0x05
    3d9c:	3e 83       	std	Y+6, r19	; 0x06
    3d9e:	4f 83       	std	Y+7, r20	; 0x07
    3da0:	58 87       	std	Y+8, r21	; 0x08
    3da2:	ce 01       	movw	r24, r28
    3da4:	01 96       	adiw	r24, 0x01	; 1
    3da6:	be 01       	movw	r22, r28
    3da8:	67 5f       	subi	r22, 0xF7	; 247
    3daa:	7f 4f       	sbci	r23, 0xFF	; 255
    3dac:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    3db0:	ce 01       	movw	r24, r28
    3db2:	05 96       	adiw	r24, 0x05	; 5
    3db4:	be 01       	movw	r22, r28
    3db6:	6f 5e       	subi	r22, 0xEF	; 239
    3db8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dba:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    3dbe:	99 85       	ldd	r25, Y+9	; 0x09
    3dc0:	92 30       	cpi	r25, 0x02	; 2
    3dc2:	88 f0       	brcs	.+34     	; 0x3de6 <__mulsf3+0x60>
    3dc4:	89 89       	ldd	r24, Y+17	; 0x11
    3dc6:	82 30       	cpi	r24, 0x02	; 2
    3dc8:	c8 f0       	brcs	.+50     	; 0x3dfc <__mulsf3+0x76>
    3dca:	94 30       	cpi	r25, 0x04	; 4
    3dcc:	19 f4       	brne	.+6      	; 0x3dd4 <__mulsf3+0x4e>
    3dce:	82 30       	cpi	r24, 0x02	; 2
    3dd0:	51 f4       	brne	.+20     	; 0x3de6 <__mulsf3+0x60>
    3dd2:	04 c0       	rjmp	.+8      	; 0x3ddc <__mulsf3+0x56>
    3dd4:	84 30       	cpi	r24, 0x04	; 4
    3dd6:	29 f4       	brne	.+10     	; 0x3de2 <__mulsf3+0x5c>
    3dd8:	92 30       	cpi	r25, 0x02	; 2
    3dda:	81 f4       	brne	.+32     	; 0x3dfc <__mulsf3+0x76>
    3ddc:	8f e8       	ldi	r24, 0x8F	; 143
    3dde:	94 e0       	ldi	r25, 0x04	; 4
    3de0:	c6 c0       	rjmp	.+396    	; 0x3f6e <__mulsf3+0x1e8>
    3de2:	92 30       	cpi	r25, 0x02	; 2
    3de4:	49 f4       	brne	.+18     	; 0x3df8 <__mulsf3+0x72>
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dea:	8a 89       	ldd	r24, Y+18	; 0x12
    3dec:	98 13       	cpse	r25, r24
    3dee:	21 e0       	ldi	r18, 0x01	; 1
    3df0:	2a 87       	std	Y+10, r18	; 0x0a
    3df2:	ce 01       	movw	r24, r28
    3df4:	09 96       	adiw	r24, 0x09	; 9
    3df6:	bb c0       	rjmp	.+374    	; 0x3f6e <__mulsf3+0x1e8>
    3df8:	82 30       	cpi	r24, 0x02	; 2
    3dfa:	49 f4       	brne	.+18     	; 0x3e0e <__mulsf3+0x88>
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e00:	8a 89       	ldd	r24, Y+18	; 0x12
    3e02:	98 13       	cpse	r25, r24
    3e04:	21 e0       	ldi	r18, 0x01	; 1
    3e06:	2a 8b       	std	Y+18, r18	; 0x12
    3e08:	ce 01       	movw	r24, r28
    3e0a:	41 96       	adiw	r24, 0x11	; 17
    3e0c:	b0 c0       	rjmp	.+352    	; 0x3f6e <__mulsf3+0x1e8>
    3e0e:	2d 84       	ldd	r2, Y+13	; 0x0d
    3e10:	3e 84       	ldd	r3, Y+14	; 0x0e
    3e12:	4f 84       	ldd	r4, Y+15	; 0x0f
    3e14:	58 88       	ldd	r5, Y+16	; 0x10
    3e16:	6d 88       	ldd	r6, Y+21	; 0x15
    3e18:	7e 88       	ldd	r7, Y+22	; 0x16
    3e1a:	8f 88       	ldd	r8, Y+23	; 0x17
    3e1c:	98 8c       	ldd	r9, Y+24	; 0x18
    3e1e:	ee 24       	eor	r14, r14
    3e20:	ff 24       	eor	r15, r15
    3e22:	87 01       	movw	r16, r14
    3e24:	aa 24       	eor	r10, r10
    3e26:	bb 24       	eor	r11, r11
    3e28:	65 01       	movw	r12, r10
    3e2a:	40 e0       	ldi	r20, 0x00	; 0
    3e2c:	50 e0       	ldi	r21, 0x00	; 0
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	70 e0       	ldi	r23, 0x00	; 0
    3e32:	e0 e0       	ldi	r30, 0x00	; 0
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	c1 01       	movw	r24, r2
    3e38:	81 70       	andi	r24, 0x01	; 1
    3e3a:	90 70       	andi	r25, 0x00	; 0
    3e3c:	89 2b       	or	r24, r25
    3e3e:	e9 f0       	breq	.+58     	; 0x3e7a <__mulsf3+0xf4>
    3e40:	e6 0c       	add	r14, r6
    3e42:	f7 1c       	adc	r15, r7
    3e44:	08 1d       	adc	r16, r8
    3e46:	19 1d       	adc	r17, r9
    3e48:	9a 01       	movw	r18, r20
    3e4a:	ab 01       	movw	r20, r22
    3e4c:	2a 0d       	add	r18, r10
    3e4e:	3b 1d       	adc	r19, r11
    3e50:	4c 1d       	adc	r20, r12
    3e52:	5d 1d       	adc	r21, r13
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	a0 e0       	ldi	r26, 0x00	; 0
    3e5a:	b0 e0       	ldi	r27, 0x00	; 0
    3e5c:	e6 14       	cp	r14, r6
    3e5e:	f7 04       	cpc	r15, r7
    3e60:	08 05       	cpc	r16, r8
    3e62:	19 05       	cpc	r17, r9
    3e64:	20 f4       	brcc	.+8      	; 0x3e6e <__mulsf3+0xe8>
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	a0 e0       	ldi	r26, 0x00	; 0
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	ba 01       	movw	r22, r20
    3e70:	a9 01       	movw	r20, r18
    3e72:	48 0f       	add	r20, r24
    3e74:	59 1f       	adc	r21, r25
    3e76:	6a 1f       	adc	r22, r26
    3e78:	7b 1f       	adc	r23, r27
    3e7a:	aa 0c       	add	r10, r10
    3e7c:	bb 1c       	adc	r11, r11
    3e7e:	cc 1c       	adc	r12, r12
    3e80:	dd 1c       	adc	r13, r13
    3e82:	97 fe       	sbrs	r9, 7
    3e84:	08 c0       	rjmp	.+16     	; 0x3e96 <__mulsf3+0x110>
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	a0 e0       	ldi	r26, 0x00	; 0
    3e8c:	b0 e0       	ldi	r27, 0x00	; 0
    3e8e:	a8 2a       	or	r10, r24
    3e90:	b9 2a       	or	r11, r25
    3e92:	ca 2a       	or	r12, r26
    3e94:	db 2a       	or	r13, r27
    3e96:	31 96       	adiw	r30, 0x01	; 1
    3e98:	e0 32       	cpi	r30, 0x20	; 32
    3e9a:	f1 05       	cpc	r31, r1
    3e9c:	49 f0       	breq	.+18     	; 0x3eb0 <__mulsf3+0x12a>
    3e9e:	66 0c       	add	r6, r6
    3ea0:	77 1c       	adc	r7, r7
    3ea2:	88 1c       	adc	r8, r8
    3ea4:	99 1c       	adc	r9, r9
    3ea6:	56 94       	lsr	r5
    3ea8:	47 94       	ror	r4
    3eaa:	37 94       	ror	r3
    3eac:	27 94       	ror	r2
    3eae:	c3 cf       	rjmp	.-122    	; 0x3e36 <__mulsf3+0xb0>
    3eb0:	fa 85       	ldd	r31, Y+10	; 0x0a
    3eb2:	ea 89       	ldd	r30, Y+18	; 0x12
    3eb4:	2b 89       	ldd	r18, Y+19	; 0x13
    3eb6:	3c 89       	ldd	r19, Y+20	; 0x14
    3eb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3eba:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ebc:	28 0f       	add	r18, r24
    3ebe:	39 1f       	adc	r19, r25
    3ec0:	2e 5f       	subi	r18, 0xFE	; 254
    3ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec4:	17 c0       	rjmp	.+46     	; 0x3ef4 <__mulsf3+0x16e>
    3ec6:	ca 01       	movw	r24, r20
    3ec8:	81 70       	andi	r24, 0x01	; 1
    3eca:	90 70       	andi	r25, 0x00	; 0
    3ecc:	89 2b       	or	r24, r25
    3ece:	61 f0       	breq	.+24     	; 0x3ee8 <__mulsf3+0x162>
    3ed0:	16 95       	lsr	r17
    3ed2:	07 95       	ror	r16
    3ed4:	f7 94       	ror	r15
    3ed6:	e7 94       	ror	r14
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	a0 e0       	ldi	r26, 0x00	; 0
    3ede:	b0 e8       	ldi	r27, 0x80	; 128
    3ee0:	e8 2a       	or	r14, r24
    3ee2:	f9 2a       	or	r15, r25
    3ee4:	0a 2b       	or	r16, r26
    3ee6:	1b 2b       	or	r17, r27
    3ee8:	76 95       	lsr	r23
    3eea:	67 95       	ror	r22
    3eec:	57 95       	ror	r21
    3eee:	47 95       	ror	r20
    3ef0:	2f 5f       	subi	r18, 0xFF	; 255
    3ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef4:	77 fd       	sbrc	r23, 7
    3ef6:	e7 cf       	rjmp	.-50     	; 0x3ec6 <__mulsf3+0x140>
    3ef8:	0c c0       	rjmp	.+24     	; 0x3f12 <__mulsf3+0x18c>
    3efa:	44 0f       	add	r20, r20
    3efc:	55 1f       	adc	r21, r21
    3efe:	66 1f       	adc	r22, r22
    3f00:	77 1f       	adc	r23, r23
    3f02:	17 fd       	sbrc	r17, 7
    3f04:	41 60       	ori	r20, 0x01	; 1
    3f06:	ee 0c       	add	r14, r14
    3f08:	ff 1c       	adc	r15, r15
    3f0a:	00 1f       	adc	r16, r16
    3f0c:	11 1f       	adc	r17, r17
    3f0e:	21 50       	subi	r18, 0x01	; 1
    3f10:	30 40       	sbci	r19, 0x00	; 0
    3f12:	40 30       	cpi	r20, 0x00	; 0
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	59 07       	cpc	r21, r25
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	69 07       	cpc	r22, r25
    3f1c:	90 e4       	ldi	r25, 0x40	; 64
    3f1e:	79 07       	cpc	r23, r25
    3f20:	60 f3       	brcs	.-40     	; 0x3efa <__mulsf3+0x174>
    3f22:	2b 8f       	std	Y+27, r18	; 0x1b
    3f24:	3c 8f       	std	Y+28, r19	; 0x1c
    3f26:	db 01       	movw	r26, r22
    3f28:	ca 01       	movw	r24, r20
    3f2a:	8f 77       	andi	r24, 0x7F	; 127
    3f2c:	90 70       	andi	r25, 0x00	; 0
    3f2e:	a0 70       	andi	r26, 0x00	; 0
    3f30:	b0 70       	andi	r27, 0x00	; 0
    3f32:	80 34       	cpi	r24, 0x40	; 64
    3f34:	91 05       	cpc	r25, r1
    3f36:	a1 05       	cpc	r26, r1
    3f38:	b1 05       	cpc	r27, r1
    3f3a:	61 f4       	brne	.+24     	; 0x3f54 <__mulsf3+0x1ce>
    3f3c:	47 fd       	sbrc	r20, 7
    3f3e:	0a c0       	rjmp	.+20     	; 0x3f54 <__mulsf3+0x1ce>
    3f40:	e1 14       	cp	r14, r1
    3f42:	f1 04       	cpc	r15, r1
    3f44:	01 05       	cpc	r16, r1
    3f46:	11 05       	cpc	r17, r1
    3f48:	29 f0       	breq	.+10     	; 0x3f54 <__mulsf3+0x1ce>
    3f4a:	40 5c       	subi	r20, 0xC0	; 192
    3f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f4e:	6f 4f       	sbci	r22, 0xFF	; 255
    3f50:	7f 4f       	sbci	r23, 0xFF	; 255
    3f52:	40 78       	andi	r20, 0x80	; 128
    3f54:	1a 8e       	std	Y+26, r1	; 0x1a
    3f56:	fe 17       	cp	r31, r30
    3f58:	11 f0       	breq	.+4      	; 0x3f5e <__mulsf3+0x1d8>
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	8a 8f       	std	Y+26, r24	; 0x1a
    3f5e:	4d 8f       	std	Y+29, r20	; 0x1d
    3f60:	5e 8f       	std	Y+30, r21	; 0x1e
    3f62:	6f 8f       	std	Y+31, r22	; 0x1f
    3f64:	78 a3       	std	Y+32, r23	; 0x20
    3f66:	83 e0       	ldi	r24, 0x03	; 3
    3f68:	89 8f       	std	Y+25, r24	; 0x19
    3f6a:	ce 01       	movw	r24, r28
    3f6c:	49 96       	adiw	r24, 0x19	; 25
    3f6e:	0e 94 43 22 	call	0x4486	; 0x4486 <__pack_f>
    3f72:	a0 96       	adiw	r28, 0x20	; 32
    3f74:	e2 e1       	ldi	r30, 0x12	; 18
    3f76:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__epilogue_restores__>

00003f7a <__divsf3>:
    3f7a:	a8 e1       	ldi	r26, 0x18	; 24
    3f7c:	b0 e0       	ldi	r27, 0x00	; 0
    3f7e:	e3 ec       	ldi	r30, 0xC3	; 195
    3f80:	ff e1       	ldi	r31, 0x1F	; 31
    3f82:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__prologue_saves__+0x10>
    3f86:	69 83       	std	Y+1, r22	; 0x01
    3f88:	7a 83       	std	Y+2, r23	; 0x02
    3f8a:	8b 83       	std	Y+3, r24	; 0x03
    3f8c:	9c 83       	std	Y+4, r25	; 0x04
    3f8e:	2d 83       	std	Y+5, r18	; 0x05
    3f90:	3e 83       	std	Y+6, r19	; 0x06
    3f92:	4f 83       	std	Y+7, r20	; 0x07
    3f94:	58 87       	std	Y+8, r21	; 0x08
    3f96:	b9 e0       	ldi	r27, 0x09	; 9
    3f98:	eb 2e       	mov	r14, r27
    3f9a:	f1 2c       	mov	r15, r1
    3f9c:	ec 0e       	add	r14, r28
    3f9e:	fd 1e       	adc	r15, r29
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	01 96       	adiw	r24, 0x01	; 1
    3fa4:	b7 01       	movw	r22, r14
    3fa6:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    3faa:	8e 01       	movw	r16, r28
    3fac:	0f 5e       	subi	r16, 0xEF	; 239
    3fae:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb0:	ce 01       	movw	r24, r28
    3fb2:	05 96       	adiw	r24, 0x05	; 5
    3fb4:	b8 01       	movw	r22, r16
    3fb6:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    3fba:	29 85       	ldd	r18, Y+9	; 0x09
    3fbc:	22 30       	cpi	r18, 0x02	; 2
    3fbe:	08 f4       	brcc	.+2      	; 0x3fc2 <__divsf3+0x48>
    3fc0:	7e c0       	rjmp	.+252    	; 0x40be <__divsf3+0x144>
    3fc2:	39 89       	ldd	r19, Y+17	; 0x11
    3fc4:	32 30       	cpi	r19, 0x02	; 2
    3fc6:	10 f4       	brcc	.+4      	; 0x3fcc <__divsf3+0x52>
    3fc8:	b8 01       	movw	r22, r16
    3fca:	7c c0       	rjmp	.+248    	; 0x40c4 <__divsf3+0x14a>
    3fcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fce:	9a 89       	ldd	r25, Y+18	; 0x12
    3fd0:	89 27       	eor	r24, r25
    3fd2:	8a 87       	std	Y+10, r24	; 0x0a
    3fd4:	24 30       	cpi	r18, 0x04	; 4
    3fd6:	11 f0       	breq	.+4      	; 0x3fdc <__divsf3+0x62>
    3fd8:	22 30       	cpi	r18, 0x02	; 2
    3fda:	31 f4       	brne	.+12     	; 0x3fe8 <__divsf3+0x6e>
    3fdc:	23 17       	cp	r18, r19
    3fde:	09 f0       	breq	.+2      	; 0x3fe2 <__divsf3+0x68>
    3fe0:	6e c0       	rjmp	.+220    	; 0x40be <__divsf3+0x144>
    3fe2:	6f e8       	ldi	r22, 0x8F	; 143
    3fe4:	74 e0       	ldi	r23, 0x04	; 4
    3fe6:	6e c0       	rjmp	.+220    	; 0x40c4 <__divsf3+0x14a>
    3fe8:	34 30       	cpi	r19, 0x04	; 4
    3fea:	39 f4       	brne	.+14     	; 0x3ffa <__divsf3+0x80>
    3fec:	1d 86       	std	Y+13, r1	; 0x0d
    3fee:	1e 86       	std	Y+14, r1	; 0x0e
    3ff0:	1f 86       	std	Y+15, r1	; 0x0f
    3ff2:	18 8a       	std	Y+16, r1	; 0x10
    3ff4:	1c 86       	std	Y+12, r1	; 0x0c
    3ff6:	1b 86       	std	Y+11, r1	; 0x0b
    3ff8:	04 c0       	rjmp	.+8      	; 0x4002 <__divsf3+0x88>
    3ffa:	32 30       	cpi	r19, 0x02	; 2
    3ffc:	21 f4       	brne	.+8      	; 0x4006 <__divsf3+0x8c>
    3ffe:	84 e0       	ldi	r24, 0x04	; 4
    4000:	89 87       	std	Y+9, r24	; 0x09
    4002:	b7 01       	movw	r22, r14
    4004:	5f c0       	rjmp	.+190    	; 0x40c4 <__divsf3+0x14a>
    4006:	2b 85       	ldd	r18, Y+11	; 0x0b
    4008:	3c 85       	ldd	r19, Y+12	; 0x0c
    400a:	8b 89       	ldd	r24, Y+19	; 0x13
    400c:	9c 89       	ldd	r25, Y+20	; 0x14
    400e:	28 1b       	sub	r18, r24
    4010:	39 0b       	sbc	r19, r25
    4012:	3c 87       	std	Y+12, r19	; 0x0c
    4014:	2b 87       	std	Y+11, r18	; 0x0b
    4016:	ed 84       	ldd	r14, Y+13	; 0x0d
    4018:	fe 84       	ldd	r15, Y+14	; 0x0e
    401a:	0f 85       	ldd	r16, Y+15	; 0x0f
    401c:	18 89       	ldd	r17, Y+16	; 0x10
    401e:	ad 88       	ldd	r10, Y+21	; 0x15
    4020:	be 88       	ldd	r11, Y+22	; 0x16
    4022:	cf 88       	ldd	r12, Y+23	; 0x17
    4024:	d8 8c       	ldd	r13, Y+24	; 0x18
    4026:	ea 14       	cp	r14, r10
    4028:	fb 04       	cpc	r15, r11
    402a:	0c 05       	cpc	r16, r12
    402c:	1d 05       	cpc	r17, r13
    402e:	40 f4       	brcc	.+16     	; 0x4040 <__divsf3+0xc6>
    4030:	ee 0c       	add	r14, r14
    4032:	ff 1c       	adc	r15, r15
    4034:	00 1f       	adc	r16, r16
    4036:	11 1f       	adc	r17, r17
    4038:	21 50       	subi	r18, 0x01	; 1
    403a:	30 40       	sbci	r19, 0x00	; 0
    403c:	3c 87       	std	Y+12, r19	; 0x0c
    403e:	2b 87       	std	Y+11, r18	; 0x0b
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	40 e0       	ldi	r20, 0x00	; 0
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	a0 e0       	ldi	r26, 0x00	; 0
    404e:	b0 e4       	ldi	r27, 0x40	; 64
    4050:	60 e0       	ldi	r22, 0x00	; 0
    4052:	70 e0       	ldi	r23, 0x00	; 0
    4054:	ea 14       	cp	r14, r10
    4056:	fb 04       	cpc	r15, r11
    4058:	0c 05       	cpc	r16, r12
    405a:	1d 05       	cpc	r17, r13
    405c:	40 f0       	brcs	.+16     	; 0x406e <__divsf3+0xf4>
    405e:	28 2b       	or	r18, r24
    4060:	39 2b       	or	r19, r25
    4062:	4a 2b       	or	r20, r26
    4064:	5b 2b       	or	r21, r27
    4066:	ea 18       	sub	r14, r10
    4068:	fb 08       	sbc	r15, r11
    406a:	0c 09       	sbc	r16, r12
    406c:	1d 09       	sbc	r17, r13
    406e:	b6 95       	lsr	r27
    4070:	a7 95       	ror	r26
    4072:	97 95       	ror	r25
    4074:	87 95       	ror	r24
    4076:	ee 0c       	add	r14, r14
    4078:	ff 1c       	adc	r15, r15
    407a:	00 1f       	adc	r16, r16
    407c:	11 1f       	adc	r17, r17
    407e:	6f 5f       	subi	r22, 0xFF	; 255
    4080:	7f 4f       	sbci	r23, 0xFF	; 255
    4082:	6f 31       	cpi	r22, 0x1F	; 31
    4084:	71 05       	cpc	r23, r1
    4086:	31 f7       	brne	.-52     	; 0x4054 <__divsf3+0xda>
    4088:	da 01       	movw	r26, r20
    408a:	c9 01       	movw	r24, r18
    408c:	8f 77       	andi	r24, 0x7F	; 127
    408e:	90 70       	andi	r25, 0x00	; 0
    4090:	a0 70       	andi	r26, 0x00	; 0
    4092:	b0 70       	andi	r27, 0x00	; 0
    4094:	80 34       	cpi	r24, 0x40	; 64
    4096:	91 05       	cpc	r25, r1
    4098:	a1 05       	cpc	r26, r1
    409a:	b1 05       	cpc	r27, r1
    409c:	61 f4       	brne	.+24     	; 0x40b6 <__divsf3+0x13c>
    409e:	27 fd       	sbrc	r18, 7
    40a0:	0a c0       	rjmp	.+20     	; 0x40b6 <__divsf3+0x13c>
    40a2:	e1 14       	cp	r14, r1
    40a4:	f1 04       	cpc	r15, r1
    40a6:	01 05       	cpc	r16, r1
    40a8:	11 05       	cpc	r17, r1
    40aa:	29 f0       	breq	.+10     	; 0x40b6 <__divsf3+0x13c>
    40ac:	20 5c       	subi	r18, 0xC0	; 192
    40ae:	3f 4f       	sbci	r19, 0xFF	; 255
    40b0:	4f 4f       	sbci	r20, 0xFF	; 255
    40b2:	5f 4f       	sbci	r21, 0xFF	; 255
    40b4:	20 78       	andi	r18, 0x80	; 128
    40b6:	2d 87       	std	Y+13, r18	; 0x0d
    40b8:	3e 87       	std	Y+14, r19	; 0x0e
    40ba:	4f 87       	std	Y+15, r20	; 0x0f
    40bc:	58 8b       	std	Y+16, r21	; 0x10
    40be:	be 01       	movw	r22, r28
    40c0:	67 5f       	subi	r22, 0xF7	; 247
    40c2:	7f 4f       	sbci	r23, 0xFF	; 255
    40c4:	cb 01       	movw	r24, r22
    40c6:	0e 94 43 22 	call	0x4486	; 0x4486 <__pack_f>
    40ca:	68 96       	adiw	r28, 0x18	; 24
    40cc:	ea e0       	ldi	r30, 0x0A	; 10
    40ce:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__epilogue_restores__+0x10>

000040d2 <__gesf2>:
    40d2:	a8 e1       	ldi	r26, 0x18	; 24
    40d4:	b0 e0       	ldi	r27, 0x00	; 0
    40d6:	ef e6       	ldi	r30, 0x6F	; 111
    40d8:	f0 e2       	ldi	r31, 0x20	; 32
    40da:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__prologue_saves__+0x18>
    40de:	69 83       	std	Y+1, r22	; 0x01
    40e0:	7a 83       	std	Y+2, r23	; 0x02
    40e2:	8b 83       	std	Y+3, r24	; 0x03
    40e4:	9c 83       	std	Y+4, r25	; 0x04
    40e6:	2d 83       	std	Y+5, r18	; 0x05
    40e8:	3e 83       	std	Y+6, r19	; 0x06
    40ea:	4f 83       	std	Y+7, r20	; 0x07
    40ec:	58 87       	std	Y+8, r21	; 0x08
    40ee:	89 e0       	ldi	r24, 0x09	; 9
    40f0:	e8 2e       	mov	r14, r24
    40f2:	f1 2c       	mov	r15, r1
    40f4:	ec 0e       	add	r14, r28
    40f6:	fd 1e       	adc	r15, r29
    40f8:	ce 01       	movw	r24, r28
    40fa:	01 96       	adiw	r24, 0x01	; 1
    40fc:	b7 01       	movw	r22, r14
    40fe:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    4102:	8e 01       	movw	r16, r28
    4104:	0f 5e       	subi	r16, 0xEF	; 239
    4106:	1f 4f       	sbci	r17, 0xFF	; 255
    4108:	ce 01       	movw	r24, r28
    410a:	05 96       	adiw	r24, 0x05	; 5
    410c:	b8 01       	movw	r22, r16
    410e:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    4112:	89 85       	ldd	r24, Y+9	; 0x09
    4114:	82 30       	cpi	r24, 0x02	; 2
    4116:	40 f0       	brcs	.+16     	; 0x4128 <__gesf2+0x56>
    4118:	89 89       	ldd	r24, Y+17	; 0x11
    411a:	82 30       	cpi	r24, 0x02	; 2
    411c:	28 f0       	brcs	.+10     	; 0x4128 <__gesf2+0x56>
    411e:	c7 01       	movw	r24, r14
    4120:	b8 01       	movw	r22, r16
    4122:	0e 94 90 23 	call	0x4720	; 0x4720 <__fpcmp_parts_f>
    4126:	01 c0       	rjmp	.+2      	; 0x412a <__gesf2+0x58>
    4128:	8f ef       	ldi	r24, 0xFF	; 255
    412a:	68 96       	adiw	r28, 0x18	; 24
    412c:	e6 e0       	ldi	r30, 0x06	; 6
    412e:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__epilogue_restores__+0x18>

00004132 <__ltsf2>:
    4132:	a8 e1       	ldi	r26, 0x18	; 24
    4134:	b0 e0       	ldi	r27, 0x00	; 0
    4136:	ef e9       	ldi	r30, 0x9F	; 159
    4138:	f0 e2       	ldi	r31, 0x20	; 32
    413a:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__prologue_saves__+0x18>
    413e:	69 83       	std	Y+1, r22	; 0x01
    4140:	7a 83       	std	Y+2, r23	; 0x02
    4142:	8b 83       	std	Y+3, r24	; 0x03
    4144:	9c 83       	std	Y+4, r25	; 0x04
    4146:	2d 83       	std	Y+5, r18	; 0x05
    4148:	3e 83       	std	Y+6, r19	; 0x06
    414a:	4f 83       	std	Y+7, r20	; 0x07
    414c:	58 87       	std	Y+8, r21	; 0x08
    414e:	89 e0       	ldi	r24, 0x09	; 9
    4150:	e8 2e       	mov	r14, r24
    4152:	f1 2c       	mov	r15, r1
    4154:	ec 0e       	add	r14, r28
    4156:	fd 1e       	adc	r15, r29
    4158:	ce 01       	movw	r24, r28
    415a:	01 96       	adiw	r24, 0x01	; 1
    415c:	b7 01       	movw	r22, r14
    415e:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    4162:	8e 01       	movw	r16, r28
    4164:	0f 5e       	subi	r16, 0xEF	; 239
    4166:	1f 4f       	sbci	r17, 0xFF	; 255
    4168:	ce 01       	movw	r24, r28
    416a:	05 96       	adiw	r24, 0x05	; 5
    416c:	b8 01       	movw	r22, r16
    416e:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    4172:	89 85       	ldd	r24, Y+9	; 0x09
    4174:	82 30       	cpi	r24, 0x02	; 2
    4176:	40 f0       	brcs	.+16     	; 0x4188 <__ltsf2+0x56>
    4178:	89 89       	ldd	r24, Y+17	; 0x11
    417a:	82 30       	cpi	r24, 0x02	; 2
    417c:	28 f0       	brcs	.+10     	; 0x4188 <__ltsf2+0x56>
    417e:	c7 01       	movw	r24, r14
    4180:	b8 01       	movw	r22, r16
    4182:	0e 94 90 23 	call	0x4720	; 0x4720 <__fpcmp_parts_f>
    4186:	01 c0       	rjmp	.+2      	; 0x418a <__ltsf2+0x58>
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	68 96       	adiw	r28, 0x18	; 24
    418c:	e6 e0       	ldi	r30, 0x06	; 6
    418e:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__epilogue_restores__+0x18>

00004192 <__floatsisf>:
    4192:	a8 e0       	ldi	r26, 0x08	; 8
    4194:	b0 e0       	ldi	r27, 0x00	; 0
    4196:	ef ec       	ldi	r30, 0xCF	; 207
    4198:	f0 e2       	ldi	r31, 0x20	; 32
    419a:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__prologue_saves__+0x12>
    419e:	9b 01       	movw	r18, r22
    41a0:	ac 01       	movw	r20, r24
    41a2:	83 e0       	ldi	r24, 0x03	; 3
    41a4:	89 83       	std	Y+1, r24	; 0x01
    41a6:	da 01       	movw	r26, r20
    41a8:	c9 01       	movw	r24, r18
    41aa:	88 27       	eor	r24, r24
    41ac:	b7 fd       	sbrc	r27, 7
    41ae:	83 95       	inc	r24
    41b0:	99 27       	eor	r25, r25
    41b2:	aa 27       	eor	r26, r26
    41b4:	bb 27       	eor	r27, r27
    41b6:	b8 2e       	mov	r11, r24
    41b8:	21 15       	cp	r18, r1
    41ba:	31 05       	cpc	r19, r1
    41bc:	41 05       	cpc	r20, r1
    41be:	51 05       	cpc	r21, r1
    41c0:	19 f4       	brne	.+6      	; 0x41c8 <__floatsisf+0x36>
    41c2:	82 e0       	ldi	r24, 0x02	; 2
    41c4:	89 83       	std	Y+1, r24	; 0x01
    41c6:	3a c0       	rjmp	.+116    	; 0x423c <__floatsisf+0xaa>
    41c8:	88 23       	and	r24, r24
    41ca:	a9 f0       	breq	.+42     	; 0x41f6 <__floatsisf+0x64>
    41cc:	20 30       	cpi	r18, 0x00	; 0
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	38 07       	cpc	r19, r24
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	48 07       	cpc	r20, r24
    41d6:	80 e8       	ldi	r24, 0x80	; 128
    41d8:	58 07       	cpc	r21, r24
    41da:	29 f4       	brne	.+10     	; 0x41e6 <__floatsisf+0x54>
    41dc:	60 e0       	ldi	r22, 0x00	; 0
    41de:	70 e0       	ldi	r23, 0x00	; 0
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	9f ec       	ldi	r25, 0xCF	; 207
    41e4:	30 c0       	rjmp	.+96     	; 0x4246 <__floatsisf+0xb4>
    41e6:	ee 24       	eor	r14, r14
    41e8:	ff 24       	eor	r15, r15
    41ea:	87 01       	movw	r16, r14
    41ec:	e2 1a       	sub	r14, r18
    41ee:	f3 0a       	sbc	r15, r19
    41f0:	04 0b       	sbc	r16, r20
    41f2:	15 0b       	sbc	r17, r21
    41f4:	02 c0       	rjmp	.+4      	; 0x41fa <__floatsisf+0x68>
    41f6:	79 01       	movw	r14, r18
    41f8:	8a 01       	movw	r16, r20
    41fa:	8e e1       	ldi	r24, 0x1E	; 30
    41fc:	c8 2e       	mov	r12, r24
    41fe:	d1 2c       	mov	r13, r1
    4200:	dc 82       	std	Y+4, r13	; 0x04
    4202:	cb 82       	std	Y+3, r12	; 0x03
    4204:	ed 82       	std	Y+5, r14	; 0x05
    4206:	fe 82       	std	Y+6, r15	; 0x06
    4208:	0f 83       	std	Y+7, r16	; 0x07
    420a:	18 87       	std	Y+8, r17	; 0x08
    420c:	c8 01       	movw	r24, r16
    420e:	b7 01       	movw	r22, r14
    4210:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__clzsi2>
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	18 16       	cp	r1, r24
    4218:	19 06       	cpc	r1, r25
    421a:	84 f4       	brge	.+32     	; 0x423c <__floatsisf+0xaa>
    421c:	08 2e       	mov	r0, r24
    421e:	04 c0       	rjmp	.+8      	; 0x4228 <__floatsisf+0x96>
    4220:	ee 0c       	add	r14, r14
    4222:	ff 1c       	adc	r15, r15
    4224:	00 1f       	adc	r16, r16
    4226:	11 1f       	adc	r17, r17
    4228:	0a 94       	dec	r0
    422a:	d2 f7       	brpl	.-12     	; 0x4220 <__floatsisf+0x8e>
    422c:	ed 82       	std	Y+5, r14	; 0x05
    422e:	fe 82       	std	Y+6, r15	; 0x06
    4230:	0f 83       	std	Y+7, r16	; 0x07
    4232:	18 87       	std	Y+8, r17	; 0x08
    4234:	c8 1a       	sub	r12, r24
    4236:	d9 0a       	sbc	r13, r25
    4238:	dc 82       	std	Y+4, r13	; 0x04
    423a:	cb 82       	std	Y+3, r12	; 0x03
    423c:	ba 82       	std	Y+2, r11	; 0x02
    423e:	ce 01       	movw	r24, r28
    4240:	01 96       	adiw	r24, 0x01	; 1
    4242:	0e 94 43 22 	call	0x4486	; 0x4486 <__pack_f>
    4246:	28 96       	adiw	r28, 0x08	; 8
    4248:	e9 e0       	ldi	r30, 0x09	; 9
    424a:	0c 94 91 24 	jmp	0x4922	; 0x4922 <__epilogue_restores__+0x12>

0000424e <__fixsfsi>:
    424e:	ac e0       	ldi	r26, 0x0C	; 12
    4250:	b0 e0       	ldi	r27, 0x00	; 0
    4252:	ed e2       	ldi	r30, 0x2D	; 45
    4254:	f1 e2       	ldi	r31, 0x21	; 33
    4256:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__prologue_saves__+0x20>
    425a:	69 83       	std	Y+1, r22	; 0x01
    425c:	7a 83       	std	Y+2, r23	; 0x02
    425e:	8b 83       	std	Y+3, r24	; 0x03
    4260:	9c 83       	std	Y+4, r25	; 0x04
    4262:	ce 01       	movw	r24, r28
    4264:	01 96       	adiw	r24, 0x01	; 1
    4266:	be 01       	movw	r22, r28
    4268:	6b 5f       	subi	r22, 0xFB	; 251
    426a:	7f 4f       	sbci	r23, 0xFF	; 255
    426c:	0e 94 18 23 	call	0x4630	; 0x4630 <__unpack_f>
    4270:	8d 81       	ldd	r24, Y+5	; 0x05
    4272:	82 30       	cpi	r24, 0x02	; 2
    4274:	61 f1       	breq	.+88     	; 0x42ce <__fixsfsi+0x80>
    4276:	82 30       	cpi	r24, 0x02	; 2
    4278:	50 f1       	brcs	.+84     	; 0x42ce <__fixsfsi+0x80>
    427a:	84 30       	cpi	r24, 0x04	; 4
    427c:	21 f4       	brne	.+8      	; 0x4286 <__fixsfsi+0x38>
    427e:	8e 81       	ldd	r24, Y+6	; 0x06
    4280:	88 23       	and	r24, r24
    4282:	51 f1       	breq	.+84     	; 0x42d8 <__fixsfsi+0x8a>
    4284:	2e c0       	rjmp	.+92     	; 0x42e2 <__fixsfsi+0x94>
    4286:	2f 81       	ldd	r18, Y+7	; 0x07
    4288:	38 85       	ldd	r19, Y+8	; 0x08
    428a:	37 fd       	sbrc	r19, 7
    428c:	20 c0       	rjmp	.+64     	; 0x42ce <__fixsfsi+0x80>
    428e:	6e 81       	ldd	r22, Y+6	; 0x06
    4290:	2f 31       	cpi	r18, 0x1F	; 31
    4292:	31 05       	cpc	r19, r1
    4294:	1c f0       	brlt	.+6      	; 0x429c <__fixsfsi+0x4e>
    4296:	66 23       	and	r22, r22
    4298:	f9 f0       	breq	.+62     	; 0x42d8 <__fixsfsi+0x8a>
    429a:	23 c0       	rjmp	.+70     	; 0x42e2 <__fixsfsi+0x94>
    429c:	8e e1       	ldi	r24, 0x1E	; 30
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	82 1b       	sub	r24, r18
    42a2:	93 0b       	sbc	r25, r19
    42a4:	29 85       	ldd	r18, Y+9	; 0x09
    42a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    42a8:	4b 85       	ldd	r20, Y+11	; 0x0b
    42aa:	5c 85       	ldd	r21, Y+12	; 0x0c
    42ac:	04 c0       	rjmp	.+8      	; 0x42b6 <__fixsfsi+0x68>
    42ae:	56 95       	lsr	r21
    42b0:	47 95       	ror	r20
    42b2:	37 95       	ror	r19
    42b4:	27 95       	ror	r18
    42b6:	8a 95       	dec	r24
    42b8:	d2 f7       	brpl	.-12     	; 0x42ae <__fixsfsi+0x60>
    42ba:	66 23       	and	r22, r22
    42bc:	b1 f0       	breq	.+44     	; 0x42ea <__fixsfsi+0x9c>
    42be:	50 95       	com	r21
    42c0:	40 95       	com	r20
    42c2:	30 95       	com	r19
    42c4:	21 95       	neg	r18
    42c6:	3f 4f       	sbci	r19, 0xFF	; 255
    42c8:	4f 4f       	sbci	r20, 0xFF	; 255
    42ca:	5f 4f       	sbci	r21, 0xFF	; 255
    42cc:	0e c0       	rjmp	.+28     	; 0x42ea <__fixsfsi+0x9c>
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	40 e0       	ldi	r20, 0x00	; 0
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	09 c0       	rjmp	.+18     	; 0x42ea <__fixsfsi+0x9c>
    42d8:	2f ef       	ldi	r18, 0xFF	; 255
    42da:	3f ef       	ldi	r19, 0xFF	; 255
    42dc:	4f ef       	ldi	r20, 0xFF	; 255
    42de:	5f e7       	ldi	r21, 0x7F	; 127
    42e0:	04 c0       	rjmp	.+8      	; 0x42ea <__fixsfsi+0x9c>
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e0       	ldi	r20, 0x00	; 0
    42e8:	50 e8       	ldi	r21, 0x80	; 128
    42ea:	b9 01       	movw	r22, r18
    42ec:	ca 01       	movw	r24, r20
    42ee:	2c 96       	adiw	r28, 0x0c	; 12
    42f0:	e2 e0       	ldi	r30, 0x02	; 2
    42f2:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__epilogue_restores__+0x20>

000042f6 <__floatunsisf>:
    42f6:	a8 e0       	ldi	r26, 0x08	; 8
    42f8:	b0 e0       	ldi	r27, 0x00	; 0
    42fa:	e1 e8       	ldi	r30, 0x81	; 129
    42fc:	f1 e2       	ldi	r31, 0x21	; 33
    42fe:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__prologue_saves__+0x10>
    4302:	7b 01       	movw	r14, r22
    4304:	8c 01       	movw	r16, r24
    4306:	61 15       	cp	r22, r1
    4308:	71 05       	cpc	r23, r1
    430a:	81 05       	cpc	r24, r1
    430c:	91 05       	cpc	r25, r1
    430e:	19 f4       	brne	.+6      	; 0x4316 <__floatunsisf+0x20>
    4310:	82 e0       	ldi	r24, 0x02	; 2
    4312:	89 83       	std	Y+1, r24	; 0x01
    4314:	60 c0       	rjmp	.+192    	; 0x43d6 <__floatunsisf+0xe0>
    4316:	83 e0       	ldi	r24, 0x03	; 3
    4318:	89 83       	std	Y+1, r24	; 0x01
    431a:	8e e1       	ldi	r24, 0x1E	; 30
    431c:	c8 2e       	mov	r12, r24
    431e:	d1 2c       	mov	r13, r1
    4320:	dc 82       	std	Y+4, r13	; 0x04
    4322:	cb 82       	std	Y+3, r12	; 0x03
    4324:	ed 82       	std	Y+5, r14	; 0x05
    4326:	fe 82       	std	Y+6, r15	; 0x06
    4328:	0f 83       	std	Y+7, r16	; 0x07
    432a:	18 87       	std	Y+8, r17	; 0x08
    432c:	c8 01       	movw	r24, r16
    432e:	b7 01       	movw	r22, r14
    4330:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__clzsi2>
    4334:	fc 01       	movw	r30, r24
    4336:	31 97       	sbiw	r30, 0x01	; 1
    4338:	f7 ff       	sbrs	r31, 7
    433a:	3b c0       	rjmp	.+118    	; 0x43b2 <__floatunsisf+0xbc>
    433c:	22 27       	eor	r18, r18
    433e:	33 27       	eor	r19, r19
    4340:	2e 1b       	sub	r18, r30
    4342:	3f 0b       	sbc	r19, r31
    4344:	57 01       	movw	r10, r14
    4346:	68 01       	movw	r12, r16
    4348:	02 2e       	mov	r0, r18
    434a:	04 c0       	rjmp	.+8      	; 0x4354 <__floatunsisf+0x5e>
    434c:	d6 94       	lsr	r13
    434e:	c7 94       	ror	r12
    4350:	b7 94       	ror	r11
    4352:	a7 94       	ror	r10
    4354:	0a 94       	dec	r0
    4356:	d2 f7       	brpl	.-12     	; 0x434c <__floatunsisf+0x56>
    4358:	40 e0       	ldi	r20, 0x00	; 0
    435a:	50 e0       	ldi	r21, 0x00	; 0
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	70 e0       	ldi	r23, 0x00	; 0
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	a0 e0       	ldi	r26, 0x00	; 0
    4366:	b0 e0       	ldi	r27, 0x00	; 0
    4368:	04 c0       	rjmp	.+8      	; 0x4372 <__floatunsisf+0x7c>
    436a:	88 0f       	add	r24, r24
    436c:	99 1f       	adc	r25, r25
    436e:	aa 1f       	adc	r26, r26
    4370:	bb 1f       	adc	r27, r27
    4372:	2a 95       	dec	r18
    4374:	d2 f7       	brpl	.-12     	; 0x436a <__floatunsisf+0x74>
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	a1 09       	sbc	r26, r1
    437a:	b1 09       	sbc	r27, r1
    437c:	8e 21       	and	r24, r14
    437e:	9f 21       	and	r25, r15
    4380:	a0 23       	and	r26, r16
    4382:	b1 23       	and	r27, r17
    4384:	00 97       	sbiw	r24, 0x00	; 0
    4386:	a1 05       	cpc	r26, r1
    4388:	b1 05       	cpc	r27, r1
    438a:	21 f0       	breq	.+8      	; 0x4394 <__floatunsisf+0x9e>
    438c:	41 e0       	ldi	r20, 0x01	; 1
    438e:	50 e0       	ldi	r21, 0x00	; 0
    4390:	60 e0       	ldi	r22, 0x00	; 0
    4392:	70 e0       	ldi	r23, 0x00	; 0
    4394:	4a 29       	or	r20, r10
    4396:	5b 29       	or	r21, r11
    4398:	6c 29       	or	r22, r12
    439a:	7d 29       	or	r23, r13
    439c:	4d 83       	std	Y+5, r20	; 0x05
    439e:	5e 83       	std	Y+6, r21	; 0x06
    43a0:	6f 83       	std	Y+7, r22	; 0x07
    43a2:	78 87       	std	Y+8, r23	; 0x08
    43a4:	8e e1       	ldi	r24, 0x1E	; 30
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	8e 1b       	sub	r24, r30
    43aa:	9f 0b       	sbc	r25, r31
    43ac:	9c 83       	std	Y+4, r25	; 0x04
    43ae:	8b 83       	std	Y+3, r24	; 0x03
    43b0:	12 c0       	rjmp	.+36     	; 0x43d6 <__floatunsisf+0xe0>
    43b2:	30 97       	sbiw	r30, 0x00	; 0
    43b4:	81 f0       	breq	.+32     	; 0x43d6 <__floatunsisf+0xe0>
    43b6:	0e 2e       	mov	r0, r30
    43b8:	04 c0       	rjmp	.+8      	; 0x43c2 <__floatunsisf+0xcc>
    43ba:	ee 0c       	add	r14, r14
    43bc:	ff 1c       	adc	r15, r15
    43be:	00 1f       	adc	r16, r16
    43c0:	11 1f       	adc	r17, r17
    43c2:	0a 94       	dec	r0
    43c4:	d2 f7       	brpl	.-12     	; 0x43ba <__floatunsisf+0xc4>
    43c6:	ed 82       	std	Y+5, r14	; 0x05
    43c8:	fe 82       	std	Y+6, r15	; 0x06
    43ca:	0f 83       	std	Y+7, r16	; 0x07
    43cc:	18 87       	std	Y+8, r17	; 0x08
    43ce:	ce 1a       	sub	r12, r30
    43d0:	df 0a       	sbc	r13, r31
    43d2:	dc 82       	std	Y+4, r13	; 0x04
    43d4:	cb 82       	std	Y+3, r12	; 0x03
    43d6:	1a 82       	std	Y+2, r1	; 0x02
    43d8:	ce 01       	movw	r24, r28
    43da:	01 96       	adiw	r24, 0x01	; 1
    43dc:	0e 94 43 22 	call	0x4486	; 0x4486 <__pack_f>
    43e0:	28 96       	adiw	r28, 0x08	; 8
    43e2:	ea e0       	ldi	r30, 0x0A	; 10
    43e4:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__epilogue_restores__+0x10>

000043e8 <__clzsi2>:
    43e8:	ef 92       	push	r14
    43ea:	ff 92       	push	r15
    43ec:	0f 93       	push	r16
    43ee:	1f 93       	push	r17
    43f0:	7b 01       	movw	r14, r22
    43f2:	8c 01       	movw	r16, r24
    43f4:	80 e0       	ldi	r24, 0x00	; 0
    43f6:	e8 16       	cp	r14, r24
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	f8 06       	cpc	r15, r24
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	08 07       	cpc	r16, r24
    4400:	80 e0       	ldi	r24, 0x00	; 0
    4402:	18 07       	cpc	r17, r24
    4404:	88 f4       	brcc	.+34     	; 0x4428 <__clzsi2+0x40>
    4406:	8f ef       	ldi	r24, 0xFF	; 255
    4408:	e8 16       	cp	r14, r24
    440a:	f1 04       	cpc	r15, r1
    440c:	01 05       	cpc	r16, r1
    440e:	11 05       	cpc	r17, r1
    4410:	31 f0       	breq	.+12     	; 0x441e <__clzsi2+0x36>
    4412:	28 f0       	brcs	.+10     	; 0x441e <__clzsi2+0x36>
    4414:	88 e0       	ldi	r24, 0x08	; 8
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	a0 e0       	ldi	r26, 0x00	; 0
    441a:	b0 e0       	ldi	r27, 0x00	; 0
    441c:	17 c0       	rjmp	.+46     	; 0x444c <__clzsi2+0x64>
    441e:	80 e0       	ldi	r24, 0x00	; 0
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	a0 e0       	ldi	r26, 0x00	; 0
    4424:	b0 e0       	ldi	r27, 0x00	; 0
    4426:	12 c0       	rjmp	.+36     	; 0x444c <__clzsi2+0x64>
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	e8 16       	cp	r14, r24
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	f8 06       	cpc	r15, r24
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	08 07       	cpc	r16, r24
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	18 07       	cpc	r17, r24
    4438:	28 f0       	brcs	.+10     	; 0x4444 <__clzsi2+0x5c>
    443a:	88 e1       	ldi	r24, 0x18	; 24
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	a0 e0       	ldi	r26, 0x00	; 0
    4440:	b0 e0       	ldi	r27, 0x00	; 0
    4442:	04 c0       	rjmp	.+8      	; 0x444c <__clzsi2+0x64>
    4444:	80 e1       	ldi	r24, 0x10	; 16
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	a0 e0       	ldi	r26, 0x00	; 0
    444a:	b0 e0       	ldi	r27, 0x00	; 0
    444c:	20 e2       	ldi	r18, 0x20	; 32
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	40 e0       	ldi	r20, 0x00	; 0
    4452:	50 e0       	ldi	r21, 0x00	; 0
    4454:	28 1b       	sub	r18, r24
    4456:	39 0b       	sbc	r19, r25
    4458:	4a 0b       	sbc	r20, r26
    445a:	5b 0b       	sbc	r21, r27
    445c:	04 c0       	rjmp	.+8      	; 0x4466 <__clzsi2+0x7e>
    445e:	16 95       	lsr	r17
    4460:	07 95       	ror	r16
    4462:	f7 94       	ror	r15
    4464:	e7 94       	ror	r14
    4466:	8a 95       	dec	r24
    4468:	d2 f7       	brpl	.-12     	; 0x445e <__clzsi2+0x76>
    446a:	f7 01       	movw	r30, r14
    446c:	e9 56       	subi	r30, 0x69	; 105
    446e:	fb 4f       	sbci	r31, 0xFB	; 251
    4470:	80 81       	ld	r24, Z
    4472:	28 1b       	sub	r18, r24
    4474:	31 09       	sbc	r19, r1
    4476:	41 09       	sbc	r20, r1
    4478:	51 09       	sbc	r21, r1
    447a:	c9 01       	movw	r24, r18
    447c:	1f 91       	pop	r17
    447e:	0f 91       	pop	r16
    4480:	ff 90       	pop	r15
    4482:	ef 90       	pop	r14
    4484:	08 95       	ret

00004486 <__pack_f>:
    4486:	df 92       	push	r13
    4488:	ef 92       	push	r14
    448a:	ff 92       	push	r15
    448c:	0f 93       	push	r16
    448e:	1f 93       	push	r17
    4490:	fc 01       	movw	r30, r24
    4492:	e4 80       	ldd	r14, Z+4	; 0x04
    4494:	f5 80       	ldd	r15, Z+5	; 0x05
    4496:	06 81       	ldd	r16, Z+6	; 0x06
    4498:	17 81       	ldd	r17, Z+7	; 0x07
    449a:	d1 80       	ldd	r13, Z+1	; 0x01
    449c:	80 81       	ld	r24, Z
    449e:	82 30       	cpi	r24, 0x02	; 2
    44a0:	48 f4       	brcc	.+18     	; 0x44b4 <__pack_f+0x2e>
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	a0 e1       	ldi	r26, 0x10	; 16
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	e8 2a       	or	r14, r24
    44ac:	f9 2a       	or	r15, r25
    44ae:	0a 2b       	or	r16, r26
    44b0:	1b 2b       	or	r17, r27
    44b2:	a5 c0       	rjmp	.+330    	; 0x45fe <__pack_f+0x178>
    44b4:	84 30       	cpi	r24, 0x04	; 4
    44b6:	09 f4       	brne	.+2      	; 0x44ba <__pack_f+0x34>
    44b8:	9f c0       	rjmp	.+318    	; 0x45f8 <__pack_f+0x172>
    44ba:	82 30       	cpi	r24, 0x02	; 2
    44bc:	21 f4       	brne	.+8      	; 0x44c6 <__pack_f+0x40>
    44be:	ee 24       	eor	r14, r14
    44c0:	ff 24       	eor	r15, r15
    44c2:	87 01       	movw	r16, r14
    44c4:	05 c0       	rjmp	.+10     	; 0x44d0 <__pack_f+0x4a>
    44c6:	e1 14       	cp	r14, r1
    44c8:	f1 04       	cpc	r15, r1
    44ca:	01 05       	cpc	r16, r1
    44cc:	11 05       	cpc	r17, r1
    44ce:	19 f4       	brne	.+6      	; 0x44d6 <__pack_f+0x50>
    44d0:	e0 e0       	ldi	r30, 0x00	; 0
    44d2:	f0 e0       	ldi	r31, 0x00	; 0
    44d4:	96 c0       	rjmp	.+300    	; 0x4602 <__pack_f+0x17c>
    44d6:	62 81       	ldd	r22, Z+2	; 0x02
    44d8:	73 81       	ldd	r23, Z+3	; 0x03
    44da:	9f ef       	ldi	r25, 0xFF	; 255
    44dc:	62 38       	cpi	r22, 0x82	; 130
    44de:	79 07       	cpc	r23, r25
    44e0:	0c f0       	brlt	.+2      	; 0x44e4 <__pack_f+0x5e>
    44e2:	5b c0       	rjmp	.+182    	; 0x459a <__pack_f+0x114>
    44e4:	22 e8       	ldi	r18, 0x82	; 130
    44e6:	3f ef       	ldi	r19, 0xFF	; 255
    44e8:	26 1b       	sub	r18, r22
    44ea:	37 0b       	sbc	r19, r23
    44ec:	2a 31       	cpi	r18, 0x1A	; 26
    44ee:	31 05       	cpc	r19, r1
    44f0:	2c f0       	brlt	.+10     	; 0x44fc <__pack_f+0x76>
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e0       	ldi	r20, 0x00	; 0
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	2a c0       	rjmp	.+84     	; 0x4550 <__pack_f+0xca>
    44fc:	b8 01       	movw	r22, r16
    44fe:	a7 01       	movw	r20, r14
    4500:	02 2e       	mov	r0, r18
    4502:	04 c0       	rjmp	.+8      	; 0x450c <__pack_f+0x86>
    4504:	76 95       	lsr	r23
    4506:	67 95       	ror	r22
    4508:	57 95       	ror	r21
    450a:	47 95       	ror	r20
    450c:	0a 94       	dec	r0
    450e:	d2 f7       	brpl	.-12     	; 0x4504 <__pack_f+0x7e>
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	a0 e0       	ldi	r26, 0x00	; 0
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	04 c0       	rjmp	.+8      	; 0x4522 <__pack_f+0x9c>
    451a:	88 0f       	add	r24, r24
    451c:	99 1f       	adc	r25, r25
    451e:	aa 1f       	adc	r26, r26
    4520:	bb 1f       	adc	r27, r27
    4522:	2a 95       	dec	r18
    4524:	d2 f7       	brpl	.-12     	; 0x451a <__pack_f+0x94>
    4526:	01 97       	sbiw	r24, 0x01	; 1
    4528:	a1 09       	sbc	r26, r1
    452a:	b1 09       	sbc	r27, r1
    452c:	8e 21       	and	r24, r14
    452e:	9f 21       	and	r25, r15
    4530:	a0 23       	and	r26, r16
    4532:	b1 23       	and	r27, r17
    4534:	00 97       	sbiw	r24, 0x00	; 0
    4536:	a1 05       	cpc	r26, r1
    4538:	b1 05       	cpc	r27, r1
    453a:	21 f0       	breq	.+8      	; 0x4544 <__pack_f+0xbe>
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	a0 e0       	ldi	r26, 0x00	; 0
    4542:	b0 e0       	ldi	r27, 0x00	; 0
    4544:	9a 01       	movw	r18, r20
    4546:	ab 01       	movw	r20, r22
    4548:	28 2b       	or	r18, r24
    454a:	39 2b       	or	r19, r25
    454c:	4a 2b       	or	r20, r26
    454e:	5b 2b       	or	r21, r27
    4550:	da 01       	movw	r26, r20
    4552:	c9 01       	movw	r24, r18
    4554:	8f 77       	andi	r24, 0x7F	; 127
    4556:	90 70       	andi	r25, 0x00	; 0
    4558:	a0 70       	andi	r26, 0x00	; 0
    455a:	b0 70       	andi	r27, 0x00	; 0
    455c:	80 34       	cpi	r24, 0x40	; 64
    455e:	91 05       	cpc	r25, r1
    4560:	a1 05       	cpc	r26, r1
    4562:	b1 05       	cpc	r27, r1
    4564:	39 f4       	brne	.+14     	; 0x4574 <__pack_f+0xee>
    4566:	27 ff       	sbrs	r18, 7
    4568:	09 c0       	rjmp	.+18     	; 0x457c <__pack_f+0xf6>
    456a:	20 5c       	subi	r18, 0xC0	; 192
    456c:	3f 4f       	sbci	r19, 0xFF	; 255
    456e:	4f 4f       	sbci	r20, 0xFF	; 255
    4570:	5f 4f       	sbci	r21, 0xFF	; 255
    4572:	04 c0       	rjmp	.+8      	; 0x457c <__pack_f+0xf6>
    4574:	21 5c       	subi	r18, 0xC1	; 193
    4576:	3f 4f       	sbci	r19, 0xFF	; 255
    4578:	4f 4f       	sbci	r20, 0xFF	; 255
    457a:	5f 4f       	sbci	r21, 0xFF	; 255
    457c:	e0 e0       	ldi	r30, 0x00	; 0
    457e:	f0 e0       	ldi	r31, 0x00	; 0
    4580:	20 30       	cpi	r18, 0x00	; 0
    4582:	a0 e0       	ldi	r26, 0x00	; 0
    4584:	3a 07       	cpc	r19, r26
    4586:	a0 e0       	ldi	r26, 0x00	; 0
    4588:	4a 07       	cpc	r20, r26
    458a:	a0 e4       	ldi	r26, 0x40	; 64
    458c:	5a 07       	cpc	r21, r26
    458e:	10 f0       	brcs	.+4      	; 0x4594 <__pack_f+0x10e>
    4590:	e1 e0       	ldi	r30, 0x01	; 1
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	79 01       	movw	r14, r18
    4596:	8a 01       	movw	r16, r20
    4598:	27 c0       	rjmp	.+78     	; 0x45e8 <__pack_f+0x162>
    459a:	60 38       	cpi	r22, 0x80	; 128
    459c:	71 05       	cpc	r23, r1
    459e:	64 f5       	brge	.+88     	; 0x45f8 <__pack_f+0x172>
    45a0:	fb 01       	movw	r30, r22
    45a2:	e1 58       	subi	r30, 0x81	; 129
    45a4:	ff 4f       	sbci	r31, 0xFF	; 255
    45a6:	d8 01       	movw	r26, r16
    45a8:	c7 01       	movw	r24, r14
    45aa:	8f 77       	andi	r24, 0x7F	; 127
    45ac:	90 70       	andi	r25, 0x00	; 0
    45ae:	a0 70       	andi	r26, 0x00	; 0
    45b0:	b0 70       	andi	r27, 0x00	; 0
    45b2:	80 34       	cpi	r24, 0x40	; 64
    45b4:	91 05       	cpc	r25, r1
    45b6:	a1 05       	cpc	r26, r1
    45b8:	b1 05       	cpc	r27, r1
    45ba:	39 f4       	brne	.+14     	; 0x45ca <__pack_f+0x144>
    45bc:	e7 fe       	sbrs	r14, 7
    45be:	0d c0       	rjmp	.+26     	; 0x45da <__pack_f+0x154>
    45c0:	80 e4       	ldi	r24, 0x40	; 64
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	a0 e0       	ldi	r26, 0x00	; 0
    45c6:	b0 e0       	ldi	r27, 0x00	; 0
    45c8:	04 c0       	rjmp	.+8      	; 0x45d2 <__pack_f+0x14c>
    45ca:	8f e3       	ldi	r24, 0x3F	; 63
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	a0 e0       	ldi	r26, 0x00	; 0
    45d0:	b0 e0       	ldi	r27, 0x00	; 0
    45d2:	e8 0e       	add	r14, r24
    45d4:	f9 1e       	adc	r15, r25
    45d6:	0a 1f       	adc	r16, r26
    45d8:	1b 1f       	adc	r17, r27
    45da:	17 ff       	sbrs	r17, 7
    45dc:	05 c0       	rjmp	.+10     	; 0x45e8 <__pack_f+0x162>
    45de:	16 95       	lsr	r17
    45e0:	07 95       	ror	r16
    45e2:	f7 94       	ror	r15
    45e4:	e7 94       	ror	r14
    45e6:	31 96       	adiw	r30, 0x01	; 1
    45e8:	87 e0       	ldi	r24, 0x07	; 7
    45ea:	16 95       	lsr	r17
    45ec:	07 95       	ror	r16
    45ee:	f7 94       	ror	r15
    45f0:	e7 94       	ror	r14
    45f2:	8a 95       	dec	r24
    45f4:	d1 f7       	brne	.-12     	; 0x45ea <__pack_f+0x164>
    45f6:	05 c0       	rjmp	.+10     	; 0x4602 <__pack_f+0x17c>
    45f8:	ee 24       	eor	r14, r14
    45fa:	ff 24       	eor	r15, r15
    45fc:	87 01       	movw	r16, r14
    45fe:	ef ef       	ldi	r30, 0xFF	; 255
    4600:	f0 e0       	ldi	r31, 0x00	; 0
    4602:	6e 2f       	mov	r22, r30
    4604:	67 95       	ror	r22
    4606:	66 27       	eor	r22, r22
    4608:	67 95       	ror	r22
    460a:	90 2f       	mov	r25, r16
    460c:	9f 77       	andi	r25, 0x7F	; 127
    460e:	d7 94       	ror	r13
    4610:	dd 24       	eor	r13, r13
    4612:	d7 94       	ror	r13
    4614:	8e 2f       	mov	r24, r30
    4616:	86 95       	lsr	r24
    4618:	49 2f       	mov	r20, r25
    461a:	46 2b       	or	r20, r22
    461c:	58 2f       	mov	r21, r24
    461e:	5d 29       	or	r21, r13
    4620:	b7 01       	movw	r22, r14
    4622:	ca 01       	movw	r24, r20
    4624:	1f 91       	pop	r17
    4626:	0f 91       	pop	r16
    4628:	ff 90       	pop	r15
    462a:	ef 90       	pop	r14
    462c:	df 90       	pop	r13
    462e:	08 95       	ret

00004630 <__unpack_f>:
    4630:	fc 01       	movw	r30, r24
    4632:	db 01       	movw	r26, r22
    4634:	40 81       	ld	r20, Z
    4636:	51 81       	ldd	r21, Z+1	; 0x01
    4638:	22 81       	ldd	r18, Z+2	; 0x02
    463a:	62 2f       	mov	r22, r18
    463c:	6f 77       	andi	r22, 0x7F	; 127
    463e:	70 e0       	ldi	r23, 0x00	; 0
    4640:	22 1f       	adc	r18, r18
    4642:	22 27       	eor	r18, r18
    4644:	22 1f       	adc	r18, r18
    4646:	93 81       	ldd	r25, Z+3	; 0x03
    4648:	89 2f       	mov	r24, r25
    464a:	88 0f       	add	r24, r24
    464c:	82 2b       	or	r24, r18
    464e:	28 2f       	mov	r18, r24
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	99 1f       	adc	r25, r25
    4654:	99 27       	eor	r25, r25
    4656:	99 1f       	adc	r25, r25
    4658:	11 96       	adiw	r26, 0x01	; 1
    465a:	9c 93       	st	X, r25
    465c:	11 97       	sbiw	r26, 0x01	; 1
    465e:	21 15       	cp	r18, r1
    4660:	31 05       	cpc	r19, r1
    4662:	a9 f5       	brne	.+106    	; 0x46ce <__unpack_f+0x9e>
    4664:	41 15       	cp	r20, r1
    4666:	51 05       	cpc	r21, r1
    4668:	61 05       	cpc	r22, r1
    466a:	71 05       	cpc	r23, r1
    466c:	11 f4       	brne	.+4      	; 0x4672 <__unpack_f+0x42>
    466e:	82 e0       	ldi	r24, 0x02	; 2
    4670:	37 c0       	rjmp	.+110    	; 0x46e0 <__unpack_f+0xb0>
    4672:	82 e8       	ldi	r24, 0x82	; 130
    4674:	9f ef       	ldi	r25, 0xFF	; 255
    4676:	13 96       	adiw	r26, 0x03	; 3
    4678:	9c 93       	st	X, r25
    467a:	8e 93       	st	-X, r24
    467c:	12 97       	sbiw	r26, 0x02	; 2
    467e:	9a 01       	movw	r18, r20
    4680:	ab 01       	movw	r20, r22
    4682:	67 e0       	ldi	r22, 0x07	; 7
    4684:	22 0f       	add	r18, r18
    4686:	33 1f       	adc	r19, r19
    4688:	44 1f       	adc	r20, r20
    468a:	55 1f       	adc	r21, r21
    468c:	6a 95       	dec	r22
    468e:	d1 f7       	brne	.-12     	; 0x4684 <__unpack_f+0x54>
    4690:	83 e0       	ldi	r24, 0x03	; 3
    4692:	8c 93       	st	X, r24
    4694:	0d c0       	rjmp	.+26     	; 0x46b0 <__unpack_f+0x80>
    4696:	22 0f       	add	r18, r18
    4698:	33 1f       	adc	r19, r19
    469a:	44 1f       	adc	r20, r20
    469c:	55 1f       	adc	r21, r21
    469e:	12 96       	adiw	r26, 0x02	; 2
    46a0:	8d 91       	ld	r24, X+
    46a2:	9c 91       	ld	r25, X
    46a4:	13 97       	sbiw	r26, 0x03	; 3
    46a6:	01 97       	sbiw	r24, 0x01	; 1
    46a8:	13 96       	adiw	r26, 0x03	; 3
    46aa:	9c 93       	st	X, r25
    46ac:	8e 93       	st	-X, r24
    46ae:	12 97       	sbiw	r26, 0x02	; 2
    46b0:	20 30       	cpi	r18, 0x00	; 0
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	38 07       	cpc	r19, r24
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	48 07       	cpc	r20, r24
    46ba:	80 e4       	ldi	r24, 0x40	; 64
    46bc:	58 07       	cpc	r21, r24
    46be:	58 f3       	brcs	.-42     	; 0x4696 <__unpack_f+0x66>
    46c0:	14 96       	adiw	r26, 0x04	; 4
    46c2:	2d 93       	st	X+, r18
    46c4:	3d 93       	st	X+, r19
    46c6:	4d 93       	st	X+, r20
    46c8:	5c 93       	st	X, r21
    46ca:	17 97       	sbiw	r26, 0x07	; 7
    46cc:	08 95       	ret
    46ce:	2f 3f       	cpi	r18, 0xFF	; 255
    46d0:	31 05       	cpc	r19, r1
    46d2:	79 f4       	brne	.+30     	; 0x46f2 <__unpack_f+0xc2>
    46d4:	41 15       	cp	r20, r1
    46d6:	51 05       	cpc	r21, r1
    46d8:	61 05       	cpc	r22, r1
    46da:	71 05       	cpc	r23, r1
    46dc:	19 f4       	brne	.+6      	; 0x46e4 <__unpack_f+0xb4>
    46de:	84 e0       	ldi	r24, 0x04	; 4
    46e0:	8c 93       	st	X, r24
    46e2:	08 95       	ret
    46e4:	64 ff       	sbrs	r22, 4
    46e6:	03 c0       	rjmp	.+6      	; 0x46ee <__unpack_f+0xbe>
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	8c 93       	st	X, r24
    46ec:	12 c0       	rjmp	.+36     	; 0x4712 <__unpack_f+0xe2>
    46ee:	1c 92       	st	X, r1
    46f0:	10 c0       	rjmp	.+32     	; 0x4712 <__unpack_f+0xe2>
    46f2:	2f 57       	subi	r18, 0x7F	; 127
    46f4:	30 40       	sbci	r19, 0x00	; 0
    46f6:	13 96       	adiw	r26, 0x03	; 3
    46f8:	3c 93       	st	X, r19
    46fa:	2e 93       	st	-X, r18
    46fc:	12 97       	sbiw	r26, 0x02	; 2
    46fe:	83 e0       	ldi	r24, 0x03	; 3
    4700:	8c 93       	st	X, r24
    4702:	87 e0       	ldi	r24, 0x07	; 7
    4704:	44 0f       	add	r20, r20
    4706:	55 1f       	adc	r21, r21
    4708:	66 1f       	adc	r22, r22
    470a:	77 1f       	adc	r23, r23
    470c:	8a 95       	dec	r24
    470e:	d1 f7       	brne	.-12     	; 0x4704 <__unpack_f+0xd4>
    4710:	70 64       	ori	r23, 0x40	; 64
    4712:	14 96       	adiw	r26, 0x04	; 4
    4714:	4d 93       	st	X+, r20
    4716:	5d 93       	st	X+, r21
    4718:	6d 93       	st	X+, r22
    471a:	7c 93       	st	X, r23
    471c:	17 97       	sbiw	r26, 0x07	; 7
    471e:	08 95       	ret

00004720 <__fpcmp_parts_f>:
    4720:	1f 93       	push	r17
    4722:	dc 01       	movw	r26, r24
    4724:	fb 01       	movw	r30, r22
    4726:	9c 91       	ld	r25, X
    4728:	92 30       	cpi	r25, 0x02	; 2
    472a:	08 f4       	brcc	.+2      	; 0x472e <__fpcmp_parts_f+0xe>
    472c:	47 c0       	rjmp	.+142    	; 0x47bc <__fpcmp_parts_f+0x9c>
    472e:	80 81       	ld	r24, Z
    4730:	82 30       	cpi	r24, 0x02	; 2
    4732:	08 f4       	brcc	.+2      	; 0x4736 <__fpcmp_parts_f+0x16>
    4734:	43 c0       	rjmp	.+134    	; 0x47bc <__fpcmp_parts_f+0x9c>
    4736:	94 30       	cpi	r25, 0x04	; 4
    4738:	51 f4       	brne	.+20     	; 0x474e <__fpcmp_parts_f+0x2e>
    473a:	11 96       	adiw	r26, 0x01	; 1
    473c:	1c 91       	ld	r17, X
    473e:	84 30       	cpi	r24, 0x04	; 4
    4740:	99 f5       	brne	.+102    	; 0x47a8 <__fpcmp_parts_f+0x88>
    4742:	81 81       	ldd	r24, Z+1	; 0x01
    4744:	68 2f       	mov	r22, r24
    4746:	70 e0       	ldi	r23, 0x00	; 0
    4748:	61 1b       	sub	r22, r17
    474a:	71 09       	sbc	r23, r1
    474c:	3f c0       	rjmp	.+126    	; 0x47cc <__fpcmp_parts_f+0xac>
    474e:	84 30       	cpi	r24, 0x04	; 4
    4750:	21 f0       	breq	.+8      	; 0x475a <__fpcmp_parts_f+0x3a>
    4752:	92 30       	cpi	r25, 0x02	; 2
    4754:	31 f4       	brne	.+12     	; 0x4762 <__fpcmp_parts_f+0x42>
    4756:	82 30       	cpi	r24, 0x02	; 2
    4758:	b9 f1       	breq	.+110    	; 0x47c8 <__fpcmp_parts_f+0xa8>
    475a:	81 81       	ldd	r24, Z+1	; 0x01
    475c:	88 23       	and	r24, r24
    475e:	89 f1       	breq	.+98     	; 0x47c2 <__fpcmp_parts_f+0xa2>
    4760:	2d c0       	rjmp	.+90     	; 0x47bc <__fpcmp_parts_f+0x9c>
    4762:	11 96       	adiw	r26, 0x01	; 1
    4764:	1c 91       	ld	r17, X
    4766:	11 97       	sbiw	r26, 0x01	; 1
    4768:	82 30       	cpi	r24, 0x02	; 2
    476a:	f1 f0       	breq	.+60     	; 0x47a8 <__fpcmp_parts_f+0x88>
    476c:	81 81       	ldd	r24, Z+1	; 0x01
    476e:	18 17       	cp	r17, r24
    4770:	d9 f4       	brne	.+54     	; 0x47a8 <__fpcmp_parts_f+0x88>
    4772:	12 96       	adiw	r26, 0x02	; 2
    4774:	2d 91       	ld	r18, X+
    4776:	3c 91       	ld	r19, X
    4778:	13 97       	sbiw	r26, 0x03	; 3
    477a:	82 81       	ldd	r24, Z+2	; 0x02
    477c:	93 81       	ldd	r25, Z+3	; 0x03
    477e:	82 17       	cp	r24, r18
    4780:	93 07       	cpc	r25, r19
    4782:	94 f0       	brlt	.+36     	; 0x47a8 <__fpcmp_parts_f+0x88>
    4784:	28 17       	cp	r18, r24
    4786:	39 07       	cpc	r19, r25
    4788:	bc f0       	brlt	.+46     	; 0x47b8 <__fpcmp_parts_f+0x98>
    478a:	14 96       	adiw	r26, 0x04	; 4
    478c:	8d 91       	ld	r24, X+
    478e:	9d 91       	ld	r25, X+
    4790:	0d 90       	ld	r0, X+
    4792:	bc 91       	ld	r27, X
    4794:	a0 2d       	mov	r26, r0
    4796:	24 81       	ldd	r18, Z+4	; 0x04
    4798:	35 81       	ldd	r19, Z+5	; 0x05
    479a:	46 81       	ldd	r20, Z+6	; 0x06
    479c:	57 81       	ldd	r21, Z+7	; 0x07
    479e:	28 17       	cp	r18, r24
    47a0:	39 07       	cpc	r19, r25
    47a2:	4a 07       	cpc	r20, r26
    47a4:	5b 07       	cpc	r21, r27
    47a6:	18 f4       	brcc	.+6      	; 0x47ae <__fpcmp_parts_f+0x8e>
    47a8:	11 23       	and	r17, r17
    47aa:	41 f0       	breq	.+16     	; 0x47bc <__fpcmp_parts_f+0x9c>
    47ac:	0a c0       	rjmp	.+20     	; 0x47c2 <__fpcmp_parts_f+0xa2>
    47ae:	82 17       	cp	r24, r18
    47b0:	93 07       	cpc	r25, r19
    47b2:	a4 07       	cpc	r26, r20
    47b4:	b5 07       	cpc	r27, r21
    47b6:	40 f4       	brcc	.+16     	; 0x47c8 <__fpcmp_parts_f+0xa8>
    47b8:	11 23       	and	r17, r17
    47ba:	19 f0       	breq	.+6      	; 0x47c2 <__fpcmp_parts_f+0xa2>
    47bc:	61 e0       	ldi	r22, 0x01	; 1
    47be:	70 e0       	ldi	r23, 0x00	; 0
    47c0:	05 c0       	rjmp	.+10     	; 0x47cc <__fpcmp_parts_f+0xac>
    47c2:	6f ef       	ldi	r22, 0xFF	; 255
    47c4:	7f ef       	ldi	r23, 0xFF	; 255
    47c6:	02 c0       	rjmp	.+4      	; 0x47cc <__fpcmp_parts_f+0xac>
    47c8:	60 e0       	ldi	r22, 0x00	; 0
    47ca:	70 e0       	ldi	r23, 0x00	; 0
    47cc:	cb 01       	movw	r24, r22
    47ce:	1f 91       	pop	r17
    47d0:	08 95       	ret

000047d2 <__mulsi3>:
    47d2:	62 9f       	mul	r22, r18
    47d4:	d0 01       	movw	r26, r0
    47d6:	73 9f       	mul	r23, r19
    47d8:	f0 01       	movw	r30, r0
    47da:	82 9f       	mul	r24, r18
    47dc:	e0 0d       	add	r30, r0
    47de:	f1 1d       	adc	r31, r1
    47e0:	64 9f       	mul	r22, r20
    47e2:	e0 0d       	add	r30, r0
    47e4:	f1 1d       	adc	r31, r1
    47e6:	92 9f       	mul	r25, r18
    47e8:	f0 0d       	add	r31, r0
    47ea:	83 9f       	mul	r24, r19
    47ec:	f0 0d       	add	r31, r0
    47ee:	74 9f       	mul	r23, r20
    47f0:	f0 0d       	add	r31, r0
    47f2:	65 9f       	mul	r22, r21
    47f4:	f0 0d       	add	r31, r0
    47f6:	99 27       	eor	r25, r25
    47f8:	72 9f       	mul	r23, r18
    47fa:	b0 0d       	add	r27, r0
    47fc:	e1 1d       	adc	r30, r1
    47fe:	f9 1f       	adc	r31, r25
    4800:	63 9f       	mul	r22, r19
    4802:	b0 0d       	add	r27, r0
    4804:	e1 1d       	adc	r30, r1
    4806:	f9 1f       	adc	r31, r25
    4808:	bd 01       	movw	r22, r26
    480a:	cf 01       	movw	r24, r30
    480c:	11 24       	eor	r1, r1
    480e:	08 95       	ret

00004810 <__divmodhi4>:
    4810:	97 fb       	bst	r25, 7
    4812:	09 2e       	mov	r0, r25
    4814:	07 26       	eor	r0, r23
    4816:	0a d0       	rcall	.+20     	; 0x482c <__divmodhi4_neg1>
    4818:	77 fd       	sbrc	r23, 7
    481a:	04 d0       	rcall	.+8      	; 0x4824 <__divmodhi4_neg2>
    481c:	49 d0       	rcall	.+146    	; 0x48b0 <__udivmodhi4>
    481e:	06 d0       	rcall	.+12     	; 0x482c <__divmodhi4_neg1>
    4820:	00 20       	and	r0, r0
    4822:	1a f4       	brpl	.+6      	; 0x482a <__divmodhi4_exit>

00004824 <__divmodhi4_neg2>:
    4824:	70 95       	com	r23
    4826:	61 95       	neg	r22
    4828:	7f 4f       	sbci	r23, 0xFF	; 255

0000482a <__divmodhi4_exit>:
    482a:	08 95       	ret

0000482c <__divmodhi4_neg1>:
    482c:	f6 f7       	brtc	.-4      	; 0x482a <__divmodhi4_exit>
    482e:	90 95       	com	r25
    4830:	81 95       	neg	r24
    4832:	9f 4f       	sbci	r25, 0xFF	; 255
    4834:	08 95       	ret

00004836 <__udivmodsi4>:
    4836:	a1 e2       	ldi	r26, 0x21	; 33
    4838:	1a 2e       	mov	r1, r26
    483a:	aa 1b       	sub	r26, r26
    483c:	bb 1b       	sub	r27, r27
    483e:	fd 01       	movw	r30, r26
    4840:	0d c0       	rjmp	.+26     	; 0x485c <__udivmodsi4_ep>

00004842 <__udivmodsi4_loop>:
    4842:	aa 1f       	adc	r26, r26
    4844:	bb 1f       	adc	r27, r27
    4846:	ee 1f       	adc	r30, r30
    4848:	ff 1f       	adc	r31, r31
    484a:	a2 17       	cp	r26, r18
    484c:	b3 07       	cpc	r27, r19
    484e:	e4 07       	cpc	r30, r20
    4850:	f5 07       	cpc	r31, r21
    4852:	20 f0       	brcs	.+8      	; 0x485c <__udivmodsi4_ep>
    4854:	a2 1b       	sub	r26, r18
    4856:	b3 0b       	sbc	r27, r19
    4858:	e4 0b       	sbc	r30, r20
    485a:	f5 0b       	sbc	r31, r21

0000485c <__udivmodsi4_ep>:
    485c:	66 1f       	adc	r22, r22
    485e:	77 1f       	adc	r23, r23
    4860:	88 1f       	adc	r24, r24
    4862:	99 1f       	adc	r25, r25
    4864:	1a 94       	dec	r1
    4866:	69 f7       	brne	.-38     	; 0x4842 <__udivmodsi4_loop>
    4868:	60 95       	com	r22
    486a:	70 95       	com	r23
    486c:	80 95       	com	r24
    486e:	90 95       	com	r25
    4870:	9b 01       	movw	r18, r22
    4872:	ac 01       	movw	r20, r24
    4874:	bd 01       	movw	r22, r26
    4876:	cf 01       	movw	r24, r30
    4878:	08 95       	ret

0000487a <__divmodsi4>:
    487a:	97 fb       	bst	r25, 7
    487c:	09 2e       	mov	r0, r25
    487e:	05 26       	eor	r0, r21
    4880:	0e d0       	rcall	.+28     	; 0x489e <__divmodsi4_neg1>
    4882:	57 fd       	sbrc	r21, 7
    4884:	04 d0       	rcall	.+8      	; 0x488e <__divmodsi4_neg2>
    4886:	d7 df       	rcall	.-82     	; 0x4836 <__udivmodsi4>
    4888:	0a d0       	rcall	.+20     	; 0x489e <__divmodsi4_neg1>
    488a:	00 1c       	adc	r0, r0
    488c:	38 f4       	brcc	.+14     	; 0x489c <__divmodsi4_exit>

0000488e <__divmodsi4_neg2>:
    488e:	50 95       	com	r21
    4890:	40 95       	com	r20
    4892:	30 95       	com	r19
    4894:	21 95       	neg	r18
    4896:	3f 4f       	sbci	r19, 0xFF	; 255
    4898:	4f 4f       	sbci	r20, 0xFF	; 255
    489a:	5f 4f       	sbci	r21, 0xFF	; 255

0000489c <__divmodsi4_exit>:
    489c:	08 95       	ret

0000489e <__divmodsi4_neg1>:
    489e:	f6 f7       	brtc	.-4      	; 0x489c <__divmodsi4_exit>
    48a0:	90 95       	com	r25
    48a2:	80 95       	com	r24
    48a4:	70 95       	com	r23
    48a6:	61 95       	neg	r22
    48a8:	7f 4f       	sbci	r23, 0xFF	; 255
    48aa:	8f 4f       	sbci	r24, 0xFF	; 255
    48ac:	9f 4f       	sbci	r25, 0xFF	; 255
    48ae:	08 95       	ret

000048b0 <__udivmodhi4>:
    48b0:	aa 1b       	sub	r26, r26
    48b2:	bb 1b       	sub	r27, r27
    48b4:	51 e1       	ldi	r21, 0x11	; 17
    48b6:	07 c0       	rjmp	.+14     	; 0x48c6 <__udivmodhi4_ep>

000048b8 <__udivmodhi4_loop>:
    48b8:	aa 1f       	adc	r26, r26
    48ba:	bb 1f       	adc	r27, r27
    48bc:	a6 17       	cp	r26, r22
    48be:	b7 07       	cpc	r27, r23
    48c0:	10 f0       	brcs	.+4      	; 0x48c6 <__udivmodhi4_ep>
    48c2:	a6 1b       	sub	r26, r22
    48c4:	b7 0b       	sbc	r27, r23

000048c6 <__udivmodhi4_ep>:
    48c6:	88 1f       	adc	r24, r24
    48c8:	99 1f       	adc	r25, r25
    48ca:	5a 95       	dec	r21
    48cc:	a9 f7       	brne	.-22     	; 0x48b8 <__udivmodhi4_loop>
    48ce:	80 95       	com	r24
    48d0:	90 95       	com	r25
    48d2:	bc 01       	movw	r22, r24
    48d4:	cd 01       	movw	r24, r26
    48d6:	08 95       	ret

000048d8 <__prologue_saves__>:
    48d8:	2f 92       	push	r2
    48da:	3f 92       	push	r3
    48dc:	4f 92       	push	r4
    48de:	5f 92       	push	r5
    48e0:	6f 92       	push	r6
    48e2:	7f 92       	push	r7
    48e4:	8f 92       	push	r8
    48e6:	9f 92       	push	r9
    48e8:	af 92       	push	r10
    48ea:	bf 92       	push	r11
    48ec:	cf 92       	push	r12
    48ee:	df 92       	push	r13
    48f0:	ef 92       	push	r14
    48f2:	ff 92       	push	r15
    48f4:	0f 93       	push	r16
    48f6:	1f 93       	push	r17
    48f8:	cf 93       	push	r28
    48fa:	df 93       	push	r29
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
    4900:	ca 1b       	sub	r28, r26
    4902:	db 0b       	sbc	r29, r27
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	cd bf       	out	0x3d, r28	; 61
    490e:	09 94       	ijmp

00004910 <__epilogue_restores__>:
    4910:	2a 88       	ldd	r2, Y+18	; 0x12
    4912:	39 88       	ldd	r3, Y+17	; 0x11
    4914:	48 88       	ldd	r4, Y+16	; 0x10
    4916:	5f 84       	ldd	r5, Y+15	; 0x0f
    4918:	6e 84       	ldd	r6, Y+14	; 0x0e
    491a:	7d 84       	ldd	r7, Y+13	; 0x0d
    491c:	8c 84       	ldd	r8, Y+12	; 0x0c
    491e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4920:	aa 84       	ldd	r10, Y+10	; 0x0a
    4922:	b9 84       	ldd	r11, Y+9	; 0x09
    4924:	c8 84       	ldd	r12, Y+8	; 0x08
    4926:	df 80       	ldd	r13, Y+7	; 0x07
    4928:	ee 80       	ldd	r14, Y+6	; 0x06
    492a:	fd 80       	ldd	r15, Y+5	; 0x05
    492c:	0c 81       	ldd	r16, Y+4	; 0x04
    492e:	1b 81       	ldd	r17, Y+3	; 0x03
    4930:	aa 81       	ldd	r26, Y+2	; 0x02
    4932:	b9 81       	ldd	r27, Y+1	; 0x01
    4934:	ce 0f       	add	r28, r30
    4936:	d1 1d       	adc	r29, r1
    4938:	0f b6       	in	r0, 0x3f	; 63
    493a:	f8 94       	cli
    493c:	de bf       	out	0x3e, r29	; 62
    493e:	0f be       	out	0x3f, r0	; 63
    4940:	cd bf       	out	0x3d, r28	; 61
    4942:	ed 01       	movw	r28, r26
    4944:	08 95       	ret

00004946 <__tablejump2__>:
    4946:	ee 0f       	add	r30, r30
    4948:	ff 1f       	adc	r31, r31

0000494a <__tablejump__>:
    494a:	05 90       	lpm	r0, Z+
    494c:	f4 91       	lpm	r31, Z+
    494e:	e0 2d       	mov	r30, r0
    4950:	09 94       	ijmp

00004952 <_exit>:
    4952:	f8 94       	cli

00004954 <__stop_program>:
    4954:	ff cf       	rjmp	.-2      	; 0x4954 <__stop_program>
